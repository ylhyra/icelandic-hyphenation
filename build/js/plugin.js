/*! For license information please see plugin.js.LICENSE.txt */
!function(){var t={30:function(t,e,n){var s=n(473),r=n(259),i=n(878),a=n(105),o=n(234),l=n(725),u=n(183);u.alea=s,u.xor128=r,u.xorwow=i,u.xorshift7=a,u.xor4096=o,u.tychei=l,t.exports=u},473:function(t,e,n){var s;!function(t,r,i){function a(t){var e,n=this,s=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var s=.02519603282416938*(e+=t.charCodeAt(n));s-=e=s>>>0,e=(s*=e)>>>0,e+=4294967296*(s-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(t),n.s0<0&&(n.s0+=1),n.s1-=s(t),n.s1<0&&(n.s1+=1),n.s2-=s(t),n.s2<0&&(n.s2+=1),s=null}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function l(t,e){var n=new a(t),s=e&&e.state,r=n.next;return r.int32=function(){return 4294967296*n.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(e,n,e,r))||(r.exports=s):this.alea=l}(0,t=n.nmd(t),n.amdD)},725:function(t,e,n){var s;!function(t,r,i){function a(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,s=e.d,r=e.a;return t=t<<25^t>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-s|0,e.d=s<<16^n>>>16^r,e.a=r-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var s=0;s<n.length+20;s++)e.b^=0|n.charCodeAt(s),e.next()}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function l(t,e){var n=new a(t),s=e&&e.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(e,n,e,r))||(r.exports=s):this.tychei=l}(0,t=n.nmd(t),n.amdD)},259:function(t,e,n){var s;!function(t,r,i){function a(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var s=0;s<n.length+64;s++)e.x^=0|n.charCodeAt(s),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function l(t,e){var n=new a(t),s=e&&e.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(e,n,e,r))||(r.exports=s):this.xor128=l}(0,t=n.nmd(t),n.amdD)},234:function(t,e,n){var s;!function(t,r,i){function a(t){var e=this;e.next=function(){var t,n,s=e.w,r=e.X,i=e.i;return e.w=s=s+1640531527|0,n=r[i+34&127],t=r[i=i+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=r[i]=n^t,e.i=i,n+(s^s>>>16)|0},function(t,e){var n,s,r,i,a,o=[],l=128;for(e===(0|e)?(s=e,e=null):(e+="\0",s=0,l=Math.max(l,e.length)),r=0,i=-32;i<l;++i)e&&(s^=e.charCodeAt((i+32)%e.length)),0===i&&(a=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,i>=0&&(a=a+1640531527|0,r=0==(n=o[127&i]^=s+a)?r+1:0);for(r>=128&&(o[127&(e&&e.length||0)]=-1),r=127,i=512;i>0;--i)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;t.w=a,t.X=o,t.i=r}(e,t)}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function l(t,e){null==t&&(t=+new Date);var n=new a(t),s=e&&e.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},r.int32=n.next,r.quick=r,s&&(s.X&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(e,n,e,r))||(r.exports=s):this.xor4096=l}(0,t=n.nmd(t),n.amdD)},105:function(t,e,n){var s;!function(t,r,i){function a(t){var e=this;e.next=function(){var t,n,s=e.x,r=e.i;return t=s[r],n=(t^=t>>>7)^t<<24,n^=(t=s[r+1&7])^t>>>10,n^=(t=s[r+3&7])^t>>>3,n^=(t=s[r+4&7])^t<<7,t=s[r+7&7],n^=(t^=t<<13)^t<<9,s[r]=n,e.i=r+1&7,n},function(t,e){var n,s=[];if(e===(0|e))s[0]=e;else for(e=""+e,n=0;n<e.length;++n)s[7&n]=s[7&n]<<15^e.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],t.x=s,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function l(t,e){null==t&&(t=+new Date);var n=new a(t),s=e&&e.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},r.int32=n.next,r.quick=r,s&&(s.x&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(e,n,e,r))||(r.exports=s):this.xorshift7=l}(0,t=n.nmd(t),n.amdD)},878:function(t,e,n){var s;!function(t,r,i){function a(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var s=0;s<n.length+64;s++)e.x^=0|n.charCodeAt(s),s==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function l(t,e){var n=new a(t),s=e&&e.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(e,n,e,r))||(r.exports=s):this.xorwow=l}(0,t=n.nmd(t),n.amdD)},183:function(t,e,n){var s;!function(r,i){var a,o=this,l=256,u=i.pow(l,6),c=i.pow(2,52),h=2*c,d=255;function p(t,e,n){var s=[],d=x(m((e=1==e?{entropy:!0}:e||{}).entropy?[t,y(r)]:null==t?function(){try{var t;return a&&(t=a.randomBytes)?t=t(l):(t=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(t)),y(t)}catch(t){var e=o.navigator,n=e&&e.plugins;return[+new Date,o,n,o.screen,y(r)]}}():t,3),s),p=new f(s),b=function(){for(var t=p.g(6),e=u,n=0;t<c;)t=(t+n)*l,e*=l,n=p.g(1);for(;t>=h;)t/=2,e/=2,n>>>=1;return(t+n)/e};return b.int32=function(){return 0|p.g(4)},b.quick=function(){return p.g(4)/4294967296},b.double=b,x(y(p.S),r),(e.pass||n||function(t,e,n,s){return s&&(s.S&&g(s,p),t.state=function(){return g(p,{})}),n?(i.random=t,e):t})(b,d,"global"in e?e.global:this==i,e.state)}function f(t){var e,n=t.length,s=this,r=0,i=s.i=s.j=0,a=s.S=[];for(n||(t=[n++]);r<l;)a[r]=r++;for(r=0;r<l;r++)a[r]=a[i=d&i+t[r%n]+(e=a[r])],a[i]=e;(s.g=function(t){for(var e,n=0,r=s.i,i=s.j,a=s.S;t--;)e=a[r=d&r+1],n=n*l+a[d&(a[r]=a[i=d&i+e])+(a[i]=e)];return s.i=r,s.j=i,n})(l)}function g(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function m(t,e){var n,s=[],r=typeof t;if(e&&"object"==r)for(n in t)try{s.push(m(t[n],e-1))}catch(t){}return s.length?s:"string"==r?t:t+"\0"}function x(t,e){for(var n,s=t+"",r=0;r<s.length;)e[d&r]=d&(n^=19*e[d&r])+s.charCodeAt(r++);return y(e)}function y(t){return String.fromCharCode.apply(0,t)}if(i.seedrandom=p,x(i.random(),r),t.exports){t.exports=p;try{a=n(906)}catch(t){}}else void 0===(s=function(){return p}.call(e,n,e,t))||(t.exports=s)}([],Math)},906:function(){},352:function(){},758:function(){}},e={};function n(s){if(e[s])return e[s].exports;var r=e[s]={id:s,loaded:!1,exports:{}};return t[s].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.d=function(t,e){for(var s in e)n.o(e,s)&&!n.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=function(t){return t.paths=[],t.children||(t.children=[]),t},function(){"use strict";var t={};n.r(t),n.d(t,{assertParamsValid:function(){return Cs},computeFlatOffset:function(){return Os},computeOutShape:function(){return $s},getNormalizedAxes:function(){return Ss},isSliceContinous:function(){return _s},maskToAxes:function(){return ks},parseSliceParams:function(){return Ls},startForAxis:function(){return Ds},startIndicesWithElidedDims:function(){return As},stopForAxis:function(){return Fs},stopIndicesWithElidedDims:function(){return Ns},stridesForAxis:function(){return Ts},stridesWithElidedDims:function(){return Is}});var e={};n.r(e),n.d(e,{collectGatherOpShapeInfo:function(){return ai},computeOutShape:function(){return ii},segOpComputeOptimalWindowSize:function(){return ri}});var s={};n.r(s),n.d(s,{ERF_A1:function(){return Eo},ERF_A2:function(){return Ro},ERF_A3:function(){return So},ERF_A4:function(){return Ao},ERF_A5:function(){return No},ERF_P:function(){return Io},PARALLELIZE_THRESHOLD:function(){return ni},SELU_SCALE:function(){return $o},SELU_SCALEALPHA:function(){return ko},applyActivation:function(){return ka},assertAndGetBroadcastShape:function(){return Xr},assertAxesAreInnerMostDims:function(){return er},assertParamsConsistent:function(){return Tr},assignToTypedArray:function(){return Mo},axesAreInnerMostDims:function(){return Js},calculateShapes:function(){return Co},castTensor:function(){return Wo},combineLocations:function(){return Zs},complexWithEvenIndex:function(){return Oo},complexWithOddIndex:function(){return Lo},computeConv2DInfo:function(){return pr},computeConv3DInfo:function(){return fr},computeDefaultPad:function(){return gr},computeDilation2DInfo:function(){return cr},computeOptimalWindowSize:function(){return si},computeOutAndReduceShapes:function(){return Qs},computeOutShape:function(){return Dr},computePool2DInfo:function(){return hr},computePool3DInfo:function(){return dr},convertConv2DDataFormat:function(){return Cr},eitherStridesOrDilationsAreOne:function(){return vr},expandShapeToKeepDim:function(){return tr},exponent:function(){return Po},exponents:function(){return zo},getAxesPermutation:function(){return nr},getBroadcastDims:function(){return Kr},getComplexWithIndex:function(){return Bo},getFusedBiasGradient:function(){return Ca},getFusedDyActivation:function(){return va},getImageCenter:function(){return po},getInnerMostAxes:function(){return rr},getPermuted:function(){return go},getReductionAxes:function(){return qr},getReshaped:function(){return fo},getReshapedPermuted:function(){return mo},getSliceBeginCoords:function(){return xo},getSliceSize:function(){return yo},getUndoAxesPermutation:function(){return sr},linspaceImpl:function(){return Vo},log:function(){return Do},mergeRealAndImagArrays:function(){return Fo},prepareAndValidate:function(){return bo},prepareSplitSize:function(){return sa},reshapeTensor:function(){return Uo},segment_util:function(){return e},shouldFuse:function(){return $a},slice_util:function(){return t},splitRealAndImagArrays:function(){return _o},tupleValuesAreOne:function(){return wr},upcastType:function(){return dn},validateInput:function(){return vo},validateUpdateShape:function(){return wo},warn:function(){return To}});var r={};n.r(r),n.d(r,{addImpl:function(){return wh},ceilImpl:function(){return $h},expImpl:function(){return Ih},expm1Impl:function(){return Eh},floorImpl:function(){return Rh},logImpl:function(){return Sh},maxImpl:function(){return Ah},multiplyImpl:function(){return Nh},rsqrtImpl:function(){return Dh},simpleAbsImpl:function(){return dh},sliceImpl:function(){return Fh},subImpl:function(){return _h},transposeImpl:function(){return Lh},uniqueImpl:function(){return Bh}});class i{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class a{time(t){return o("time")}read(t){return o("read")}readSync(t){return o("readSync")}numDataIds(){return o("numDataIds")}disposeData(t){return o("disposeData")}write(t,e,n){return o("write")}move(t,e,n,s){return o("move")}memory(){return o("memory")}floatPrecision(){return o("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,n,s){return o("batchMatMul")}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:s,bias:r,activation:i,preluActivationWeights:a}){return o("fusedBatchMatMul")}slice(t,e,n){return o("slice")}stridedSlice(t,e,n,s){return o("stridedSlice")}unstack(t,e){return o("unstack")}reverse(t,e){return o("reverse")}concat(t,e){return o("concat")}neg(t){return o("neg")}add(t,e){return o("add")}addN(t){return o("addN")}subtract(t,e){return o("subtract")}multiply(t,e){return o("multiply")}realDivide(t,e){return o("realDivide")}floorDiv(t,e){return o("floorDiv")}sum(t,e){return o("sum")}prod(t,e){return o("prod")}unsortedSegmentSum(t,e,n){return o("unsortedSegmentSum")}argMin(t,e){return o("argMin")}argMax(t,e){return o("argMax")}equal(t,e){return o("equal")}notEqual(t,e){return o("notEqual")}less(t,e){return o("less")}lessEqual(t,e){return o("lessEqual")}greater(t,e){return o("greater")}greaterEqual(t,e){return o("greaterEqual")}logicalNot(t){return o("logicalNot")}logicalAnd(t,e){return o("logicalAnd")}logicalOr(t,e){return o("logicalOr")}where(t){return o("where")}select(t,e,n){return o("select")}topk(t,e,n){return o("topk")}min(t,e){return o("min")}minimum(t,e){return o("minimum")}mod(t,e){return o("mod")}max(t,e){return o("max")}maximum(t,e){return o("maximum")}all(t,e){return o("all")}any(t,e){return o("any")}squaredDifference(t,e){return o("squaredDifference")}ceil(t){return o("ceil")}floor(t){return o("floor")}round(t){return o("round")}sign(t){return o("sign")}isNaN(t){return o("isNaN")}isInf(t){return o("isInf")}isFinite(t){return o("isFinite")}pow(t,e){return o("pow")}exp(t){return o("exp")}expm1(t){return o("expm1")}softmax(t,e){return o("softmax")}log(t){return o("log")}log1p(t){return o("log1p")}sqrt(t){return o("sqrt")}rsqrt(t){return o("rsqrt")}square(t){return o("square")}reciprocal(t){return o("reciprocal")}relu(t){return o("relu")}relu6(t){return o("relu6")}prelu(t,e){return o("prelu")}elu(t){return o("elu")}eluDer(t,e){return o("eluDer")}selu(t){return o("selu")}int(t){return o("int")}clip(t,e,n){return o("clip")}abs(t){return o("abs")}complexAbs(t){return o("complexAbs")}sigmoid(t){return o("sigmoid")}softplus(t){return o("softplus")}sin(t){return o("sin")}cos(t){return o("cos")}tan(t){return o("tan")}asin(t){return o("asin")}acos(t){return o("acos")}atan(t){return o("atan")}atan2(t,e){return o("atan2")}sinh(t){return o("sinh")}cosh(t){return o("cosh")}tanh(t){return o("tanh")}asinh(t){return o("asinh")}acosh(t){return o("acosh")}atanh(t){return o("atanh")}erf(t){return o("erf")}step(t,e){return o("step")}fusedConv2d({input:t,filter:e,convInfo:n,bias:s,activation:r,preluActivationWeights:i}){return o("fusedConv2d")}conv2d(t,e,n){return o("conv2d")}conv2dDerInput(t,e,n){return o("conv2dDerInput")}conv2dDerFilter(t,e,n){return o("conv2dDerFilter")}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:s,activation:r,preluActivationWeights:i}){return o("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,n){return o("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,n){return o("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return o("depthwiseConv2DDerFilter")}conv3d(t,e,n){return o("conv3d")}conv3dDerInput(t,e,n){return o("conv3dDerInput")}conv3dDerFilter(t,e,n){return o("conv3dDerFilter")}maxPool(t,e){return o("maxPool")}maxPoolBackprop(t,e,n,s){return o("maxPoolBackprop")}avgPool(t,e){return o("avgPool")}avgPoolBackprop(t,e,n){return o("avgPoolBackprop")}avgPool3d(t,e){return o("avgPool3d")}avgPool3dBackprop(t,e,n){return o("avgPool3dBackprop")}maxPool3d(t,e){return o("maxPool3d")}maxPool3dBackprop(t,e,n,s){return o("maxPool3dBackprop")}reshape(t,e){return o("reshape")}cast(t,e){return o("cast")}tile(t,e){return o("tile")}pad(t,e,n){return o("pad")}transpose(t,e){return o("transpose")}gather(t,e,n){return o("gather")}gatherND(t,e){return o("gatherND")}scatterND(t,e,n){return o("scatterND")}batchToSpaceND(t,e,n){return o("batchToSpaceND")}spaceToBatchND(t,e,n){return o("spaceToBatchND")}resizeBilinear(t,e,n,s){return o("resizeBilinear")}resizeBilinearBackprop(t,e,n){return o("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,s){return o("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return o("resizeNearestNeighborBackprop")}batchNorm(t,e,n,s,r,i){return o("batchNorm")}localResponseNormalization4D(t,e,n,s,r){return o("localResponseNormalization4D")}LRNGrad(t,e,n,s,r,i,a){return o("LRNGrad")}multinomial(t,e,n,s){return o("multinomial")}oneHot(t,e,n,s){return o("oneHot")}cumsum(t,e,n,s){return o("cumsum")}nonMaxSuppression(t,e,n,s,r){return o("nonMaxSuppression")}fft(t){return o("fft")}ifft(t){return o("ifft")}complex(t,e){return o("complex")}real(t){return o("real")}imag(t){return o("imag")}cropAndResize(t,e,n,s,r,i){return o("cropAndResize")}depthToSpace(t,e,n){return o("depthToSpace")}split(t,e,n){return o("split")}sparseToDense(t,e,n,s){return o("sparseToDense")}diag(t){return o("diag")}fill(t,e,n){return o("fill")}onesLike(t){return o("onesLike")}zerosLike(t){return o("zerosLike")}linspace(t,e,n){return o("linspace")}dispose(){return o("dispose")}}function o(t){throw new Error(`'${t}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}class l{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(e instanceof Promise)throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("=")))),e}(this.global.location.search);"tfjsflags"in t&&t.tfjsflags.split(",").forEach((t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)}))}}function u(){return h}let c,h=null;function d(){if(null==c){let t;if("undefined"!=typeof window)t=window;else if(void 0!==n.g)t=n.g;else if("undefined"!=typeof process)t=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}c=t}return c}function p(t,e){const n=function(){const t=d();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const s=e();return n.set(t,s),n.get(t)}}const f="Acos",g="Acosh",m="Add",x="ArgMax",y="ArgMin",b="Asin",w="Asinh",v="Atan",C="Atanh",k="Atan2",$="AvgPool",I="AvgPoolBackprop",E="AvgPool3D",R="BatchMatMul",S="BatchToSpaceND",A="BroadcastTo",N="Cast",T="Ceil",D="ClipByValue",F="Concat",_="Conv2D",O="Conv2DBackpropInput",L="Conv3D",B="Cos",M="Cosh",z="Cumsum",P="DepthwiseConv2dNative",W="Dilation2D",U="Div",V="Exp",G="Expm1",H="FlipLeftRight",j="Floor",K="FloorDiv",q="FusedBatchNorm",X="GatherV2",Y="GreaterEqual",J="Identity",Z="IsFinite",Q="IsInf",tt="IsNan",et="Log",nt="Log1p",st="LogSoftmax",rt="Max",it="Maximum",at="MaxPool",ot="MaxPoolBackprop",lt="MaxPool3D",ut="Minimum",ct="Multiply",ht="Negate",dt="NonMaxSuppressionV3",pt="NonMaxSuppressionV4",ft="NonMaxSuppressionV5",gt="OnesLike",mt="OneHot",xt="PadV2",yt="Prelu",bt="Reciprocal",wt="Relu",vt="Reshape",Ct="ResizeNearestNeighbor",kt="ResizeBilinear",$t="Relu6",It="Reverse",Et="Round",Rt="Rsqrt",St="SelectV2",At="Selu",Nt="Slice",Tt="Sin",Dt="Sinh",Ft="Sign",_t="Sigmoid",Ot="Softplus",Lt="Sqrt",Bt="SpaceToBatchND",Mt="SplitV",zt="Softmax",Pt="SquaredDifference",Wt="Square",Ut="Sub",Vt="Tan",Gt="Tanh",Ht="Tile",jt="Transpose",Kt="Unique",qt="Unpack",Xt="UnsortedSegmentSum",Yt="ZerosLike",Jt="Step",Zt="RotateWithOffset",Qt="_FusedMatMul",te="FusedConv2D",ee=p("kernelRegistry",(()=>new Map)),ne=p("gradRegistry",(()=>new Map));function se(t){return ne.get(t)}function re(t){const e=ee.entries(),n=[];for(;;){const{done:s,value:r}=e.next();if(s)break;const[i,a]=r,[o]=i.split("_");o===t&&n.push(a)}return n}function ie(t){const{kernelName:e,backendName:n}=t,s=oe(e,n);ee.has(s)&&console.warn(`The kernel '${e}' for backend '${n}' is already registered`),ee.set(s,t)}function ae(t){const{kernelName:e}=t;ne.has(e)&&u().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${e}'`),ne.set(e,t)}function oe(t,e){return`${e}_${t}`}function le(t){let e=t.length,n=0,s=0;for(;e>0;)s=Math.random()*e|0,e--,n=t[e],t[e]=t[s],t[s]=n}function ue(t,e,n){return Math.max(t,Math.min(e,n))}function ce(t){return t%2==0?t:t+1}function he(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function de(t,e,n=""){he(me(t,e),(()=>n+` Shapes ${t} and ${e} must match`))}function pe(t){he(null!=t,(()=>"The input to the tensor constructor must be a non-null value."))}function fe(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||Re(t)&&!n)for(let s=0;s<t.length;++s)fe(t[s],e,n);else e.push(t);return e}function ge(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function me(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function xe(t){return t%1==0}function ye(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function be(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function we(t,e=(t=>0),n){return new Promise(((s,r)=>{let i=0;const a=()=>{if(t())return void s();i++;const o=e(i);null!=n&&i>=n?r():setTimeout(a,o)};a()}))}function ve(t,e){let n=1,s=-1;for(let e=0;e<t.length;++e)if(t[e]>=0)n*=t[e];else if(-1===t[e]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${e}`);s=e}else if(t[e]<0)throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);if(-1===s){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const r=t.slice();return r[s]=e/n,r}function Ce(t,e){const n=e.length;return he((t=null==t?e.map(((t,e)=>e)):[].concat(t)).every((t=>t>=-n&&t<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+t)),he(t.every((t=>xe(t))),(()=>"All values in axis param must be integers but got axis "+t)),t.map((t=>t<0?n+t:t))}function ke(t,e){const n=[],s=[],r=null!=e&&Array.isArray(e)&&0===e.length,i=null==e||r?null:Ce(e,t).sort();let a=0;for(let e=0;e<t.length;++e){if(null!=i){if(i[a]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==i[a]||i[a]>e)&&1===t[e]&&(n.push(t[e]),s.push(e)),i[a]<=e&&a++}1!==t[e]&&(n.push(t[e]),s.push(e))}return{newShape:n,keptDims:s}}function $e(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function Ie(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function Ee(t,e){return!("complex64"===e||"float32"===e&&"complex64"!==t||"int32"===e&&"float32"!==t&&"complex64"!==t||"bool"===e&&"bool"===t)}function Re(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function Se(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function Ae(t){return"string"==typeof t||t instanceof String}function Ne(t){return"number"==typeof t}function Te(t){return Array.isArray(t)?Te(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":Ne(t)?"float32":Ae(t)?"string":"boolean"==typeof t?"bool":"float32"}function De(t){return!!(t&&t.constructor&&t.call&&t.apply)}function Fe(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function _e(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let s=e-3;s>=0;--s)n[s]=n[s+1]*t[s+1];return n}function Oe(t,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=fe(t)),u().getBool("DEBUG")&&function(t,e){for(let n=0;n<t.length;n++){const s=t[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${e} being uploaded contains ${s}.`)}}(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error("Unknown data type "+e)}function Le(t,e,n){const s=new Array;if(1===e.length){const r=e[0];for(let e=0;e<r;e++)s[e]=n[t+e]}else{const r=e[0],i=e.slice(1),a=i.reduce(((t,e)=>t*e));for(let e=0;e<r;e++)s[e]=Le(t+e*a,i,n)}return s}function Be(t,e){if(0===t.length)return e[0];const n=t.reduce(((t,e)=>t*e));if(0===n)return[];if(n!==e.length)throw new Error(`[${t}] does not match the input size ${e.length}.`);return Le(0,t,e)}function Me(t,e){const n=ze(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function ze(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function Pe(){return u().platform.now()}function We(t){t.forEach((e=>{he(Number.isInteger(e)&&e>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`))}))}function Ue(t,e="utf-8"){return e=e||"utf-8",u().platform.decode(t,e)}function Ve(t,e,n){if(0===e)return 0;if(1===e)return t[0];let s=t[t.length-1];for(let e=0;e<t.length-1;++e)s+=n[e]*t[e];return s}function Ge(t,e,n){if(0===e)return[];if(1===e)return[t];const s=new Array(e);for(let e=0;e<s.length-1;++e)s[e]=Math.floor(t/n[e]),t-=s[e]*n[e];return s[s.length-1]=t,s}class He{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new Ke)}profileKernel(t,e,n){let s;const r=this.backendTimer.time((()=>{s=n()}));for(let e=0;e<s.length;e++){const n=s[e];n.data().then((e=>{je(e,n.dtype,t)}))}return{kernelName:t,outputs:s,inputs:e,timeMs:r.then((t=>t.kernelMs)),extraInfo:r.then((t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():""))}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:s,inputs:r,extraInfo:i}=t;n.forEach((t=>{Promise.all([t.data(),s,i]).then((n=>{this.logger.logKernelProfile(e,t,n[0],n[1],r,n[2])}))}))}}function je(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const s=t[e];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class Ke{logKernelProfile(t,e,n,s,r,i){const a="number"==typeof s?be(s+"ms",9):s.error,o=be(t,25),l=e.rank,u=e.size,c=be(e.shape.toString(),14);let h="";for(const t in r){const n=r[t];if(null!=n){const s=n.shape||e.shape,r=s.length;h+=`${t}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${a}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function qe(t,e,n,s){const r=_e(e),i=function(t,e,n,s){const r=ge(e),i=s[s.length-1],a=new Array(i).fill(0),o=e.length,l="complex64"===n?Ze(t):t;if(o>1)for(let t=0;t<r/i;t++){const e=t*i;for(let t=0;t<i;t++)a[t]=Math.max(a[t],Xe(l[e+t],0,n).length)}return a}(t,e,n,r),a=e.length,o=Je(t,e,n,r,i),l=["Tensor"];return s&&(l.push("  dtype: "+n),l.push("  rank: "+a),l.push(`  shape: [${e}]`),l.push("  values:")),l.push(o.map((t=>"    "+t)).join("\n")),l.join("\n")}function Xe(t,e,n){let s;return s=Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":Ae(t)?`'${t}'`:"bool"===n?Ye(t):parseFloat(t.toFixed(7)).toString(),be(s,e)}function Ye(t){return 0===t?"false":"true"}function Je(t,e,n,s,r,i=!0){const a="complex64"===n?2:1,o=e[0],l=e.length;if(0===l)return"complex64"===n?[Xe(Ze(t)[0],0,n)]:"bool"===n?[Ye(t[0])]:[t[0].toString()];if(1===l){if(o>20){const e=3*a;let s=Array.from(t.slice(0,e)),i=Array.from(t.slice((o-3)*a,o*a));return"complex64"===n&&(s=Ze(s),i=Ze(i)),["["+s.map(((t,e)=>Xe(t,r[e],n))).join(", ")+", ..., "+i.map(((t,e)=>Xe(t,r[o-3+e],n))).join(", ")+"]"]}return["["+("complex64"===n?Ze(t):Array.from(t)).map(((t,e)=>Xe(t,r[e],n))).join(", ")+"]"]}const u=e.slice(1),c=s.slice(1),h=s[0]*a,d=[];if(o>20){for(let e=0;e<3;e++){const s=e*h,i=s+h;d.push(...Je(t.slice(s,i),u,n,c,r,!1))}d.push("...");for(let e=o-3;e<o;e++){const s=e*h,i=s+h;d.push(...Je(t.slice(s,i),u,n,c,r,e===o-1))}}else for(let e=0;e<o;e++){const s=e*h,i=s+h;d.push(...Je(t.slice(s,i),u,n,c,r,e===o-1))}const p=2===l?",":"";d[0]="["+d[0]+p;for(let t=1;t<d.length-1;t++)d[t]=" "+d[t]+p;let f=",\n";for(let t=2;t<l;t++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(i?"":f),d}function Ze(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}class Qe{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=ge(t),null!=n){const t=n.length;he(t===this.size,(()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||Ie(e,this.size),this.strides=_e(t)}set(t,...e){0===e.length&&(e=[0]),he(e.length===this.rank,(()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`));const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=`+this.shape;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return tn().makeTensor(this.values,this.shape,this.dtype)}}let tn=null,en=null,nn=null;class sn{constructor(t,e,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=ge(t),this.strides=_e(t),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return en.buffer(this.shape,this.dtype,t)}bufferSync(){return en.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return Be(this.shape,t)}arraySync(){return Be(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const t=tn().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map((t=>Ue(t)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataSync(){this.throwIfDisposed();const t=tn().readSync(this.dataId);if("string"===this.dtype)try{return t.map((t=>Ue(t)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await tn().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(tn().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return en.print(this,t)}clone(){return this.throwIfDisposed(),en.clone(this)}toString(t=!1){return qe(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),en.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),tn().makeVariable(this,t,e,n)}}Object.defineProperty(sn,Symbol.hasInstance,{value:t=>!!t&&null!=t.data&&null!=t.dataSync&&null!=t.throwIfDisposed});class rn extends sn{constructor(t,e,n,s){super(t.shape,t.dtype,t.dataId,s),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!me(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);tn().disposeTensor(this),this.dataId=t.dataId,tn().incRef(this,null)}dispose(){tn().disposeVariable(this),this.isDisposedInternal=!0}}var an,on,ln,un,cn;Object.defineProperty(rn,Symbol.hasInstance,{value:t=>t instanceof sn&&null!=t.assign&&t.assign instanceof Function}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(an||(an={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(on||(on={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(ln||(ln={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(un||(un={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(cn||(cn={}));const hn={float32:un,int32:on,bool:ln,complex64:cn};function dn(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return hn[t][e]}function pn(t){return dn(t,"int32")}function fn(t,e){if(t.dtype===e.dtype)return[t,e];const n=dn(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function gn(t){const e=[];return mn(t,e,new Set),e}function mn(t,e,n){if(null==t)return;if(t instanceof sn)return void e.push(t);if(s=t,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=t;for(const t in r){const s=r[t];n.has(s)||(n.add(s),mn(s,e,n))}}class xn{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class yn{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new xn}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new He(this.backendInstance),!0}setupRegisteredKernels(){re(this.backendName).forEach((t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(t){re(t).forEach((e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])}))}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(!n||n instanceof a||"function"!=typeof n.then)return this.registry[t]=n,{success:!0,asyncInit:!1};{const e=++this.pendingBackendInitId,s=n.then((n=>!(e<this.pendingBackendInitId||(this.registry[t]=n,this.pendingBackendInit=null,0)))).catch((n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(e){return console.warn(`Initialization of backend ${t} failed`),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority))}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),s=n.backend,r=this.readSync(e);s.disposeData(e),n.backend=t,t.move(e,r,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,s=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=t}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return yn.nextTensorId++}nextVariableId(){return yn.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(t=>({x:()=>{const e="float32",n={x:t},s={dtype:e};return wn.runKernelFunc((n=>n.cast(t,e)),n,null,N,s)}})),[],{}),e}runKernel(t,e,n,s,r){return this.runKernelFunc(null,e,null,t,n,s,r)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const s=this.backend.numDataIds();let r=0;n.forEach((t=>{r+="complex64"===t.dtype?3:1}));const i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],a=s-e-r-i;if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${t}'`)}runKernelFunc(t,e,n,s,r,i,a){let o,l=[];const u=this.isTapeOn();null==s&&(s=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,h=this.state.numTensors;let d;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const p=function(t,e){const n=oe(t,e);return ee.get(n)}(s,this.backendName);let f,g;if(null!=p)d=()=>{const t=this.backend.numDataIds();f=p.kernelFunc({inputs:e,attrs:r,backend:this.backend});const n=Array.isArray(f)?f:[f];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(s,t,n);const o=n.map((({dataId:t,shape:e,dtype:n})=>this.makeTensorFromDataId(t,e,n)));if(u){let t=this.getTensorsForGradient(s,e,o);if(null==t){null==a&&(a=[]);const e=o.filter(((t,e)=>a[e]));t=(i||[]).slice().concat(e)}l=this.saveTensorsForBackwardMode(t)}return o};else{const e=t=>{u&&(l=t.map((t=>this.keep(this.clone(t)))))};d=()=>{const n=this.backend.numDataIds();f=this.tidy((()=>t(this.backend,e)));const r=Array.isArray(f)?f:[f];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(s,n,r),r}}return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(g=this.profiler.profileKernel(s,e,(()=>d())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(g),o=g.outputs):o=d()})),u&&this.addTapeNode(s,e,o,n,l,r),this.state.profiling&&this.state.activeProfile.kernels.push({name:s,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map((t=>null!=e[t]?e[t].shape:null)),outputShapes:o.map((t=>t.shape)),kernelTimeMs:g.timeMs,extraInfo:g.extraInfo}),Array.isArray(f)?o:o[0]}saveTensorsForBackwardMode(t){return t.map((t=>this.keep(this.clone(t))))}getTensorsForGradient(t,e,n){const s=se(t);if(null!=s){const t=s.inputsToSave||[],r=s.outputsToSave||[];let i;s.saveAllInputs?(he(Array.isArray(e),(()=>"saveAllInputs is true, expected inputs to be an array.")),i=Object.keys(e).map((t=>e[t]))):i=t.map((t=>e[t]));const a=n.filter(((t,e)=>r[e]));return i.concat(a)}return null}makeTensor(t,e,n,s){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=t;"string"===n&&Ae(t[0])&&(r=t.map((t=>function(t,e="utf-8"){return e=e||"utf-8",u().platform.encode(t,e)}(t))));const i=s.write(r,e,n),a=new sn(e,n,i,this.nextTensorId());if(this.incRef(a,s),"string"===n){const t=this.state.tensorInfo.get(i),e=function(t){if(null==t)return 0;let e=0;return t.forEach((t=>e+=t.length)),e}(r);this.state.numBytes+=e-t.bytes,t.bytes=e}return a}makeTensorFromDataId(t,e,n,s){const r=new sn(e,n=n||"float32",t,this.nextTensorId());return this.incRef(r,s),r}makeVariable(t,e=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==t.dtype&&(t=t.cast(s));const r=new rn(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}incRef(t,e){const n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*Se(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof rn||this.track(t)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;const e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((t=>t.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const t of this.state.activeProfile.kernels)t.kernelTimeMs=await t.kernelTimeMs,t.extraInfo=await t.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,s,r,i){const a={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:r},o=se(t);null!=o&&(s=o.gradFunc),null!=s&&(a.gradient=t=>(t=t.map(((t,e)=>{if(null==t){const t=n[e],s=ze(t.size,t.dtype);return this.makeTensor(s,t.shape,t.dtype)}return t})),s(t.length>1?t:t[0],r,i))),this.state.activeTape.push(a)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=gn(t),n=new Set(e.map((t=>t.id)));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach((t=>{t.kept||t.scopeId!==s.id||this.track(t)}))}gradients(t,e,n,s=!1){if(he(e.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",t)));he(r instanceof sn,(()=>"The result y returned by f() must be a tensor."));const i=function(t,e,n){const s={},r={};for(let t=0;t<e.length;t++)s[e[t].id]=!0;for(let n=0;n<t.length;n++){const i=t[n],a=i.inputs;for(const t in a){const n=a[t];let o=!1;for(let t=0;t<e.length;t++)if(s[n.id]){i.outputs.forEach((t=>s[t.id]=!0)),o=!0,r[i.id]=!0;break}if(o)break}}const i={};i[n.id]=!0;const a={};for(let e=t.length-1;e>=0;e--){const n=t[e],s=n.inputs;for(let t=0;t<n.outputs.length;t++)if(i[n.outputs[t].id]){for(const t in s)i[s[t].id]=!0,a[n.id]=!0;break}}const o=[];for(let e=0;e<t.length;e++){const n=t[e];if(r[n.id]&&a[n.id]){const t={};for(const e in n.inputs){const r=n.inputs[e];s[r.id]&&(t[e]=r)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,o.push(e)}}return o}(this.state.activeTape,e,r);if(!s&&0===i.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const t={};t[r.id]=null==n?function(t){const e=Me(ge(t),"float32");return wn.makeTensor(e,t,"float32")}(r.shape):n,function(t,e,n,s){for(let r=e.length-1;r>=0;r--){const i=e[r],a=[];if(i.outputs.forEach((e=>{const n=t[e.id];null!=n?a.push(n):a.push(null)})),null==i.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${i.kernelName}.`);const o=i.gradient(a);for(const e in i.inputs){if(!(e in o))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(o)}.`);const r=n((()=>o[e]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${i.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${r.dtype}'`);const a=i.inputs[e];if(!me(r.shape,a.shape))throw new Error(`Error in gradient for op ${i.kernelName}. The gradient of input '${e}' has shape '${r.shape}', which does not match the shape of the input '${a.shape}'`);if(null==t[a.id])t[a.id]=r;else{const e=t[a.id];t[a.id]=s(e,r),e.dispose()}}}}(t,i,(t=>this.tidy(t)),vn);const s=e.map((e=>t[e.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((t=>{for(const e of t.saved)e.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(t){return he(De(t),(()=>"The f passed in customGrad(f) must be a function.")),(...e)=>{let n;he(e.every((t=>t instanceof sn)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};return e.forEach(((t,e)=>{s[e]=t})),this.runKernelFunc(((s,r)=>(n=t(...e,r),he(n.value instanceof sn,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),he(De(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value)),s,((t,s)=>{const r=n.gradFunc(t,s),i=Array.isArray(r)?r:[r];he(i.length===e.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),he(i.every((t=>t instanceof sn)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const a={};return i.forEach(((t,e)=>{a[e]=()=>t})),a}))}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=Pe(),n=await this.backend.time(t);return n.wallMs=Pe()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new xn;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function bn(){const t=d();if(null==t._tfengine){const e=new l(t);t._tfengine=new yn(e)}var e;return e=t._tfengine.ENV,h=e,tn=()=>t._tfengine,t._tfengine}yn.nextTensorId=0,yn.nextVariableId=0;const wn=bn();function vn(t,e){const n={a:t,b:e};return wn.runKernelFunc(((n,s)=>{const r=n.add(t,e);return s([t,e]),r}),n,null,m)}function Cn(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const kn=u();function $n(t,e){let n=t;if(Re(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const s=[];for(;Array.isArray(n)||Re(n)&&"string"!==e;)s.push(n.length),n=n[0];return Array.isArray(t)&&u().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&In(t,s,[]),s}function In(t,e,n){if(n=n||[],!Array.isArray(t)&&!Re(t))return void he(0===e.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`));he(e.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${t.length} elements`)),he(t.length===e[0],(()=>`Element arr[${n.join("][")}] should have ${e[0]} elements, but has ${t.length} elements`));const s=e.slice(1);for(let e=0;e<t.length;++e)In(t[e],s,n.concat(e))}function En(t,e,n,s){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error(`Argument '${n}' passed to '${s}' must be ${t} tensor, but got ${e} tensor`)}function Rn(t,e,n,s="numeric"){if(t instanceof sn)return En(s,t.dtype,e,n),t;let r=Te(t);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),En(s,r,e,n),null==t||!Re(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const s=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const i=$n(t,r);Re(t)||Array.isArray(t)||(t=[t]);const a="string"!==r?Oe(t,r):fe(t,[],!0);return wn.makeTensor(a,i,r)}function Sn(t,e,n,s="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map(((t,s)=>Rn(t,`${e}[${s}]`,n)),s)}function An(t){const e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");let n=e[0];const s=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const r=(...t)=>{wn.startScope(n);try{const e=s(...t);return e instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),wn.endScope(e),e}catch(t){throw wn.endScope(null),t}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}kn.registerFlag("DEBUG",(()=>!1),(t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),kn.registerFlag("IS_BROWSER",(()=>Cn())),kn.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),kn.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),kn.registerFlag("PROD",(()=>!1)),kn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>kn.getBool("DEBUG"))),kn.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),kn.registerFlag("IS_TEST",(()=>!1));const Nn=An({complex_:function(t,e){const n=Rn(t,"real","complex"),s=Rn(e,"imag","complex");de(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return wn.runKernelFunc((t=>t.complex(n,s)),r,null,"Complex")}});function Tn(t,e,n,s){if(null==s&&(s=Te(t)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Re(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){We(e);const t=ge(e),s=ge(n);he(t===s,(()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${s}`));for(let t=0;t<n.length;++t){const s=n[t],r=t!==n.length-1||s!==ge(e.slice(t));he(n[t]===e[t]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `))}}return Re(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==s?Oe(t,s):fe(t,[],!0),wn.makeTensor(t,e,s)}function Dn(t,e,n){return Tn(t,e,$n(t,n),n)}const Fn={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function _n(t,e){const n=[],s=[],r=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);for(let i=0;i<r.length;++i){const a=r[i],o=Array.isArray(t)?t[i].tensor:t[a];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${a}': ${o.dtype}`);const l={name:a,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const t=new Promise((async t=>{const e=await o.bytes(),n=e.reduce(((t,e)=>t+e.length),0)+4*e.length,s=new Uint8Array(n);let r=0;for(let t=0;t<e.length;t++){const n=e[t],i=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(i,r),r+=4,s.set(n,r),r+=n.length}t(s)}));s.push(t)}else s.push(o.data());null!=e&&(l.group=e),n.push(l)}return{data:On(await Promise.all(s)),specs:n}}function On(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));let e=0;const n=[];t.forEach((t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)}));const s=new Uint8Array(e);let r=0;return n.forEach((t=>{s.set(new Uint8Array(t.buffer),r),r+=t.byteLength})),s.buffer}const Ln="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Bn(t){return Ln?Buffer.byteLength(t):new Blob([t]).size}function Mn(t){if(1===t.length)return t[0];let e=0;t.forEach((t=>{e+=t.byteLength}));const n=new Uint8Array(e);let s=0;return t.forEach((t=>{n.set(new Uint8Array(t),s),s+=t.byteLength})),n.buffer}function zn(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:Bn(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:Bn(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}function Pn(){const t=function(){const t=t=>{let e=t<<13,n=0;for(;0==(8388608&e);)n-=8388608,e<<=1;return e&=-8388609,n+=947912704,e|n},e=new Uint32Array(2048);e[0]=0;for(let n=1;n<1024;n++)e[n]=t(n);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let e=1;e<31;e++)t[e]=e<<23;for(let e=33;e<63;e++)t[e]=2147483648+(e-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let e=0;e<64;e++)t[e]=1024;return t[0]=t[32]=0,t}();return s=>{const r=new ArrayBuffer(4*s.length),i=new Uint32Array(r);for(let r=0;r<s.length;r++){const a=s[r],o=t[n[a>>10]+(1023&a)]+e[a>>10];i[r]=o}return new Float32Array(r)}}class Wn{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Wn.instance&&(Wn.instance=new Wn),Wn.instance}static registerSaveRouter(t){Wn.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Wn.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Wn.getHandlers(t,"save")}static getLoadHandlers(t,e){return Wn.getHandlers(t,"load",e)}static getHandlers(t,e,n){const s=[];return("load"===e?Wn.getInstance().loadRouters:Wn.getInstance().saveRouters).forEach((e=>{const r=e(t,n);null!==r&&s.push(r)})),s}}const Un="tensorflowjs",Vn="models_store",Gn="model_info_store";function Hn(){if(!u().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function jn(t){const e=t.result;e.createObjectStore(Vn,{keyPath:"modelPath"}),e.createObjectStore(Gn,{keyPath:"modelPath"})}class Kn{constructor(t){if(this.indexedDB=Hn(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise(((t,n)=>{const s=this.indexedDB.open(Un,1);s.onupgradeneeded=()=>jn(s),s.onsuccess=()=>{const r=s.result;if(null==e){const e=r.transaction(Vn,"readonly"),s=e.objectStore(Vn).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(s.result.modelArtifacts)},s.onerror=t=>(r.close(),n(s.error)),e.oncomplete=()=>r.close()}else{const s=zn(e),i=r.transaction(Gn,"readwrite");let a=i.objectStore(Gn);const o=a.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=r.transaction(Vn,"readwrite");const o=l.objectStore(Vn).put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:s});o.onsuccess=()=>t({modelArtifactsInfo:s}),o.onerror=t=>{a=i.objectStore(Gn);const e=a.delete(this.modelPath);e.onsuccess=()=>(r.close(),n(o.error)),e.onerror=t=>(r.close(),n(o.error))}},o.onerror=t=>(r.close(),n(o.error)),i.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=t=>n(s.error)}))}}Kn.URL_SCHEME="indexeddb://";const qn=t=>{return u().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Kn.URL_SCHEME)?(e=t.slice(Kn.URL_SCHEME.length),new Kn(e)):null;var e};Wn.registerSaveRouter(qn),Wn.registerLoadRouter(qn);class Xn{constructor(){this.indexedDB=Hn()}async listModels(){return new Promise(((t,e)=>{const n=this.indexedDB.open(Un,1);n.onupgradeneeded=()=>jn(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(Gn,"readonly"),i=r.objectStore(Gn).getAll();i.onsuccess=()=>{const e={};for(const t of i.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},i.onerror=t=>(s.close(),e(i.error)),r.oncomplete=()=>s.close()},n.onerror=t=>e(n.error)}))}async removeModel(t){var e;return t=(e=t).startsWith(Kn.URL_SCHEME)?e.slice(Kn.URL_SCHEME.length):e,new Promise(((e,n)=>{const s=this.indexedDB.open(Un,1);s.onupgradeneeded=()=>jn(s),s.onsuccess=()=>{const r=s.result,i=r.transaction(Gn,"readwrite"),a=i.objectStore(Gn),o=a.get(t);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const s=a.delete(t),i=()=>{l=r.transaction(Vn,"readwrite");const s=l.objectStore(Vn).delete(t);s.onsuccess=()=>e(o.result.modelArtifactsInfo),s.onerror=t=>n(o.error)};s.onsuccess=i,s.onerror=t=>(i(),r.close(),n(o.error))}},o.onerror=t=>(r.close(),n(o.error)),i.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=t=>n(s.error)}))}}const Yn="/",Jn="tensorflowjs_models",Zn="info",Qn="model_topology",ts="weight_specs",es="weight_data",ns="model_metadata";function ss(t){return{info:[Jn,t,Zn].join(Yn),topology:[Jn,t,Qn].join(Yn),weightSpecs:[Jn,t,ts].join(Yn),weightData:[Jn,t,es].join(Yn),modelMetadata:[Jn,t,ns].join(Yn)}}function rs(t){const e=t.split(Yn);if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join(Yn)}class is{constructor(t){if(!u().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=ss(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),s=zn(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(Ln)return Buffer.from(t).toString("base64");const e=new Uint8Array(t);let n="";for(let t=0,s=e.length;t<s;t++)n+=String.fromCharCode(e[t]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),{modelArtifactsInfo:s}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const t=JSON.parse(r);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,e.userDefinedMetadata=t.userDefinedMetadata}const i=this.LS.getItem(this.keys.weightData);if(null==i)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=function(t){if(Ln){const e=Buffer.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}const e=atob(t),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n.set([e.charCodeAt(t)],t);return n.buffer}(i),e}}is.URL_SCHEME="localstorage://";const as=t=>{return u().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(is.URL_SCHEME)?(e=t.slice(is.URL_SCHEME.length),new is(e)):null;var e};Wn.registerSaveRouter(as),Wn.registerLoadRouter(as);class os{constructor(){he(u().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),he("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const t={},e=Jn+Yn,n=Yn+Zn;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);r.startsWith(e)&&r.endsWith(n)&&(t[rs(r)]=JSON.parse(this.LS.getItem(r)))}return t}async removeModel(t){var e;const n=ss(t=(e=t).startsWith(is.URL_SCHEME)?e.slice(is.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${t}'`);const s=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),s}}class ls{constructor(){this.managers={}}static getInstance(){return null==ls.instance&&(ls.instance=new ls),ls.instance}static registerManager(t,e){he(null!=t,(()=>"scheme must not be undefined or null.")),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),he(t.length>0,(()=>"scheme must not be an empty string."));const n=ls.getInstance();he(null==n.managers[t],(()=>`A model store manager is already registered for scheme '${t}'.`)),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}class us{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}if(u().get("IS_BROWSER")){u().setPlatform("browser",new us);try{ls.registerManager(is.URL_SCHEME,new os)}catch(t){}try{ls.registerManager(Kn.URL_SCHEME,new Xn)}catch(t){}}let cs;function hs(t,e="float32",n){return e=e||"float32",We(t),new Qe(t,e,n)}u().get("IS_NODE")&&u().setPlatform("node",new class{constructor(){this.util=n(758),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=u().global.fetch?u().global.fetch(t,e):(null==cs&&(cs=n(352)),cs(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}});const ds=An({cast_:function(t,e){const n=Rn(t,"x","cast");if(!function(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:e};return wn.runKernelFunc((t=>t.cast(n,e)),s,null,N,r)}}),ps=An({clone_:function(t){const e=Rn(t,"x","clone",null),n={x:e};return wn.runKernelFunc((()=>wn.makeTensorFromDataId(e.dataId,e.shape,e.dtype)),n,null,J)}});function fs(t){return new Promise((t=>setTimeout(t))).then(t)}bn(),en={buffer:hs,cast:ds,clone:ps,print:function(t,e=!1){console.log(t.toString(e))}};class gs{constructor(t){if(!u().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(gs.URL_SCHEME)&&(t=t.slice(gs.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],s={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},r=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),i=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(i.download=this.modelTopologyFileName,i.href=r,await fs((()=>i.dispatchEvent(new MouseEvent("click")))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await fs((()=>t.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:zn(t)}}}}function ms(t,e,n,s){!function(t){he(null!=t&&Array.isArray(t)&&t.length>0,(()=>"promises must be a none empty array"))}(t),function(t,e){he(t>=0&&t<=1,(()=>"Progress fraction must be in range [0, 1], but got startFraction "+t)),he(e>=0&&e<=1,(()=>"Progress fraction must be in range [0, 1], but got endFraction "+e)),he(e>=t,(()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction `+e))}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(t.map((i=>(i.then((i=>{const a=n+ ++r/t.length*(s-n);return e(a),i})),i))))}async function xs(t,e){null==e&&(e={});const n=null==e.fetchFunc?u().platform.fetch:e.fetchFunc,s=t.map((t=>n(t,e.requestInit,{isBinary:!0}))),r=(null==e.onProgress?await Promise.all(s):await ms(s,e.onProgress,0,.5)).map((t=>t.arrayBuffer()));return null==e.onProgress?await Promise.all(r):await ms(r,e.onProgress,.5,1)}gs.URL_SCHEME="downloads://",Wn.registerSaveRouter((t=>u().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(gs.URL_SCHEME)?function(t="model"){return new gs(t)}(t.slice(gs.URL_SCHEME.length)):null));class ys{constructor(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,null!=e.fetchFunc?(he("function"==typeof e.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=e.fetchFunc):this.fetch=u().platform.fetch,he(null!=t&&t.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(t)&&he(2===t.length,(()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`)),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],s={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n};e.body.append("model.json",new Blob([JSON.stringify(s)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,e);if(r.ok)return{modelArtifactsInfo:zn(t),responses:[r]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+r.status+".")}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code `+t.status+". Please verify this URL points to the model JSON of the model to load.");let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=e.modelTopology,s=e.weightsManifest,r=e.generatedBy,i=e.convertedBy,a=e.format,o=e.userDefinedMetadata;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let l,u;if(null!=s){const t=await this.loadWeights(s);[l,u]=t}const c={modelTopology:n,weightSpecs:l,weightData:u,userDefinedMetadata:o,generatedBy:r,convertedBy:i,format:a},h=e.modelInitializer;return h&&(c.modelInitializer=h),c}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?");return[t.substring(0,e)+"/",n>e?t.substring(n):""]}(e),r=this.weightPathPrefix||n,i=[];for(const e of t)i.push(...e.weights);const a=[],o=[];for(const e of t)for(const t of e.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(t)):a.push(r+t+s);return this.weightUrlConverter&&a.push(...await Promise.all(o)),[i,Mn(await xs(a,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function bs(t){return null!=t.match(ys.URL_SCHEME_REGEX)}ys.URL_SCHEME_REGEX=/^https?:\/\//;const ws=(t,e)=>{if("undefined"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every((t=>bs(t))):bs(t),n)return vs(t,e)}return null};function vs(t,e){return new ys(t,e)}function Cs(t,e,n){const s=t.shape.length;he(s===e.length,(()=>`Error in slice${s}D: Length of begin ${e} must match the rank of the array (${s}).`)),he(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let r=0;r<s;++r)he(e[r]+n[r]<=t.shape[r],(()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${e[r]+n[r]}) would overflow input.shape[${r}] (${t.shape[r]})`))}function ks(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function $s(t,e,n){const s=[];for(let r=0;r<t.length;r++)s[r]=Math.ceil((e[r]-t[r])/n[r]);return s}function Is(t,e,n,s){const r=[...t];for(let t=r.length;t<s.length;t++)r.push(1);for(let t=0;t<n;t++)0===t?r[e]=1:(r.splice(e,0,1),r.pop());return r}function Es(t,e,n){return n<=t?n:n-(e-1)}function Rs(t,e){const n=[];for(let s=0;s<t;s++)n.push(e+s);return n}function Ss(t,e,n,s,r,i,a,o,l){const u=t.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(e.length&&n>0){const l=e[0],u=n+1;c=As(a,l,u,s,t),h=Ns(o,l,u,r,t),d=Is(i,l,u,t)}else for(let e=0;e<u;e++)c[e]=Ds(a,s,i,t,e,l),h[e]=Fs(o,r,i,t,e,l),d[e]=Ts(i,e,l);return{begin:c,end:h,strides:d}}function As(t,e,n,s,r){const i=[...r],a=Rs(n,e);for(let r=0;r<i.length;r++)if(a.indexOf(r)>-1)i[r]=0;else{const a=Es(e,n,r);let o=s[a];t&1<<a&&(o=0),i[r]=o}return i}function Ns(t,e,n,s,r){const i=[...r],a=Rs(n,e);for(let r=0;r<i.length;r++)if(a.indexOf(r)>-1)i[r]=Number.MAX_SAFE_INTEGER;else{const a=Es(e,n,r);let o=s[a];t&1<<a&&(o=Number.MAX_SAFE_INTEGER),i[r]=o}for(let t=0;t<i.length;t++){const e=r[t];i[t]<0&&(i[t]+=e),i[t]=ue(0,i[t],r[t])}return i}function Ts(t,e,n){let s=t[e];return(n&1<<e||null==s)&&(s=1),s}function Ds(t,e,n,s,r,i){let a=e[r];const o=n[r]||1;(t&1<<r||i&1<<r||null==a)&&(a=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return a<0&&(a+=l),a=ue(0,a,l-1),a}function Fs(t,e,n,s,r,i){let a=e[r];const o=n[r]||1;(t&1<<r||i&1<<r||null==a)&&(a=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return a<0&&(a+=l),a=o>0?ue(0,a,l):ue(-1,a,l-1),a}function _s(t,e,n){let s=n.length;for(let t=0;t<n.length;t++)if(n[t]>1){s=t;break}for(let r=s+1;r<n.length;r++)if(e[r]>0||n[r]!==t[r])return!1;return!0}function Os(t,e){let n=t.length>0?t[t.length-1]:1;for(let s=0;s<t.length-1;s++)n+=t[s]*e[s];return n}function Ls(t,e,n){let s;const r=t.shape.length;let i;return s="number"==typeof e?[e,...new Array(r-1).fill(0)]:e.length<r?e.concat(new Array(r-e.length).fill(0)):e.slice(),s.forEach((t=>{he(-1!==t,(()=>"slice() does not support negative begin indexing."))})),i=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,i=i.map(((e,n)=>e>=0?e:(he(-1===e,(()=>`Negative size values should be exactly -1 but got ${e} for the slice() size at index ${n}.`)),t.shape[n]-s[n]))),[s,i]}Wn.registerSaveRouter(ws),Wn.registerLoadRouter(ws);class Bs{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class Ms{constructor(){this.classNameMap={}}static getMap(){return null==Ms.instance&&(Ms.instance=new Ms),Ms.instance}static register(t){Ms.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function zs(t){he(null!=t.className,(()=>"Class being registered does not have the static className property defined.")),he("string"==typeof t.className,(()=>"className is required to be a string, but got type "+typeof t.className)),he(t.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Ms.register(t)}function Ps(t){u().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Ws(){return wn}function Us(){return wn.memory()}function Vs(t,e){return wn.tidy(t,e)}function Gs(t){gn(t).forEach((t=>t.dispose()))}function Hs(t){return wn.keep(t)}function js(t){return wn.customGrad(t)}function Ks(t,e){if((Re(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&Re(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Tn(t,[],[],e)}nn=Ps;class qs extends Bs{minimize(t,e=!1,n){const{value:s,grads:r}=this.computeGradients(t,n);if(null!=n){const t=n.map((t=>({name:t.name,tensor:r[t.name]})));this.applyGradients(t)}else this.applyGradients(r);return Gs(r),e?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return function(t,e){he(De(t),(()=>"The f passed in variableGrads(f) must be a function")),he(null==e||Array.isArray(e)&&e.every((t=>t instanceof rn)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=e;if(!n){e=[];for(const t in wn.registeredVariables)e.push(wn.registeredVariables[t])}const s=n?e.filter((t=>!t.trainable)):null,r=e.length;he((e=e.filter((t=>t.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:i,grads:a}=wn.gradients(t,e,null,!0);he(a.some((t=>null!=t)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),he(0===i.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`));const o={};return e.forEach(((t,e)=>{null!=a[e]&&(o[t.name]=a[e])})),null!=s&&s.forEach((t=>o[t.name]=null)),{value:i,grads:o}}(t,e)}dispose(){null!=this.iterations_&&Gs(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Ks(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(qs,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});const Xs=An({abs_:function(t){const e=Rn(t,"x","abs"),n={x:e};return wn.runKernelFunc(((t,n)=>(n([e]),"complex64"===e.dtype?t.complexAbs(e):t.abs(e))),n,null,"Abs")}}),Ys=An({add_:function(t,e){let n=Rn(t,"a","add"),s=Rn(e,"b","add");[n,s]=fn(n,s);const r={a:n,b:s};return wn.runKernelFunc(((t,e)=>{const r=t.add(n,s);return e([n,s]),r}),r,null,m)}});function Js(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function Zs(t,e,n){const s=t.length+e.length,r=[];let i=0,a=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(t[i++]):r.push(e[a++]);return r}function Qs(t,e){const n=[],s=t.length;for(let r=0;r<s;r++)-1===e.indexOf(r)&&n.push(t[r]);return[n,e.map((e=>t[e]))]}function tr(t,e){return Zs(t,e.map((t=>1)),e)}function er(t,e,n){he(Js(e,n),(()=>t+" supports only inner-most axes for now. "+`Got axes ${e} and rank-${n} input.`))}function nr(t,e){if(Js(t,e))return null;const n=[];for(let s=0;s<e;++s)-1===t.indexOf(s)&&n.push(s);return t.forEach((t=>n.push(t))),n}function sr(t){return t.map(((t,e)=>[e,t])).sort(((t,e)=>t[1]-e[1])).map((t=>t[0]))}function rr(t,e){const n=[];for(let s=e-t;s<e;++s)n.push(s);return n}const ir=An({reshape_:function(t,e){const n=Rn(t,"x","reshape",null),s={x:n},r={shape:e};return wn.runKernelFunc(((t,s)=>(e=ve(e,n.size),he(n.size===ge(e),(()=>"new shape and old shape must have the same number of elements.")),s([n]),t.reshape(n,e))),s,null,vt,r)}}),ar=An({transpose_:function(t,e){const n=Rn(t,"x","transpose");if(null==e&&(e=n.shape.map(((t,e)=>e)).reverse()),he(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`)),e.forEach((t=>{he(t>=0&&t<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e))})),n.rank<=1)return n.clone();const s={x:n},r={perm:e};return wn.runKernelFunc((t=>t.transpose(n,e)),s,null,jt,r)}}),or=An({all_:function(t,e=null,n=!1){let s=Rn(t,"x","all","bool");const r={x:s},i={axis:e,keepDims:n};return wn.runKernelFunc((t=>{const r=Ce(e,s.shape);let i=r;const a=nr(i,s.rank);null!=a&&(s=ar(s,a),i=rr(i.length,s.rank));const o=t.all(s,i);if(n){const t=tr(o.shape,r);return ir(o,t)}return o}),r,null,"All",i)}}),lr=An({any_:function(t,e=null,n=!1){let s=Rn(t,"x","any","bool");const r={x:s},i={axis:e,keepDims:n};return wn.runKernelFunc((t=>{const r=Ce(e,s.shape);let i=r;const a=nr(i,s.rank);null!=a&&(s=ar(s,a),i=rr(i.length,s.rank));const o=t.any(s,i);if(n){const t=tr(o.shape,r);return ir(o,t)}return o}),r,null,"Any",i)}}),ur=An({argMax_:function(t,e=0){let n=Rn(t,"x","argMax");const s={x:n},r={axis:e};return wn.runKernelFunc(((t,s)=>{s([n]);let r=Ce(e,n.shape);const i=nr(r,n.rank);return null!=i&&(n=ar(n,i),r=rr(r.length,n.rank)),t.argMax(n,r[0])}),s,null,x,r)}});function cr(t,e,n,s,r="NHWC",i){return pr(t,[...e,t[3]],n,i,s,null,null,Cr(r))}function hr(t,e,n,s,r,i,a="channelsLast"){const[o,l]=mr(e);let u;if("channelsLast"===a)u=[o,l,t[3],t[3]];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);u=[o,l,t[1],t[1]]}return pr(t,u,n,s,r,i,!1,a)}function dr(t,e,n,s,r,i,a="NDHWC"){const[o,l,u]=xr(e);let c,h;if("NDHWC"===a)h="channelsLast",c=[o,l,u,t[4],t[4]];else{if("NCDHW"!==a)throw new Error("Unknown dataFormat "+a);h="channelsFirst",c=[o,l,u,t[1],t[1]]}return fr(t,c,n,s,r,!1,h,i)}function pr(t,e,n,s,r,i,a=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=t;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[l,h,u,c]=t}const[d,p,,f]=e,[g,m]=mr(n),[x,y]=mr(s),b=yr(d,x),w=yr(p,y),{padInfo:v,outHeight:C,outWidth:k}=function(t,e,n,s,r,i,a,o,l){let u,c,h;if("number"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const r=function(t,e,n,s,r){null==s&&(s=gr(t,e,n));const i=t[1],a=br((t[0]-e+2*s)/n+1,r);he(xe(a),(()=>`The output # of rows (${a}) must be an integer. Change the stride and/or zero pad parameters`));const o=br((i-e+2*s)/n+1,r);return he(xe(o),(()=>`The output # of columns (${o}) must be an integer. Change the stride and/or zero pad parameters`)),[a,o]}([e,n],i,s,t,o);c=r[0],h=r[1]}else if("same"===t){c=Math.ceil(e/s),h=Math.ceil(n/r);const t=Math.max(0,(c-1)*s+i-e),o=Math.max(0,(h-1)*r+a-n),l=Math.floor(t/2),d=t-l,p=Math.floor(o/2);u={top:l,bottom:d,left:p,right:o-p,type:"SAME"}}else if("valid"===t)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-i+1)/s),h=Math.ceil((n-a+1)/r);else{if("object"!=typeof t)throw Error("Unknown padding parameter: "+t);{const d="channelsLast"===l?t[1][0]:t[2][0],p="channelsLast"===l?t[1][1]:t[2][1],f="channelsLast"===l?t[2][0]:t[3][0],g="channelsLast"===l?t[2][1]:t[3][1];u={top:d,bottom:p,left:f,right:g,type:0===d&&0===p&&0===f&&0===g?"VALID":"EXPLICIT"},c=br((e-i+d+p)/s+1,o),h=br((n-a+f+g)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,g,m,b,w,i,o),$=a?f*h:f;let I;return"channelsFirst"===o?I=[l,$,C,k]:"channelsLast"===o&&(I=[l,C,k,$]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:C,outWidth:k,outChannels:$,padInfo:v,strideHeight:g,strideWidth:m,filterHeight:d,filterWidth:p,effectiveFilterHeight:b,effectiveFilterWidth:w,dilationHeight:x,dilationWidth:y,inShape:t,outShape:I,filterShape:e}}function fr(t,e,n,s,r,i=!1,a="channelsLast",o){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===a)[l,u,c,h,d]=t;else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);[l,d,u,c,h]=t}const[p,f,g,,m]=e,[x,y,b]=xr(n),[w,v,C]=xr(s),k=yr(p,w),$=yr(f,v),I=yr(g,C),{padInfo:E,outDepth:R,outHeight:S,outWidth:A}=function(t,e,n,s,r,i,a,o,l,u,c){let h,d,p,f;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const i=function(t,e,n,s,r,i){null==r&&(r=gr(t,e,s));const a=t[1],o=t[2],l=br((t[0]-e+2*r)/s+1,i);he(xe(l),(()=>`The output # of depths (${l}) must be an integer. Change the stride and/or zero pad parameters`));const u=br((a-e+2*r)/s+1,i);he(xe(u),(()=>`The output # of rows (${u}) must be an integer. Change the stride and/or zero pad parameters`));const c=br((o-e+2*r)/s+1,i);return he(xe(c),(()=>`The output # of columns (${c}) must be an integer. Change the stride and/or zero pad parameters`)),[l,u,c,1]}([e,n,s,1],o,0,r,t,c);d=i[0],p=i[1],f=i[2]}else if("same"===t){d=Math.ceil(e/r),p=Math.ceil(n/i),f=Math.ceil(s/a);const t=(d-1)*r+o-e,c=(p-1)*i+l-n,g=(f-1)*a+u-s,m=Math.floor(t/2),x=t-m,y=Math.floor(c/2),b=c-y,w=Math.floor(g/2);h={top:y,bottom:b,left:w,right:g-w,front:m,back:x,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((e-o+1)/r),p=Math.ceil((n-l+1)/i),f=Math.ceil((s-u+1)/a)}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(r,u,c,h,x,y,b,k,$,I,o),N=i?m*d:m;let T;return"channelsFirst"===a?T=[l,N,R,S,A]:"channelsLast"===a&&(T=[l,R,S,A,N]),{batchSize:l,dataFormat:a,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:R,outHeight:S,outWidth:A,outChannels:N,padInfo:E,strideDepth:x,strideHeight:y,strideWidth:b,filterDepth:p,filterHeight:f,filterWidth:g,effectiveFilterDepth:k,effectiveFilterHeight:$,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:v,dilationWidth:C,inShape:t,outShape:T,filterShape:e}}function gr(t,e,n,s=1){const r=yr(e,s);return Math.floor((t[0]*(n-1)-n+r)/2)}function mr(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function xr(t){return"number"==typeof t?[t,t,t]:t}function yr(t,e){return e<=1?t:t+(t-1)*(e-1)}function br(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function wr(t){const[e,n,s]=mr(t);return 1===e&&1===n&&1===s}function vr(t,e){return wr(t)||wr(e)}function Cr(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}const kr=An({avgPool_:function(t,e,n,s,r){const i=Rn(t,"x","avgPool","float32");he(vr(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let a=i,o=!1;3===i.rank&&(o=!0,a=ir(i,[1,i.shape[0],i.shape[1],i.shape[2]])),he(4===a.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${a.rank}.`)),null!=r&&he(xe(s),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const l={x:a},u={filterSize:e,strides:n,pad:s,dimRoundingMode:r};let c=wn.runKernelFunc(((t,i)=>{const o=hr(a.shape,e,n,1,s,r);return i([a]),1===o.filterWidth&&1===o.filterHeight&&me(o.inShape,o.outShape)?a.clone():t.avgPool(a,o)}),l,null,$,u);return c=ds(c,i.dtype),o?ir(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),$r=An({avgPool3d_:function(t,e,n,s,r,i="NDHWC",a){null==a?a=[1,1,1]:Ps("dilations is deprecated, this field will be gone in v3.0.0.");const o=Rn(t,"x","avgPool3d","float32");let l=o,u=!1;4===o.rank&&(u=!0,l=ir(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),he(5===l.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`)),he("NDHWC"===i,(()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+i)),he(vr(n,a),(()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),null!=r&&he(xe(s),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const c={x:l},h={filterSize:e,strides:n,pad:s,dimRoundingMode:r,dataFormat:i,dilations:a};let d=wn.runKernelFunc(((t,o)=>{null==a&&(a=[1,1,1]);const u=dr(l.shape,e,n,a,s,r,i);return o([l]),t.avgPool3d(l,u)}),c,null,E,h);return d=ds(d,l.dtype),u?ir(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});function Ir(t){return null==t?null:0===t.rank?ir(t,[t.size]):1===t.rank?t:2===t.rank?ir(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?ir(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t}const Er=An({batchNorm_:function(t,e,n,s,r,i){null==i&&(i=.001);const a=Rn(t,"x","batchNorm"),o=Rn(e,"mean","batchNorm"),l=Rn(n,"variance","batchNorm");let u,c;null!=r&&(u=Rn(r,"scale","batchNorm")),null!=s&&(c=Rn(s,"offset","batchNorm")),he(o.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),he(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),he(null==u||o.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h=function(t){let e;return e=0===t.rank||1===t.rank?ir(t,[1,1,1,t.size]):2===t.rank?ir(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?ir(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t,e}(a),d={x:h,scale:u,offset:c,mean:o,variance:l},p={varianceEpsilon:i},f=wn.runKernelFunc(((t,e)=>(e([h,o,l,u]),t.batchNorm(h,Ir(o),Ir(l),Ir(c),Ir(u),i))),d,null,q,p);return ir(f,a.shape)}}),Rr=An({batchNorm2d_:function(t,e,n,s,r,i){const a=Rn(t,"x","batchNorm"),o=Rn(e,"mean","batchNorm"),l=Rn(n,"variance","batchNorm");let u,c;return null!=r&&(u=Rn(r,"scale","batchNorm")),null!=s&&(c=Rn(s,"offset","batchNorm")),he(2===a.rank,(()=>"Error in batchNorm2D: x must be rank 2 but got rank "+a.rank+".")),he(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),he(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&he(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&he(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),Er(a,o,l,c,u,i)}}),Sr=An({batchNorm3d_:function(t,e,n,s,r,i){const a=Rn(t,"x","batchNorm"),o=Rn(e,"mean","batchNorm"),l=Rn(n,"variance","batchNorm");let u,c;return null!=r&&(u=Rn(r,"scale","batchNorm")),null!=s&&(c=Rn(s,"offset","batchNorm")),he(3===a.rank,(()=>"Error in batchNorm3D: x must be rank 3 but got rank "+a.rank+".")),he(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),he(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&he(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&he(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),Er(a,o,l,c,u,i)}}),Ar=An({batchNorm4d_:function(t,e,n,s,r,i){const a=Rn(t,"x","batchNorm"),o=Rn(e,"mean","batchNorm"),l=Rn(n,"variance","batchNorm");let u,c;return null!=r&&(u=Rn(r,"scale","batchNorm")),null!=s&&(c=Rn(s,"offset","batchNorm")),he(4===a.rank,(()=>"Error in batchNorm4D: x must be rank 4 but got rank "+a.rank+".")),he(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),he(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&he(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&he(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),Er(a,o,l,c,u,i)}}),Nr=An({clipByValue_:function(t,e,n){const s=Rn(t,"x","clipByValue");he(e<=n,(()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`));const r={x:s},i={clipValueMin:e,clipValueMax:n};return wn.runKernelFunc(((t,r)=>{const i=t.clip(s,e,n);return r([s]),i}),r,null,D,i)}});function Tr(t,e){const n=t[0].length;t.forEach(((t,e)=>{he(t.length===n,(()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`))})),he(e>=0&&e<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=t[0];t.forEach(((t,r)=>{for(let i=0;i<n;i++)he(i===e||t[i]===s[i],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${t}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function Dr(t,e){const n=t[0].slice();for(let s=1;s<t.length;s++)n[e]+=t[s][e];return n}const Fr=An({concat_:function(t,e=0){he(t.length>=1,(()=>"Pass at least one tensor to concat"));let n=Sn(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach((t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)}));const s=n,r={axis:e};return wn.runKernelFunc(((t,s)=>{const r=Ce(e,n[0].shape)[0],i=Dr(n.map((t=>t.shape)),r);if(0===ge(i))return Dn([],i);if(n=n.filter((t=>t.size>0)),1===n.length)return n[0];Tr(n.map((t=>t.shape)),r);const a=t.concat(n,r);return s(n),a}),s,null,F,r)}}),_r=An({concat1d_:function(t){return Fr(t,0)}}),Or=An({concat2d_:function(t,e){return Fr(t,e)}}),Lr=An({concat3d_:function(t,e){return Fr(t,e)}}),Br=An({concat4d_:function(t,e){return Fr(t,e)}}),Mr=An({conv2d_:function(t,e,n,s,r="NHWC",i=[1,1],a){const o=Rn(t,"x","conv2d"),l=Rn(e,"filter","conv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=ir(o,[1,o.shape[0],o.shape[1],o.shape[2]])),he(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),he(4===l.rank,(()=>"Error in conv2d: filter must be rank 4, but got rank "+l.rank+".")),null!=a&&he(xe(s),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`));const h="NHWC"===r?u.shape[3]:u.shape[1];he(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),he(vr(n,i),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`));const d={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:i,dimRoundingMode:a},f=wn.runKernelFunc(((t,e)=>{const o=Cr(r),c=pr(u.shape,l.shape,n,i,s,a,!1,o),h=t.conv2d(u,l,c);return e([u,l]),h}),d,null,_,p);return c?ir(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),zr=An({conv1d_:function(t,e,n,s,r="NWC",i=1,a){const o=Rn(t,"x","conv1d"),l=Rn(e,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=ir(o,[1,o.shape[0],o.shape[1]])),he(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),he(3===l.rank,(()=>"Error in conv1d: filter must be rank 3, but got rank "+l.rank+".")),null!=a&&he(xe(s),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`)),he(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),he(vr(n,i),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${i}'`)),he("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const h=ir(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=ir(u,[u.shape[0],1,u.shape[1],u.shape[2]]),p=Mr(d,h,[1,n],s,"NHWC",[1,i],a);return ir(p,c?[p.shape[2],p.shape[3]]:[p.shape[0],p.shape[2],p.shape[3]])}}),Pr=An({conv2DBackpropInput_:function(t,e,n,s,r,i="NHWC",a){he(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let o=t,l=e,u=!1;3===e.rank&&(u=!0,l=ir(e,[1,e.shape[0],e.shape[1],e.shape[2]]),o=[1,t[0],t[1],t[2]]),he(4===o.length,(()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+".")),he(4===l.rank,(()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+l.rank)),he(4===n.rank,(()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank));const c="NHWC"===i?o[3]:o[1],h="NHWC"===i?l.shape[3]:l.shape[1];he(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),he(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),null!=a&&he(xe(r),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`));const d={dy:l,filter:n},p={strides:s,pad:r,dataFormat:i,dimRoundingMode:a,inputShape:o},f=wn.runKernelFunc(((t,e)=>{const u=Cr(i),c=pr(o,n.shape,s,1,r,a,!1,u),h=t.conv2dDerInput(l,n,c);return e([l,n]),h}),d,null,O,p);return u?ir(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Wr=An({conv2dTranspose_:function(t,e,n,s,r,i){const a=Rn(t,"x","conv2dTranspose"),o=Rn(e,"filter","conv2dTranspose");return Pr(n,a,o,s,r,"NHWC",i)}}),Ur=An({conv3d_:function(t,e,n,s,r="NDHWC",i=[1,1,1]){const a=Rn(t,"x","conv3d"),o=Rn(e,"filter","conv3d");let l=a,u=!1;4===a.rank&&(u=!0,l=ir(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),he(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),he(5===o.rank,(()=>"Error in conv3d: filter must be rank 5, but got rank "+o.rank+".")),he(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),he(vr(n,i),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),he("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`));const c={x:l,filter:o},h={strides:n,pad:s,dataFormat:r,dilations:i},d=wn.runKernelFunc(((t,e)=>{const r=fr(l.shape,o.shape,n,i,s),a=t.conv3d(l,o,r);return e([l,o]),a}),c,null,L,h);return u?ir(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Vr=An({depthwiseConv2d_:function(t,e,n,s,r="NHWC",i=[1,1],a){const o=Rn(t,"x","depthwiseConv2d"),l=Rn(e,"filter","depthwiseConv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=ir(o,[1,o.shape[0],o.shape[1],o.shape[2]])),he(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),he(4===l.rank,(()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+l.rank+".")),he(u.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),null!=a&&he(xe(s),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`));const h={x:u,filter:l},d={strides:n,pad:s,dataFormat:r,dilations:i,dimRoundingMode:a},p=wn.runKernelFunc(((t,e)=>{null==i&&(i=[1,1]),he(vr(n,i),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`));const r=pr(u.shape,l.shape,n,i,s,a,!0),o=t.depthwiseConv2D(u,l,r);return e([u,l]),o}),h,null,P,d);return c?ir(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Gr=An({floorDiv_:function(t,e){let n=Rn(t,"a","floorDiv"),s=Rn(e,"b","floorDiv");[n,s]=fn(n,s);const r={a:n,b:s};return wn.runKernelFunc(((t,e)=>{const r=t.floorDiv(n,s);return e([n,s]),r}),r,null,K)}}),Hr=An({div_:function(t,e){let n=Rn(t,"a","div"),s=Rn(e,"b","div");if([n,s]=fn(n,s),"int32"===n.dtype&&"int32"===s.dtype)return Gr(n,s);const r={a:n,b:s};return wn.runKernelFunc(((t,e)=>{const r=t.realDivide(n,s);return e([n,s]),r}),r,null,U,{})}}),jr=An({elu_:function(t){const e=Rn(t,"x","elu"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.elu(e);return n([s]),s}),n,null,"Elu")}});function Kr(t,e){const n=t.length,s=[];for(let r=0;r<n;r++){const i=n-1-r,a=t[i]||1;(e[e.length-1-r]||1)>1&&1===a&&s.unshift(i)}return s}function qr(t,e){const n=[];for(let s=0;s<e.length;s++){const r=t[t.length-s-1],i=e.length-s-1,a=e[i];(null==r||1===r&&a>1)&&n.unshift(i)}return n}function Xr(t,e){const n=[],s=Math.max(t.length,e.length);for(let r=0;r<s;r++){let s=t[t.length-r-1];null==s&&(s=1);let i=e[e.length-r-1];if(null==i&&(i=1),1===s)n.unshift(i);else if(1===i)n.unshift(s);else{if(s!==i)throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`);n.unshift(s)}}return n}const Yr=An({equal_:function(t,e){let n=Rn(t,"a","equal"),s=Rn(e,"b","equal");[n,s]=fn(n,s),Xr(n.shape,s.shape);const r={a:n,b:s};return wn.runKernelFunc((t=>t.equal(n,s)),r,null,"Equal")}}),Jr=An({expandDims_:function(t,e=0){const n=Rn(t,"x","expandDims",null);he(e<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s=n.shape.slice();return e<0&&(he(-(n.rank+1)<=e,(()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`)),e=n.rank+e+1),s.splice(e,0,1),ir(n,s)}}),Zr=An({tile_:function(t,e){const n=Rn(t,"x","tile",null);he(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`));const s=[n],r={x:n},i={reps:e};return wn.runKernelFunc(((t,s)=>{const r=t.tile(n,e);return s([n]),r}),r,null,Ht,i,s)}}),Qr=An({eye_:function(t,e,n,s="float32"){null==e&&(e=t);const r=hs([t,e],s),i=t<=e?t:e;for(let t=0;t<i;++t)r.set(1,t,t);const a=ir(r.toTensor(),[t,e]);if(null==n)return a;if(1===n.length)return Zr(Jr(a,0),[n[0],1,1]);if(2===n.length)return Zr(Jr(Jr(a,0),0),[n[0],n[1],1,1]);if(3===n.length)return Zr(Jr(Jr(Jr(a,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function ti(t,e,n){const s={shape:t,value:e,dtype:n};return wn.runKernelFunc((s=>s.fill(t,e,n)),{},null,"Fill",s)}const ei=An({floor_:function(t){const e=Rn(t,"x","floor"),n={x:e};return wn.runKernelFunc((t=>t.floor(e)),n,null,j)}}),ni=30;function si(t){return t<=ni?t:Fe(t,Math.floor(Math.sqrt(t)))}function ri(t,e){let n,s=!1;for(t<=ni?(n=t,s=!0):n=Fe(t,Math.floor(Math.sqrt(t)));!s;)n>e||n===t?s=!0:n=Fe(t,n+1);return n}function ii(t,e,n){const s=[],r=t.length;for(let i=0;i<r;i++)i!==e?s.push(t[i]):s.push(n);return s}function ai(t,e,n){const s=t.shape[n],r=[];let i=1,a=1;for(let e=0;e<n;e++)r.push(t.shape[e]),i*=t.shape[e];for(let t=0;t<e.rank;t++)r.push(e.shape[t]);for(let e=n+1;e<t.rank;e++)r.push(t.shape[e]),a*=t.shape[e];return{batchSize:i,sliceSize:a,dimSize:s,outputShape:r}}const oi=An({gather_:function(t,e,n=0){const s=Rn(t,"x","gather"),r=Rn(e,"indices","gather","int32"),i={x:s,indices:r},a={axis:n};return wn.runKernelFunc(((t,e)=>{const i=Ce(n,s.shape)[0],a=ai(s,r,i),o=t.gather(s,ir(r,[r.size]),i);return e([s,r]),ir(o,a.outputShape)}),i,null,X,a)}}),li=An({greater_:function(t,e){let n=Rn(t,"a","greater"),s=Rn(e,"b","greater");[n,s]=fn(n,s),Xr(n.shape,s.shape);const r={a:n,b:s};return wn.runKernelFunc((t=>t.greater(n,s)),r,null,"Greater")}}),ui=An({greaterEqual_:function(t,e){let n=Rn(t,"a","greaterEqual"),s=Rn(e,"b","greaterEqual");[n,s]=fn(n,s),Xr(n.shape,s.shape);const r={a:n,b:s};return wn.runKernelFunc(((t,e)=>{const r=t.greaterEqual(n,s);return e([n,s]),r}),r,null,Y)}}),ci=An({imag_:function(t){const e=Rn(t,"input","imag"),n={input:e};return wn.runKernelFunc((t=>t.imag(e)),n,null,"Imag")}}),hi=An({maximum_:function(t,e){let n=Rn(t,"a","maximum"),s=Rn(e,"b","maximum");[n,s]=fn(n,s),"bool"===n.dtype&&(n=ds(n,"int32"),s=ds(s,"int32")),Xr(n.shape,s.shape);const r={a:n,b:s};return wn.runKernelFunc(((t,e)=>{const r=t.maximum(n,s);return e([n,s]),r}),r,null,it)}}),di=An({mul_:function(t,e){let n=Rn(t,"a","mul"),s=Rn(e,"b","mul");[n,s]=fn(n,s);const r={a:n,b:s};return wn.runKernelFunc(((t,e)=>{const r=t.multiply(n,s);return e([n,s]),r}),r,null,ct)}}),pi=An({leakyRelu_:function(t,e=.2){const n=Rn(t,"x","leakyRelu");return hi(di(Ks(e),n),n)}}),fi=An({log_:function(t){const e=Rn(t,"x","log"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.log(e);return n([e]),s}),n,null,et)}}),gi=An({exp_:function(t){const e=Rn(t,"x","exp"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.exp(e);return n([s]),s}),n,null,V)}}),mi=An({max_:function(t,e=null,n=!1){const s=Rn(t,"x","max"),r={x:s},i={reductionIndices:e,keepDims:n};return wn.runKernelFunc(((t,r)=>{let i=Ce(e,s.shape);const a=nr(i,s.rank);let o=s;null!=a&&(o=ar(s,a),i=rr(i.length,o.rank));const l=t.max(o,i);null!=a&&o.dispose();let u=l;if(n){const t=tr(u.shape,Ce(e,s.shape));u=ir(u,t),l.dispose()}return r([s,u]),u}),r,null,rt,i)}}),xi=An({sub_:function(t,e){let n=Rn(t,"a","sub"),s=Rn(e,"b","sub");[n,s]=fn(n,s);const r={a:n,b:s};return wn.runKernelFunc(((t,e)=>{const r=t.subtract(n,s);return e([n,s]),r}),r,null,Ut)}}),yi=An({sum_:function(t,e=null,n=!1){let s=Rn(t,"x","sum");"bool"===s.dtype&&(s=ds(s,"int32"));const r={x:s},i={axis:e,keepDims:n};return wn.runKernelFunc(((t,r)=>{r([s]);const i=Ce(e,s.shape),a=nr(i,s.rank);let o=i,l=s;null!=a&&(l=ar(s,a),o=rr(o.length,s.rank));let u=t.sum(l,o);if(n){const t=tr(u.shape,i);u=ir(u,t)}return u}),r,null,"Sum",i)}}),bi=An({logSoftmax_:function(t,e=-1){const n=Rn(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);const s={logits:n},r={axis:e};return wn.runKernelFunc(((n,s)=>{const r=mi(t,e,!0),i=xi(t,r),a=xi(ds(i,"float32"),fi(yi(gi(i),e,!0)));return s([a]),a}),s,null,st,r)}}),wi=An({logicalAnd_:function(t,e){const n=Rn(t,"a","logicalAnd","bool"),s=Rn(e,"b","logicalAnd","bool");Xr(n.shape,s.shape);const r={a:n,b:s};return wn.runKernelFunc((t=>t.logicalAnd(n,s)),r,null,"LogicalAnd")}}),vi=An({maxPool_:function(t,e,n,s,r){const i=Rn(t,"x","maxPool");let a=i,o=!1;3===i.rank&&(o=!0,a=ir(i,[1,i.shape[0],i.shape[1],i.shape[2]])),he(4===a.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${a.rank}.`)),he(vr(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=r&&he(xe(s),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const l={x:a},u={filterSize:e,strides:n,pad:s,dimRoundingMode:r},c=wn.runKernelFunc(((t,i)=>{const o=hr(a.shape,e,n,1,s,r);let l;return l=1===o.filterWidth&&1===o.filterHeight&&me(o.inShape,o.outShape)?a.clone():t.maxPool(a,o),i([a,l]),l}),l,null,at,u);return o?ir(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Ci=An({maxPool3d_:function(t,e=[1,1,1],n,s,r,i="NDHWC",a){null==a?a=[1,1,1]:Ps("dilations is deprecated, this field will be gone in v3.0.0.");const o=Rn(t,"x","maxPool3d");let l=o,u=!1;4===o.rank&&(u=!0,l=ir(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),he(5===l.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`)),he("NDHWC"===i,(()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+i)),he(vr(n,a),(()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),null!=r&&he(xe(s),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const c={x:l},h={filterSize:e,strides:n,pad:s,dimRoundingMode:r,dataFormat:i,dilations:a},d=wn.runKernelFunc(((t,o)=>{null==a&&(a=[1,1,1]);const u=dr(l.shape,e,n,a,s,r,i),c=t.maxPool3d(l,u);return o([l,c]),c}),c,null,lt,h);return u?ir(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});function ki(t,e="float32"){if("complex64"===e){const e=ki(t,"float32"),n=ki(t,"float32");return Nn(e,n)}const n=ze(ge(t),e);return wn.makeTensor(n,t,e)}function $i(t,e="float32"){if("complex64"===e){const e=$i(t,"float32"),n=ki(t,"float32");return Nn(e,n)}const n=Me(ge(t),e);return wn.makeTensor(n,t,e)}const Ii=An({mean_:function(t,e=null,n=!1){const s=Rn(t,"x","mean"),r=Ce(e,s.shape),i=ge(Qs(s.shape,r)[1]);return js((t=>{const s=Ks(i),a=s.dtype===t.dtype?t:ds(t,s.dtype),o=Hr(a,s);return{value:yi(o,e,n),gradFunc:e=>{const n=t.shape.slice();r.forEach((t=>{n[t]=1}));const s=ir(e,n);return Hr(di(s,$i(t.shape,"float32")),i)}}}))(s)}}),Ei=An({min_:function(t,e=null,n=!1){const s=Rn(t,"x","min"),r={x:s},i={axis:e,keepDims:n};return wn.runKernelFunc(((t,r)=>{const i=Ce(e,s.shape);let a=i;const o=nr(a,s.rank);let l=s;null!=o&&(l=ar(s,o),a=rr(a.length,s.rank));const u=t.min(l,a);null!=o&&l.dispose();let c=u;if(n){const t=tr(c.shape,i);c=ir(u,t),u.dispose()}return r([s,c]),c}),r,null,"Min",i)}}),Ri=An({minimum_:function(t,e){let n=Rn(t,"a","minimum"),s=Rn(e,"b","minimum");[n,s]=fn(n,s),"bool"===n.dtype&&(n=ds(n,"int32"),s=ds(s,"int32")),Xr(n.shape,s.shape);const r={a:n,b:s};return wn.runKernelFunc(((t,e)=>{const r=t.minimum(n,s);return e([n,s]),r}),r,null,ut)}}),Si=An({square_:function(t){const e=Rn(t,"x","square"),n=[e];return wn.runKernelFunc(((t,n)=>(n([e]),t.square(e))),{x:e},null,"Square",{},n,[])}}),Ai=An({moments_:function(t,e=null,n=!1){const s=Ce(e,(t=Rn(t,"x","moments")).shape),r=Ii(t,s,n);let i=r.shape;n||(i=tr(r.shape,s));const a=Si(xi(ds(t,"float32"),ir(r,i)));return{mean:r,variance:Ii(a,s,n)}}}),Ni=An({neg_:function(t){const e=Rn(t,"x","neg"),n={x:e};return wn.runKernelFunc((t=>t.neg(e)),n,null,ht)}}),Ti=An({notEqual_:function(t,e){let n=Rn(t,"a","notEqual"),s=Rn(e,"b","notEqual");[n,s]=fn(n,s),Xr(n.shape,s.shape);const r={a:n,b:s};return wn.runKernelFunc((t=>t.notEqual(n,s)),r,null,"NotEqual")}}),Di=An({oneHot_:function(t,e,n=1,s=0){if(e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);const r=Rn(t,"indices","oneHot","int32"),i=[...r.shape,e],a={indices:r},o={depth:e,onValue:n,offValue:s};return wn.runKernelFunc(((t,a)=>(a([r]),ir(t.oneHot(ir(r,[r.size]),e,n,s),i))),a,null,mt,o)}}),Fi=An({real_:function(t){const e=Rn(t,"input","real"),n={input:e};return wn.runKernelFunc((t=>t.real(e)),n,null,"Real")}}),_i=An({zerosLike_:function(t){const e=Rn(t,"x","zerosLike"),n={x:e};return wn.runKernelFunc((t=>t.zerosLike(e)),n,null,Yt)}}),Oi=An({onesLike_:function(t){const e=Rn(t,"x","onesLike"),n={x:e};return wn.runKernelFunc(((t,n)=>{if("complex64"===e.dtype){const t=Oi(Fi(e)),n=_i(ci(e));return Nn(t,n)}return t.onesLike(e)}),n,null,gt)}}),Li=An({pad_:function(t,e,n=0){const s=Rn(t,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:e,constantValue:n},i={x:s};return wn.runKernelFunc(((t,r)=>(r([s]),t.pad(s,e,n))),i,null,xt,r)}}),Bi=An({prelu_:function(t,e){const n=Rn(t,"x","prelu"),s=Rn(e,"alpha","prelu"),r={x:n,alpha:s};return wn.runKernelFunc(((t,e)=>{const r=t.prelu(n,s);return e([n,s]),r}),r,null,yt)}});var Mi=n(30);class zi{constructor(t,e,n,s,r){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const i=r||Math.random();this.random=Mi.alea(i.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let s,r,i;do{s=2*this.random()-1,r=2*this.random()-1,i=s*s+r*r}while(i>=1||0===i);const a=Math.sqrt(-2*Math.log(i)/i);t=this.mean+this.stdDev*s*a,e=this.mean+this.stdDev*r*a,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class Pi{constructor(t=0,e=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Mi.alea(s)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Wi=An({randomNormal_:function(t,e=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type "+s);const i=new zi(e,n,s,!1,r),a=hs(t,s);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}}),Ui=An({randomUniform_:function(t,e=0,n=1,s="float32",r){const i=hs(t,s),a=new Pi(e,n,null,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});function Vi(t,e){pe(t);const n=$n(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Tn(t,null,n,e)}function Gi(t,e,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:t,stop:e,step:n,dtype:s};return wn.runKernelFunc((()=>{if(t===e||t<e&&n<0||e<t&&n>1)return ki([0],s);const r=ze(Math.abs(Math.ceil((e-t)/n)),s);e<t&&1===n&&(n=-1),r[0]=t;for(let t=1;t<r.length;t++)r[t]=r[t-1]+n;return Vi(r,s)}),{},null,"Range",r)}const Hi=An({relu_:function(t){const e=Rn(t,"x","relu"),n={x:e};return wn.runKernelFunc(((t,n)=>(n([e]),"bool"===e.dtype?ds(e,"int32"):t.relu(e))),n,null,wt)}}),ji=An({reverse_:function(t,e){const n=Rn(t,"x","reverse"),s={x:n},r={dims:e};return wn.runKernelFunc((t=>{const s=Ce(e,n.shape);if(0===n.rank)return ps(n);const r=t.reverse(n,s);return ir(r,n.shape)}),s,null,It,r)}}),Ki=An({selu_:function(t){const e=Rn(t,"x","selu"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.selu(e);return n([e]),s}),n,null,At)}}),qi=An({separableConv2d_:function(t,e,n,s,r,i=[1,1],a="NHWC"){const o=Rn(t,"x","separableConv2d"),l=Rn(e,"depthwiseFilter","separableConv2d"),u=Rn(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=ir(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===a)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");he(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),he(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),he(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),he(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),he(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const d=l.shape[2],p=l.shape[3];he(u.shape[2]===d*p,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${u.shape[2]}.`));const f=Vr(c,l,s,r,a,i),g=Mr(f,u,1,"valid",a);return h?ir(g,[g.shape[1],g.shape[2],g.shape[3]]):g}}),Xi=An({sigmoid_:function(t){const e=Rn(t,"x","sigmoid"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.sigmoid(e);return n([s]),s}),n,null,_t)}}),Yi=An({slice_:function(t,e,n){const s=Rn(t,"x","slice");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},i={begin:e,size:n};return wn.runKernelFunc(((t,r)=>{const[i,a]=Ls(s,e,n);return Cs(s,i,a),r([s]),t.slice(s,i,a)}),r,null,Nt,i)}}),Ji=An({slice1d_:function(t,e,n){const s=Rn(t,"x","slice1d");return he(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),Yi(s,[e],[n])}}),Zi=An({slice2d_:function(t,e,n){const s=Rn(t,"x","slice2d");return he(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),Yi(s,e,n)}}),Qi=An({slice3d_:function(t,e,n){const s=Rn(t,"x","slice3d");return he(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),Yi(s,e,n)}}),ta=An({slice4d_:function(t,e,n){const s=Rn(t,"x","slice4d");return he(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),Yi(s,e,n)}}),ea=An({softmax_:function(t,e=-1){const n=Rn(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const s={logits:n},r={dim:e};return wn.runKernelFunc(((t,s)=>{const r=t.softmax(n,e);return s([r]),r}),s,null,zt,r)}}),na=An({softplus_:function(t){const e=Rn(t,"x","softplus"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.softplus(e);return n([e]),s}),n,null,Ot)}});function sa(t,e,n=0){let s=[];if("number"==typeof e)he(t.shape[n]%e==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(e).fill(t.shape[n]/e);else{he(e.reduce(((t,e)=>(-1===e&&(t+=1),t)),0)<=1,(()=>"There should be only one negative value in split array."));const r=e.indexOf(-1);if(-1!==r){const s=e.reduce(((t,e)=>e>0?t+e:t));e[r]=t.shape[n]-s}he(t.shape[n]===e.reduce(((t,e)=>t+e)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=e}return s}const ra=An({split_:function(t,e,n=0){const s=Rn(t,"x","split"),r={x:s},i={numOrSizeSplits:e,axis:n};return wn.runKernelFunc(((t,r)=>{const i=Ce(n,s.shape)[0],a=sa(s,e,i);return t.split(s,a,i)}),r,null,Mt,i)}}),ia=An({sqrt_:function(t){const e=Rn(t,"x","sqrt"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.sqrt(e);return n([e]),s}),n,null,Lt)}}),aa=An({squeeze_:function(t,e){const n=Rn(t,"x","squeeze");return ir(n,ke(n.shape,e).newShape)}}),oa=An({stack_:function(t,e=0){const n=Sn(t,"tensors","stack");if(he(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),1===n.length)return Jr(n[0],e);const s=n[0].rank,r=n[0].shape,i=n[0].dtype;he(e<=s,(()=>"Axis must be <= rank of the tensor")),n.forEach((t=>{de(r,t.shape,"All tensors passed to stack must have matching shapes"),he(i===t.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const a=n.map((t=>Jr(t,e)));return Fr(a,e)}}),la=An({tanh_:function(t){const e=Rn(t,"x","tanh"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.tanh(e);return n([s]),s}),n,null,Gt)}}),ua=An({truncatedNormal_:function(t,e=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const i=new zi(e,n,s,!0,r),a=hs(t,s);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}}),ca=An({unstack_:function(t,e=0){const n=Rn(t,"x","unstack");he(e>=-n.shape.length&&e<n.shape.length,(()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`)),e<0&&(e+=n.shape.length);const s={value:n},r={axis:e};return wn.runKernelFunc((t=>t.unstack(n,e)),s,null,qt,r)}}),ha=An({broadcastTo_:function(t,e){let n=Rn(t,"broadcastTo","x");const s=n.shape;if(e.some((t=>!(t>0)||t%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=ir(n,t)}const r=n.shape,i=Array.from(e);for(let t=e.length-1;t>=0;t--)if(r[t]===e[t])i[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${e}].`);if(0===i.map(((t,e)=>t>1?e:-1)).filter((t=>t>=0)).length)return ps(n);const a={x:n},o={shape:e,inputShape:r};return wn.runKernelFunc((t=>t.tile(n,i)),a,null,A,o)}}),da=An({where_:function(t,e,n){const s=Rn(e,"a","where"),r=Rn(n,"b","where"),i=Rn(t,"condition","where","bool"),a=Xr(s.shape,r.shape),o=ha(s,a),l=ha(r,a);1===i.rank&&he(i.shape[0]===s.shape[0],(()=>"The first dimension of `a` must match the size of `condition`.")),1!==i.rank&&de(i.shape,l.shape,"Error in where: ");const u={condition:i,t:o,e:l};return wn.runKernelFunc(((t,e)=>{const n=t.select(i,o,l);return e([i]),n}),u,null,St)}}),pa=An({dropout_:function(t,e,n,s){const r=Rn(t,"x","dropout");if(he("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),he(e>=0&&e<1,(()=>`rate must be a float in the range [0, 1), but got ${e}.`)),0===e)return t instanceof sn?r.clone():r;const i=function(t,e){if(null==e)return t.shape.slice();if(me(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let s=0;s<t.shape.length;s++)null==e[s]&&null!=t.shape[s]?n.push(t.shape[s]):n.push(e[s]);return n}return e}(r,n),a=1-e,o=Hr(ei(Ys(Ui(i,0,1,"float32",s),a)),a);return di(r,o)}}),fa=An({fft_:function(t){he("complex64"===t.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`));const e={input:t};return wn.runKernelFunc((e=>{const n=t.shape[t.shape.length-1],s=t.size/n,r=t.as2D(s,n);return e.fft(r).reshape(t.shape)}),e,null,"FFT")}}),ga=An({rfft_:function(t,e){he("float32"===t.dtype,(()=>"The dtype for rfft() must be real value but got "+t.dtype));let n=t.shape[t.shape.length-1];const s=t.size/n;let r;if(null!=e&&e<n){const s=t.shape.map((t=>0)),i=t.shape.map((t=>t));i[t.shape.length-1]=e,r=Yi(t,s,i),n=e}else if(null!=e&&e>n){const s=t.shape.map((t=>t));s[t.shape.length-1]=e-n,r=Fr([t,ki(s)],t.shape.length-1),n=e}else r=t;const i=_i(r),a=ir(Nn(r,i),[s,n]),o=fa(a),l=Math.floor(n/2)+1,u=Fi(o),c=ci(o),h=ra(u,[l,n-l],u.shape.length-1),d=ra(c,[l,n-l],c.shape.length-1),p=r.shape.slice();return p[r.shape.length-1]=l,ir(Nn(h[0],d[0]),p)}}),ma=An({ifft_:function(t){he("complex64"===t.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`));const e={input:t};return wn.runKernelFunc((e=>{const n=t.shape[t.shape.length-1],s=t.size/n,r=ir(t,[s,n]),i=e.ifft(r);return ir(i,t.shape)}),e,null,"IFFT")}}),xa=An({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;let s;if(e<=2){const r=ir(t,[n,e]);s=ma(r)}else{const r=[n,2*(e-1)],i=ir(Fi(t),[n,e]),a=ir(ci(t),[n,e]),o=ji(Yi(i,[0,1],[n,e-2]),1),l=di(ji(Yi(a,[0,1],[n,e-2]),1),Ks(-1)),u=Fr([i,o],1),c=Fr([a,l],1),h=ir(Nn(u,c),[r[0],r[1]]);s=ma(h)}if(s=Fi(s),3===t.rank&&0!==t.shape[0]){const e=s,n=t.shape[0];s=ir(s,[n,s.shape[0]/n,s.shape[1]]),e.dispose()}return s}}),ya=An({conv2DBackpropFilter_:function(t,e,n,s,r,i="NHWC",a){let o=t;3===t.rank&&(o=ir(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let l=e;3===l.rank&&(l=ir(e,[1,e.shape[0],e.shape[1],e.shape[2]])),he(4===o.rank,(()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+".")),he(4===l.rank,(()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+l.shape+".")),he(4===n.length,(()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+"."));const u="NHWC"===i?o.shape[3]:o.shape[1],c="NHWC"===i?l.shape[3]:l.shape[1];he(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),he(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),null!=a&&he(xe(r),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`));const h={x:o,dy:l},d={strides:s,pad:r,dataFormat:i,dimRoundingMode:a};return wn.runKernelFunc((t=>{const e=Cr(i),u=pr(o.shape,n,s,1,r,a,!1,e);return t.conv2dDerFilter(o,l,u)}),h,null,"Conv2DBackpropFilter",d)}}),ba=An({relu6_:function(t){const e=Rn(t,"x","relu6"),n={x:e};return wn.runKernelFunc(((t,n)=>(n([e]),"bool"===e.dtype?ds(e,"int32"):t.relu6(e))),n,null,$t)}}),wa=An({step_:function(t,e=0){const n=Rn(t,"x","step"),s={x:n},r={alpha:e};return wn.runKernelFunc((t=>t.step(n,e)),s,null,Jt,r)}});function va(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return di(t,wa(e));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Ca(t,e){let n=e;const s=qr(t.shape,e.shape);return s.length>0&&(n=yi(n,s)),ir(n,t.shape)}function ka(t,e,n){if("linear"===e)return t;if("relu"===e)return Hi(t);if("elu"===e)return jr(t);if("relu6"===e)return ba(t);if("prelu"===e)return Bi(t,n);throw new Error(`Unknown fused activation ${e}.`)}const $a=(t,e)=>!(t>0)||"linear"===e,Ia=An({fusedConv2d_:function({x:t,filter:e,strides:n,pad:s,dataFormat:r="NHWC",dilations:i=[1,1],dimRoundingMode:a,bias:o,activation:l="linear",preluActivationWeights:u}){if(l=l||"linear",!1===$a(wn.state.gradientDepth,l)){let c=Mr(t,e,n,s,r,i,a);return null!=o&&(c=Ys(c,o)),ka(c,l,u)}const c=Rn(t,"x","conv2d"),h=Rn(e,"filter","conv2d");let d=c,p=!1;3===c.rank&&(p=!0,d=ir(c,[1,c.shape[0],c.shape[1],c.shape[2]])),he(4===d.rank,(()=>"Error in fused conv2d: input must be rank 4, but got rank "+d.rank+".")),he(4===h.rank,(()=>"Error in fused conv2d: filter must be rank 4, but got rank "+h.rank+".")),null!=a&&he(xe(s),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`)),he(d.shape[3]===h.shape[2],(()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${h.shape[2]}.`)),he(vr(n,i),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),he("NHWC"===r,(()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`));const f=pr(d.shape,h.shape,n,i,s,a);let g,m;null!=o&&(g=Rn(o,"bias","fused conv2d"),[g]=fn(g,c),Xr(f.outShape,g.shape)),null!=u&&(m=Rn(u,"prelu weights","fused conv2d"));const x=(t,e)=>{const[r,a,o,u]=e,c=va(t,o,l);he(wr(i),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${i}'`));const h=[Pr(a.shape,c,r,n,s),ya(a,c,r.shape,n,s)];if(null!=u){const t=Ca(u,c);h.push(t)}return h},y=t=>t.fusedConv2d({input:d,filter:h,convInfo:f,bias:g,activation:l,preluActivationWeights:m}),b={x:d,filter:h,bias:g,preluActivationWeights:m},w={strides:n,pad:s,dataFormat:r,dilations:i,dimRoundingMode:a,activation:l};return null==o?js(((t,e,n)=>{let s=wn.runKernelFunc(y,b,null,te,w);return n([e,t,s]),p&&(s=ir(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}))(d,h):js(((t,e,n,s)=>{let r=wn.runKernelFunc(y,b,null,te,w);return s([e,t,r,n]),p&&(r=ir(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(d,h,g)}}),Ea=An({matMul_:function(t,e,n=!1,s=!1){let r=Rn(t,"a","matMul"),i=Rn(e,"b","matMul");[r,i]=fn(r,i),he(r.rank>=2&&i.rank>=2&&r.rank===i.rank,(()=>`Error in matMul: inputs must have the same rank of at least 2, got ranks ${r.rank} and ${i.rank}.`));const a=n?r.shape[r.rank-2]:r.shape[r.rank-1],o=s?i.shape[i.rank-1]:i.shape[i.rank-2],l=n?r.shape[r.rank-1]:r.shape[r.rank-2],u=s?i.shape[i.rank-2]:i.shape[i.rank-1],c=r.shape.slice(0,-2),h=i.shape.slice(0,-2),d=ge(c),p=ge(h);he(me(c,h),(()=>`Error in matMul: outer dimensions (${c}) and (${h}) of Tensors with shapes ${r.shape} and `+i.shape+" must match.")),he(a===o,(()=>`Error in matMul: inner shapes (${a}) and (${o}) of Tensors with shapes ${r.shape} and ${i.shape} and transposeA=${n} and transposeB=${s} must match.`));const f=r.shape.slice(0,-2).concat([l,u]),g=ir(r,n?[d,a,l]:[d,l,a]),m=ir(i,s?[p,u,o]:[p,o,u]),x={a:g,b:m},y={transposeA:n,transposeB:s},b=wn.runKernelFunc(((t,e)=>(e([g,m]),t.batchMatMul(g,m,n,s))),x,null,R,y);return ir(b,f)}}),Ra=An({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:s=!1,bias:r,activation:i="linear",preluActivationWeights:a}){if(!1===$a(wn.state.gradientDepth,i)){let o=Ea(t,e,n,s);return null!=r&&(o=Ys(o,r)),ka(o,i,a)}let o=Rn(t,"a","fused matMul"),l=Rn(e,"b","fused matMul");[o,l]=fn(o,l);const u=n?o.shape[o.rank-2]:o.shape[o.rank-1],c=s?l.shape[l.rank-1]:l.shape[l.rank-2],h=n?o.shape[o.rank-1]:o.shape[o.rank-2],d=s?l.shape[l.rank-2]:l.shape[l.rank-1],p=o.shape.slice(0,-2),f=l.shape.slice(0,-2),g=ge(p),m=ge(f);he(o.rank>=2&&l.rank>=2&&o.rank===l.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${o.rank} and ${l.rank}.`)),he(me(p,f),(()=>`Error in fused matMul: outer dimensions (${p}) and (${f}) of Tensors with shapes ${o.shape} and `+l.shape+" must match.")),he(u===c,(()=>`Error in fused matMul: inner shapes (${u}) and (${c}) of Tensors with shapes ${o.shape} and ${l.shape} and transposeA=${n} and transposeB=${s} must match.`));const x=o.shape.slice(0,-2).concat([h,d]),y=ir(o,n?[g,u,h]:[g,h,u]),b=ir(l,s?[m,d,c]:[m,c,d]);let w,v;null!=r&&(w=Rn(r,"bias","fused matMul"),[w]=fn(w,o),Xr(x,w.shape)),null!=a&&(v=Rn(a,"prelu weights","fused matMul"));const C=(t,e)=>{const[a,o,l,u]=e,c=va(ir(t,l.shape),l,i);let h,d;return n||s?!n&&s?(h=Ea(c,o,!1,!1),d=Ea(c,a,!0,!1)):n&&!s?(h=Ea(o,c,!1,!0),d=Ea(a,c,!1,!1)):(h=Ea(o,c,!0,!0),d=Ea(c,a,!0,!0)):(h=Ea(c,o,!1,!0),d=Ea(a,c,!0,!1)),null!=r?[h,d,Ca(u,c)]:[h,d]},k=t=>t.fusedBatchMatMul({a:y,b,transposeA:n,transposeB:s,bias:w,activation:i,preluActivationWeights:v}),$={a:y,b,bias:w,preluActivationWeights:v},I={transposeA:n,transposeB:s,activation:i};return null==r?js(((t,e,n)=>{const s=wn.runKernelFunc(k,$,null,Qt,I);return n([t,e,s]),{value:ir(s,x),gradFunc:C}}))(y,b):js(((t,e,n,s)=>{const r=wn.runKernelFunc(k,$,null,Qt,I);return s([t,e,r,n]),{value:ir(r,x),gradFunc:C}}))(y,b,w)}});function Sa(t,e,n){const s=1-t%2,r=new Float32Array(t);for(let i=0;i<t;++i){const a=2*Math.PI*i/(t+s-1);r[i]=e-n*Math.cos(a)}return Vi(r,"float32")}An({hammingWindow_:function(t){return Sa(t,.54,.46)}});const Aa=An({hannWindow_:function(t){return Sa(t,.5,.5)}});function Na(t,e,n){if(pe(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const s=$n(t,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Tn(t,e,s,n)}const Ta=An({frame_:function(t,e,n,s=!1,r=0){let i=0;const a=[];for(;i+e<=t.size;)a.push(Yi(t,i,e)),i+=n;if(s)for(;i<t.size;){const s=i+e-t.size,o=Fr([Yi(t,i,e-s),ti([s],r)]);a.push(o),i+=n}return 0===a.length?Na([],[0,e]):ir(Fr(a),[a.length,e])}});function Da(t,e,n,s,r,i){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==i&&(i=0);const a=t.shape[0];return n=Math.min(n,a),he(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),he(2===t.rank,(()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`)),he(4===t.shape[1],(()=>"boxes must have 4 columns, but 2nd dimension was "+t.shape[1])),he(1===e.rank,(()=>"scores must be a 1D tensor")),he(e.shape[0]===a,(()=>`scores has incompatible shape with boxes. Expected ${a}, but was `+e.shape[0])),he(0<=i&&i<=1,(()=>`softNmsSigma must be in [0, 1], but was '${i}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:i}}function Fa(t,e,n){const s=function(t,e,n){return function(t,e,n){let s=0,r=t.length,i=0,a=!1;for(;s<r;){i=s+(r-s>>>1);const o=n(e,t[i]);o>0?s=i+1:(r=i,a=!o)}return a?s:-s-1}(t,e,n||_a)}(t,e,n),r=s<0?-(s+1):s;t.splice(r,0,e)}function _a(t,e){return t>e?1:t<e?-1:0}function Oa(t,e,n,s,r,i,a=!1,o=!1,l=!1){const u=[];for(let t=0;t<e.length;t++)e[t]>r&&u.push({score:e[t],boxIndex:t,suppressBeginIndex:0});u.sort(Ma);const c=i>0?-.5/i:0,h=[],d=[];for(;h.length<n&&u.length>0;){const e=u.pop(),{score:n,boxIndex:i,suppressBeginIndex:a}=e;if(n<r)break;let o=!1;for(let n=h.length-1;n>=a;--n){const a=La(t,i,h[n]);if(a>=s){o=!0;break}if(e.score=e.score*Ba(s,c,a),e.score<=r)break}e.suppressBeginIndex=h.length,o||(e.score===n?(h.push(i),d.push(e.score)):e.score>r&&Fa(u,e,Ma))}const p=h.length,f=n-p;o&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const g={selectedIndices:Vi(h,"int32")};return a&&(g.selectedScores=Vi(d,"float32")),l&&(g.validOutputs=Ks(p,"int32")),g}function La(t,e,n){const s=t.subarray(4*e,4*e+4),r=t.subarray(4*n,4*n+4),i=Math.min(s[0],s[2]),a=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),d=Math.max(r[1],r[3]),p=(o-i)*(l-a),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const g=Math.max(i,u),m=Math.max(a,c),x=Math.min(o,h),y=Math.min(l,d),b=Math.max(x-g,0)*Math.max(y-m,0);return b/(p+f-b)}function Ba(t,e,n){const s=Math.exp(e*n*n);return n<=t?s:0}function Ma(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}An({stft_:function(t,e,n,s,r=Aa){var i;null==s&&(i=e,s=Math.floor(Math.pow(2,Math.ceil(Math.log(i)/Math.log(2)))));const a=Ta(t,e,n),o=di(a,r(e)),l=[];for(let t=0;t<a.shape[0];t++)l.push(ga(Yi(o,[t,0],[1,e]),s));return Fr(l)}}),An({cropAndResize_:function(t,e,n,s,r,i){const a=Rn(t,"image","cropAndResize"),o=Rn(e,"boxes","cropAndResize","float32"),l=Rn(n,"boxInd","cropAndResize","int32");r=r||"bilinear",i=i||0;const u=o.shape[0];he(4===a.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${a.rank}.`)),he(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),he(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),he(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),he(s[0]>=1&&s[1]>=1,(()=>"cropSize must be atleast [1,1], but was "+s)),he("bilinear"===r||"nearest"===r,(()=>"method must be bilinear or nearest, but was "+r));const c={image:a,boxes:o,boxInd:l},h={method:r,extrapolationValue:i,cropSize:s};return wn.runKernelFunc((t=>t.cropAndResize(a,o,l,s,r,i)),c,null,"CropAndResize",h)}}),An({flipLeftRight_:function(t){const e=Rn(t,"image","flipLeftRight","float32");he(4===e.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`));const n={image:e};return wn.runKernel(H,n,{})}}),An({rotateWithOffset_:function(t,e,n=0,s=.5){const r=Rn(t,"image","rotateWithOffset","float32");he(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const i={image:r},a={radians:e,fillValue:n,center:s};return wn.runKernel(Zt,i,a)}}),An({nonMaxSuppression_:function(t,e,n,s=.5,r=Number.NEGATIVE_INFINITY){const i=Rn(t,"boxes","nonMaxSuppression"),a=Rn(e,"scores","nonMaxSuppression"),o=Da(i,a,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l={maxOutputSize:n,iouThreshold:s,scoreThreshold:r};return wn.runKernelFunc((t=>t.nonMaxSuppression(i,a,n,s,r)),{boxes:i,scores:a},null,dt,l)}}),An({nonMaxSuppressionWithScore_:function(t,e,n,s=.5,r=Number.NEGATIVE_INFINITY,i=0){const a=Rn(t,"boxes","nonMaxSuppression"),o=Rn(e,"scores","nonMaxSuppression"),l=Da(a,o,n,s,r,i),u={boxes:a,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:i=l.softNmsSigma},h=wn.runKernel(ft,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}}),An({nonMaxSuppressionPadded_:function(t,e,n,s=.5,r=Number.NEGATIVE_INFINITY,i=!1){const a=Rn(t,"boxes","nonMaxSuppression"),o=Rn(e,"scores","nonMaxSuppression"),l=Da(a,o,n,s,r,null),u={boxes:a,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:i},h=wn.runKernel(pt,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const za=An({resizeBilinear_:function(t,e,n=!1){const s=Rn(t,"images","resizeBilinear");he(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),he(2===e.length,(()=>"Error in resizeBilinear: new shape must 2D, but got shape "+e+"."));let r=s,i=!1;3===s.rank&&(i=!0,r=ir(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[a,o]=e,l={images:r},u={alignCorners:n,size:e},c=wn.runKernelFunc(((t,e)=>(e([r]),t.resizeBilinear(r,a,o,n))),l,null,kt,u);return i?ir(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Pa=An({resizeNearestNeighbor_:function(t,e,n=!1){const s=Rn(t,"images","resizeNearestNeighbor");he(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),he(2===e.length,(()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+".")),he("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype"));let r=s,i=!1;3===s.rank&&(i=!0,r=ir(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[a,o]=e,l={images:r},u={alignCorners:n,size:e},c=wn.runKernelFunc(((t,e)=>(e([r]),t.resizeNearestNeighbor(r,a,o,n))),l,null,Ct,u);return i?ir(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Wa=An({lessEqual_:function(t,e){let n=Rn(t,"a","lessEqual"),s=Rn(e,"b","lessEqual");[n,s]=fn(n,s),Xr(n.shape,s.shape);const r={a:n,b:s};return wn.runKernelFunc(((t,e)=>{const r=t.lessEqual(n,s);return e([n,s]),r}),r,null,"LessEqual")}}),Ua=An({bandPart_:function(t,e,n){he(e%1==0,(()=>`bandPart(): numLower must be an integer, got ${e}.`)),he(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=Rn(t,"a","bandPart");he(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[i,a]=s.shape.slice(-2);if(!(e<=i))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${i}).`);if(!(n<=a))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${a}).`);e<0&&(e=i),n<0&&(n=a);const o=ir(Gi(0,i,1,"int32"),[-1,1]),l=Gi(0,a,1,"int32"),u=xi(o,l),c=wi(Wa(u,Ks(+e,"int32")),ui(u,Ks(-n,"int32"))),h=ki([i,a],s.dtype);return ir(oa(ca(ir(s,[-1,i,a])).map((t=>da(c,t,h)))),r)}}),Va=An({pow_:function(t,e){let n=Rn(t,"base","pow"),s=Rn(e,"exp","pow");[n,s]=fn(n,s);const r={a:n,b:s};return wn.runKernelFunc(((t,e)=>{const r=t.pow(n,s);return e([n,s,r]),r}),r,null,"Pow")}});function Ga(t,e,n=null){if(0===t.rank)return Xs(t);if(1!==t.rank&&null===n)return Ga(ir(t,[-1]),e,n);if(1===t.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===e)return yi(Xs(t),n);if(e===1/0)return mi(Xs(t),n);if(e===-1/0)return Ei(Xs(t),n);if("euclidean"===e||2===e)return ia(yi(Va(Xs(t),Ks(2,"int32")),n));throw new Error("Error in norm: invalid ord value: "+e)}if(Array.isArray(n)&&2===n.length){if(1===e)return mi(yi(Xs(t),n[0]),n[1]-1);if(e===1/0)return mi(yi(Xs(t),n[1]),n[0]);if(e===-1/0)return Ei(yi(Xs(t),n[1]),n[0]);if("fro"===e||"euclidean"===e)return ia(yi(Si(t),n));throw new Error("Error in norm: invalid ord value: "+e)}throw new Error("Error in norm: invalid axis: "+n)}const Ha=An({norm_:function(t,e="euclidean",n=null,s=!1){const r=Ga(t=Rn(t,"x","norm"),e,n);let i=r.shape;if(s){const e=Ce(n,t.shape);i=tr(r.shape,e)}return ir(r,i)}}),ja=An({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,he(null!=t&&t.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=t[0].shape[0];for(let e=1;e<t.length;++e)he(t[e].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`))}else e=!0,t=ra(t,t.shape[0],0).map((t=>aa(t,[0])));he(t.length<=t[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`));const n=[],s=t;for(let e=0;e<t.length;++e)n.push(wn.tidy((()=>{let t=s[e];if(e>0)for(let s=0;s<e;++s){const e=di(yi(di(n[s],t)),n[s]);t=xi(t,e)}return Hr(t,Ha(t,"euclidean"))})));return e?oa(n,0):n}});function Ka(t,e=!1){return wn.tidy((()=>{he(2===t.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`));const n=t.shape[0],s=t.shape[1];let r=Qr(n),i=ps(t);const a=Na([[1]],[1,1]);let o=ps(a);const l=n>=s?s:n;for(let t=0;t<l;++t){const e=i,l=o,u=r;[o,i,r]=wn.tidy((()=>{const e=Yi(i,[t,t],[n-t,1]),l=Ha(e),u=Yi(i,[t,t],[1,1]),c=da(li(u,0),Na([[-1]]),Na([[1]])),h=xi(u,di(c,l)),d=Hr(e,h);o=1===d.shape[0]?ps(a):Fr([a,Yi(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const p=Ni(Hr(Ea(c,h),l)),f=Yi(i,[t,0],[n-t,s]),g=di(p,o),m=ar(o);if(0===t)i=xi(f,Ea(g,Ea(m,f)));else{const e=xi(f,Ea(g,Ea(m,f)));i=Fr([Yi(i,[0,0],[t,s]),e],0)}const x=ar(g),y=Yi(r,[0,t],[n,r.shape[1]-t]);if(0===t)r=xi(y,Ea(Ea(y,o),x));else{const e=xi(y,Ea(Ea(y,o),x));r=Fr([Yi(r,[0,0],[n,t]),e],1)}return[o,i,r]})),Gs([e,l,u])}return!e&&n>s&&(r=Yi(r,[0,0],[n,s]),i=Yi(i,[0,0],[s,s])),[r,i]}))}const qa=An({qr_:function(t,e=!1){if(he(t.rank>=2,(()=>"qr() requires input tensor to have a rank >= 2, but got rank "+t.rank)),2===t.rank)return Ka(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce(((t,e)=>t*e)),s=ca(ir(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),r=[],i=[];return s.forEach((t=>{const[n,s]=Ka(t,e);r.push(n),i.push(s)})),[ir(oa(r,0),t.shape),ir(oa(i,0),t.shape)]}}});var Xa;!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Xa||(Xa={}));const Ya=An({computeWeightedLoss_:function(t,e,n=Xa.SUM_BY_NONZERO_WEIGHTS){const s=Rn(t,"losses","computeWeightedLoss");let r=null;null!=e&&(r=Rn(e,"weights","computeWeightedLoss"));const i=null==r?s:di(s,r);if(n===Xa.NONE)return i;if(n===Xa.SUM)return yi(i);if(n===Xa.MEAN){if(null==r)return Ii(i);{const t=s.size/r.size,e=Hr(yi(i),yi(r));return t>1?Hr(e,Ks(t)):e}}if(n===Xa.SUM_BY_NONZERO_WEIGHTS){if(null==r)return Hr(yi(i),Ks(s.size));{const t=di(r,$i(s.shape)),e=ds(yi(Ti(t,Ks(0))),"float32");return Hr(yi(i),e)}}throw Error("Unknown reduction: "+n)}});An({absoluteDifference_:function(t,e,n,s=Xa.SUM_BY_NONZERO_WEIGHTS){const r=Rn(t,"labels","absoluteDifference"),i=Rn(e,"predictions","absoluteDifference");let a=null;null!=n&&(a=Rn(n,"weights","absoluteDifference")),de(r.shape,i.shape,"Error in absoluteDifference: ");const o=Xs(xi(r,i));return Ya(o,a,s)}}),An({cosineDistance_:function(t,e,n,s,r=Xa.SUM_BY_NONZERO_WEIGHTS){const i=Rn(t,"labels","cosineDistance"),a=Rn(e,"predictions","cosineDistance");let o=null;null!=s&&(o=Rn(s,"weights","cosineDistance")),de(i.shape,a.shape,"Error in cosineDistance: ");const l=Ks(1),u=xi(l,yi(di(i,a),n,!0));return Ya(u,o,r)}}),An({hingeLoss_:function(t,e,n,s=Xa.SUM_BY_NONZERO_WEIGHTS){let r=Rn(t,"labels","hingeLoss");const i=Rn(e,"predictions","hingeLoss");let a=null;null!=n&&(a=Rn(n,"weights","hingeLoss")),de(r.shape,i.shape,"Error in hingeLoss: ");const o=Ks(1);r=xi(di(Ks(2),r),o);const l=Hi(xi(o,di(r,i)));return Ya(l,a,s)}}),An({huberLoss_:function(t,e,n,s=1,r=Xa.SUM_BY_NONZERO_WEIGHTS){const i=Rn(t,"labels","huberLoss"),a=Rn(e,"predictions","huberLoss");let o=null;null!=n&&(o=Rn(n,"weights","huberLoss")),de(i.shape,a.shape,"Error in huberLoss: ");const l=Ks(s),u=Xs(xi(a,i)),c=Ri(u,l),h=xi(u,c),d=Ys(di(Ks(.5),Si(c)),di(l,h));return Ya(d,o,r)}}),An({logLoss_:function(t,e,n,s=1e-7,r=Xa.SUM_BY_NONZERO_WEIGHTS){const i=Rn(t,"labels","logLoss"),a=Rn(e,"predictions","logLoss");let o=null;null!=n&&(o=Rn(n,"weights","logLoss")),de(i.shape,a.shape,"Error in logLoss: ");const l=Ks(1),u=Ks(s),c=Ni(di(i,fi(Ys(a,u)))),h=di(xi(l,i),fi(Ys(xi(l,a),u))),d=xi(c,h);return Ya(d,o,r)}});const Ja=An({squaredDifference_:function(t,e){let n=Rn(t,"a","squaredDifference"),s=Rn(e,"b","squaredDifference");[n,s]=fn(n,s),Xr(n.shape,s.shape);const r={a:n,b:s};return wn.runKernelFunc(((t,e)=>{const r=t.squaredDifference(n,s);return e([n,s]),r}),r,null,Pt,{})}});An({meanSquaredError_:function(t,e,n,s=Xa.SUM_BY_NONZERO_WEIGHTS){const r=Rn(t,"labels","meanSquaredError"),i=Rn(e,"predictions","meanSquaredError");let a=null;null!=n&&(a=Rn(n,"weights","meanSquaredError")),de(r.shape,i.shape,"Error in meanSquaredError: ");const o=Ja(r,i);return Ya(o,a,s)}});const Za=An({log1p_:function(t){const e=Rn(t,"x","log1p"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.log1p(e);return n([e]),s}),n,null,nt)}});An({sigmoidCrossEntropy_:function(t,e,n,s=0,r=Xa.SUM_BY_NONZERO_WEIGHTS){let i=Rn(t,"multiClassLabels","sigmoidCrossEntropy");const a=Rn(e,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Rn(n,"weights","sigmoidCrossEntropy")),de(i.shape,a.shape,"Error in sigmoidCrossEntropy: "),s>0){const t=Ks(s),e=Ks(1),n=Ks(.5);i=Ys(di(i,xi(e,t)),di(n,t))}const l=function(t,e){const n=Rn(t,"labels","sigmoidCrossEntropyWithLogits"),s=Rn(e,"logits","sigmoidCrossEntropyWithLogits");de(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Hi(s),i=di(s,n),a=Za(gi(Ni(Xs(s))));return Ys(xi(r,i),a)}(i,a);return Ya(l,o,r)}});const Qa=An({logSumExp_:function(t,e=null,n=!1){const s=Rn(t,"x","logSumExp"),r=Ce(e,s.shape),i=mi(s,r,!0),a=xi(s,i),o=gi(a),l=yi(o,r),u=fi(l),c=Ys(ir(i,u.shape),u);if(n){const t=tr(c.shape,r);return ir(c,t)}return c}});An({softmaxCrossEntropy_:function(t,e,n,s=0,r=Xa.SUM_BY_NONZERO_WEIGHTS){let i=Rn(t,"onehotLabels","softmaxCrossEntropy");const a=Rn(e,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Rn(n,"weights","softmaxCrossEntropy")),de(i.shape,a.shape,"Error in softmaxCrossEntropy: "),s>0){const t=Ks(s),e=Ks(1),n=Ks(i.shape[1]);i=Ys(di(i,xi(e,t)),Hr(t,n))}const l=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was `+n);return js(((t,e,s)=>{const r=Qa(e,[n],!0),i=xi(ds(e,"float32"),r);s([t,i]);const a=Ni(di(i,t));return{value:yi(a,[n]),gradFunc:(t,e)=>{const[s,r]=e,i=tr(t.shape,[n]);return[di(ir(t,i),xi(ds(s,"float32"),gi(r))),di(ir(t,i),xi(gi(r),ds(s,"float32")))]}}}))(t,e)}(i,a);return Ya(l,o,r)}});const to={bandPart:Ua,gramSchmidt:ja,qr:qa};class eo extends qs{constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=wn.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const s=wn.registeredVariables[e];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:e+"/accum_grad",variable:Vs((()=>_i(s).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:e+"/accum_var",variable:Vs((()=>_i(s).variable(!1)))});const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const i=this.accumulatedGrads[n].variable,a=this.accumulatedUpdates[n].variable;Vs((()=>{const t=Ys(di(i,this.rho),di(Si(r),1-this.rho)),e=di(Hr(ia(Ys(a,this.epsilon)),ia(Ys(i,this.epsilon))),r),n=Ys(di(a,this.rho),di(Si(e),1-this.rho));i.assign(t),a.assign(n);const o=Ys(di(e,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Gs(this.accumulatedGrads.map((t=>t.variable))),Gs(this.accumulatedUpdates.map((t=>t.variable))))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(!1)}))),this.accumulatedUpdates=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}eo.className="Adadelta",zs(eo);class no extends qs{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const s=wn.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:e+"/accumulator",variable:Vs((()=>ti(s.shape,this.initialAccumulatorValue).variable(t)))}}const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const i=this.accumulatedGrads[n].variable;Vs((()=>{const t=Ys(i,Si(r));i.assign(t);const e=Ys(di(Hr(r,ia(Ys(t,wn.backend.epsilon()))),-this.learningRate),s);s.assign(e)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Gs(this.accumulatedGrads.map((t=>t.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t),this.accumulatedGrads=t.map((t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}no.className="Adagrad",zs(no);class so extends qs{constructor(t,e,n,s=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Vs((()=>{this.accBeta1=Ks(e).variable(),this.accBeta2=Ks(n).variable()})),null==s&&(this.epsilon=wn.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);Vs((()=>{const n=xi(1,this.accBeta1),s=xi(1,this.accBeta2);e.forEach(((e,r)=>{const i=wn.registeredVariables[e];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:e+"/m",variable:Vs((()=>_i(i).variable(!1)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:e+"/v",variable:Vs((()=>_i(i).variable(!1)))});const a=Array.isArray(t)?t[r].tensor:t[e];if(null==a)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=Ys(di(o,this.beta1),di(a,1-this.beta1)),c=Ys(di(l,this.beta2),di(Si(a),1-this.beta2)),h=Hr(u,n),d=Hr(c,s);o.assign(u),l.assign(c);const p=Ys(di(Hr(h,Ys(ia(d),this.epsilon)),-this.learningRate),i);i.assign(p)})),this.accBeta1.assign(di(this.accBeta1,this.beta1)),this.accBeta2.assign(di(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Gs(this.accumulatedFirstMoment.map((t=>t.variable))),null!=this.accumulatedSecondMoment&&Gs(this.accumulatedSecondMoment.map((t=>t.variable)))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t),Vs((()=>{this.accBeta1.assign(Va(this.beta1,this.iterations_+1)),this.accBeta2.assign(Va(this.beta2,this.iterations_+1))}));const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(!1)}))),this.accumulatedSecondMoment=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}so.className="Adam",zs(so);class ro extends qs{constructor(t,e,n,s=null,r=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Vs((()=>{this.iteration=Ks(0).variable(),this.accBeta1=Ks(e).variable()})),null==s&&(this.epsilon=wn.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);Vs((()=>{const n=xi(1,this.accBeta1),s=Hr(-this.learningRate,Ys(di(this.iteration,this.decay),1));e.forEach(((e,r)=>{const i=wn.registeredVariables[e];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:e+"/m",variable:_i(i).variable(!1)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:e+"/v",variable:_i(i).variable(!1)});const a=Array.isArray(t)?t[r].tensor:t[e];if(null==a)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=Ys(di(o,this.beta1),di(a,1-this.beta1)),c=di(l,this.beta2),h=Xs(a),d=hi(c,h);o.assign(u),l.assign(d);const p=Ys(di(Hr(s,n),Hr(u,Ys(d,this.epsilon))),i);i.assign(p)})),this.iteration.assign(Ys(this.iteration,1)),this.accBeta1.assign(di(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Gs(this.accumulatedFirstMoment.map((t=>t.variable))),null!=this.accumulatedWeightedInfNorm&&Gs(this.accumulatedWeightedInfNorm.map((t=>t.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}ro.className="Adamax",zs(ro);class io extends qs{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const r=wn.registeredVariables[e];Vs((()=>{const t=Ys(di(this.c,s),r);r.assign(t)}))})),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=Hs(Ks(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}io.className="SGD",zs(io);class ao extends io{constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=Ks(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const s=wn.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:e+"/momentum",variable:Vs((()=>_i(s).variable(t)))}}const r=this.accumulations[n].variable,i=Array.isArray(t)?t[n].tensor:t[e];null!=i&&Vs((()=>{let t;const e=Ys(di(this.m,r),i);t=this.useNesterov?Ys(di(this.c,Ys(i,di(e,this.m))),s):Ys(di(this.c,e),s),r.assign(e),s.assign(t)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Gs(this.accumulations.map((t=>t.variable)))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t),this.accumulations=t.map((t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}ao.className="Momentum",zs(ao);class oo extends qs{constructor(t,e=.9,n=0,s=null,r=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=wn.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const s=wn.registeredVariables[e],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:e+"/rms",variable:Vs((()=>_i(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:e+"/momentum",variable:Vs((()=>_i(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:e+"/mg",variable:Vs((()=>_i(s).variable(r)))});const i=Array.isArray(t)?t[n].tensor:t[e];if(null==i)return;const a=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;Vs((()=>{const t=Ys(di(a,this.decay),di(Si(i),1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,r=Ys(di(e,this.decay),di(i,1-this.decay)),l=Hr(di(i,this.learningRate),ia(xi(t,Ys(Si(r),this.epsilon)))),u=Ys(di(o,this.momentum),l);a.assign(t),e.assign(r),o.assign(u);const c=xi(s,u);s.assign(c)}else{const t=Ys(di(a,this.decay),di(Si(i),1-this.decay)),e=Ys(di(o,this.momentum),Hr(di(i,this.learningRate),ia(Ys(t,this.epsilon))));a.assign(t),o.assign(e);const n=xi(s,e);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Gs(this.accumulatedMeanSquares.map((t=>t.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Gs(this.accumulatedMeanGrads.map((t=>t.variable))),null!=this.accumulatedMoments&&Gs(this.accumulatedMoments.map((t=>t.variable)))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2,n=!1;this.accumulatedMeanSquares=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))),this.accumulatedMoments=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}oo.className="RMSProp",zs(oo);class lo{static sgd(t){return new io(t)}static momentum(t,e,n=!1){return new ao(t,e,n)}static rmsprop(t,e=.9,n=0,s=null,r=!1){return new oo(t,e,n,s,r)}static adam(t=.001,e=.9,n=.999,s=null){return new so(t,e,n,s)}static adadelta(t=.001,e=.95,n=null){return new eo(t,e,n)}static adamax(t=.002,e=.9,n=.999,s=null,r=0){return new ro(t,e,n,s,r)}static adagrad(t,e=.1){return new no(t,e)}}const uo={sgd:lo.sgd,momentum:lo.momentum,adadelta:lo.adadelta,adagrad:lo.adagrad,rmsprop:lo.rmsprop,adamax:lo.adamax,adam:lo.adam},co="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:t=>t();function ho(){return new Promise((t=>co((()=>t()))))}function po(t,e,n){return[n*("number"==typeof t?t:t[0]),e*("number"==typeof t?t:t[1])]}function fo(t,e,n,s=!0){let r=[];if(s)r=r.concat(e.slice(0)),r.push(t[0]/n),r=r.concat(t.slice(1));else{r=r.concat(t[0]);const n=e.length;for(let s=0;s<n;++s)r=r.concat([t[s+1]/e[s],e[s]]);r=r.concat(t.slice(n+1))}return r}function go(t,e,n=!0){const s=[];if(n){s.push(e);for(let n=e+1;n<t;++n)n<=2*e?(s.push(n),s.push(n-(e+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<t;++s)s>=2*e+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function mo(t,e,n,s=!0){const r=[];s?r.push(t[0]/n):r.push(t[0]*n);for(let n=1;n<t.length;++n)n<=e.length?s?r.push(e[n-1]*t[n]):r.push(t[n]/e[n-1]):r.push(t[n]);return r}function xo(t,e){const n=[0];for(let s=0;s<e;++s)n.push(t[s][0]);return n}function yo(t,e,n){const s=t.slice(0,1);for(let r=0;r<n;++r)s.push(t[r+1]-e[r][0]-e[r][1]);return s}function bo(t,e){if(t.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[e.rank-1]>t.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[e.rank-1]} vs. ${t.rank}`);if(0===t.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const n=e.shape,s=n[n.length-1];let r=1;for(let t=0;t<n.length-1;++t)r*=n[t];const i=t.shape,a=n.slice();a.pop();let o=1;for(let e=s;e<t.rank;++e)o*=i[e],a.push(i[e]);const l=[..._e(t.shape).map((t=>t/o)),1].slice(0,s);return[a,r,o,l]}function wo(t,e,n){const s=e.rank>1?e.shape[e.rank-1]:1,r=e.rank>1?e.rank-1:1,i="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${e.shape}, shape: ${t}`+`, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(i+` update.rank < ${r}. `);if(t.length<s+(n.rank-r))throw new Error(i+" Output shape length < "+(s+(n.rank-r)));if(n.rank!==r+t.length-s)throw new Error(i+" update.rank != "+(r+t.length-s));for(let t=0;t<r;++t)if(n.shape[t]!==e.shape[t])throw new Error(i+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-r;++e)if(n.shape[e+r]!==t[e+s])throw new Error(i+` updates.shape[${e+r}] (${n.shape[e+r]}) != shape[${e+r}] (${t[e+r]})`)}function vo(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}wo(n,e,t)}function Co(t,e,n){const s=e.shape.length,r=s>1?e.shape[s-1]:1,i=n.length;let a=1;for(let t=r;t<i;++t)a*=n[t];const o=r<1?1:r;return{sliceRank:r,numUpdates:ge(e.shape)/o,sliceSize:a,strides:[..._e(n.slice(0,r)),1],outputSize:ge(n)}}const ko=1.7580993408473768,$o=1.0507009873554805,Io=.3275911,Eo=.254829592,Ro=-.284496736,So=1.421413741,Ao=-1.453152027,No=1.061405429;function To(...t){u().getBool("IS_TEST")||console.warn(...t)}function Do(...t){u().getBool("IS_TEST")||console.log(...t)}function Fo(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let s=0;s<n.length;s+=2)n[s]=t[s/2],n[s+1]=e[s/2];return n}function _o(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let s=0;s<t.length;s+=2)e[s/2]=t[s],n[s/2]=t[s+1];return{real:e,imag:n}}function Oo(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),s=new Float32Array(e);for(let e=0;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],s[Math.floor(e/4)]=t[e+1];return{real:n,imag:s}}function Lo(t){const e=Math.floor(t.length/4),n=new Float32Array(e),s=new Float32Array(e);for(let e=2;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],s[Math.floor(e/4)]=t[e+1];return{real:n,imag:s}}function Bo(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Mo(t,e,n,s){t[2*s]=e,t[2*s+1]=n}function zo(t,e){const n=new Float32Array(t/2),s=new Float32Array(t/2);for(let r=0;r<Math.ceil(t/2);r++){const i=(e?2:-2)*Math.PI*(r/t);n[r]=Math.cos(i),s[r]=Math.sin(i)}return{real:n,imag:s}}function Po(t,e,n){const s=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(s),imag:Math.sin(s)}}function Wo(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();const e=ki(t.shape),s=ds(t,"float32"),r=n.complex(s,e);return e.dispose(),s.dispose(),r}if(!Ee(t.dtype,e))return wn.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){const s=n.real(t),r=ds(s,e);return s.dispose(),r}if("int32"===e)return n.int(t);if("bool"===e){const e=Ks(0,t.dtype),s=n.notEqual(t,e);return e.dispose(),s}throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`)}function Uo(t,e){return wn.makeTensorFromDataId(t.dataId,e,t.dtype)}function Vo(t,e,n){const s=(e-t)/(n-1),r=ze(n,"float32");r[0]=t;for(let t=1;t<r.length;t++)r[t]=r[t-1]+s;return Vi(r,"float32")}const Go={kernelName:"Abs",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>di(t,wa(ds(n,"float32"),-1))}}},Ho={kernelName:f,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Si(ds(n,"float32")),s=ia(xi(Ks(1),e));return Ni(Hr(t,s))}}}},jo={kernelName:g,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=ia(xi(Si(ds(n,"float32")),1));return Hr(t,e)}}}},Ko={kernelName:m,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=Xr(n.shape,s.shape);return{a:()=>{let e=t;const s=qr(n.shape,r);return s.length>0&&(e=yi(e,s)),ir(e,n.shape)},b:()=>{let e=t;const n=qr(s.shape,r);return n.length>0&&(e=yi(e,n)),ir(e,s.shape)}}}},qo={kernelName:x,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>_i(n)}}},Xo={kernelName:y,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>_i(n)}}},Yo={kernelName:b,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Hr(t,ia(xi(Ks(1),Si(ds(n,"float32")))))}}},Jo={kernelName:w,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=ia(Ys(Ks(1),Si(ds(n,"float32"))));return Hr(t,e)}}}},Zo={kernelName:k,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=Xr(n.shape,s.shape);return{a:()=>{const e=Ys(Si(n),Si(s));let i=di(t,Hr(s,e));const a=qr(n.shape,r);return a.length>0&&(i=yi(i,a)),ir(i,n.shape)},b:()=>{const e=Ys(Si(n),Si(s));let i=Ni(di(t,Hr(n,e)));const a=qr(s.shape,r);return a.length>0&&(i=yi(i,a)),ir(i,s.shape)}}}},Qo={kernelName:v,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Hr(t,Ys(Si(ds(n,"float32")),1))}}},tl={kernelName:C,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Hr(t,xi(Ks(1),Si(ds(n,"float32"))))}}},el=An({avgPool3dBackprop_:function(t,e,n,s,r=[1,1,1],i,a){const o=Rn(t,"dy","avgPool3dBackprop"),l=Rn(e,"input","avgPool3dBackprop");let u=o,c=l,h=!1;4===l.rank&&(h=!0,u=ir(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=ir(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),he(5===u.rank,(()=>"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+u.rank+".")),he(5===c.rank,(()=>"Error in avgPool3dBackprop: input must be rank 5 but got rank "+c.rank+".")),he(vr(s,r),(()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${s} and dilations '${r}'`)),null!=a&&he(xe(i),(()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${a} but got pad ${i}.`));const d={dy:u,input:c},p={filterSize:n,strides:s,dilations:r,pad:i,dimRoundingMode:a},f=wn.runKernelFunc((t=>{const e=dr(c.shape,n,s,r,i,a);return t.avgPool3dBackprop(u,c,e)}),d,null,"AvgPool3DBackprop",p);return h?ir(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),nl={kernelName:E,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{filterSize:r,strides:i,dilations:a,pad:o,dimRoundingMode:l}=n,u=null==a?[1,1,1]:a;return{x:()=>el(t,s,r,i,u,o,l)}}},sl=An({avgPoolBackprop_:function(t,e,n,s,r){const i=Rn(t,"dy","avgPoolBackprop"),a=Rn(e,"input","avgPoolBackprop");he(a.rank===i.rank,(()=>`Rank of input (${a.rank}) does not match rank of dy (${i.rank})`));let o=a,l=i,u=!1;3===a.rank&&(u=!0,o=ir(a,[1,a.shape[0],a.shape[1],a.shape[2]]),l=ir(i,[1,i.shape[0],i.shape[1],i.shape[2]])),he(4===l.rank,(()=>"Error in avgPoolBackprop: dy must be rank 4 but got rank "+l.rank+".")),he(4===o.rank,(()=>"Error in avgPoolBackprop: input must be rank 4 but got rank "+o.rank+"."));const c={dy:l,input:o},h={filterSize:n,strides:s,pad:r},d=wn.runKernelFunc((t=>{const e=hr(o.shape,n,s,1,r);return t.avgPoolBackprop(l,o,e)}),c,null,I,h);return u?ir(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),rl={kernelName:$,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{filterSize:r,strides:i,pad:a}=n;return{x:()=>sl(t,s,r,i,a)}}},il={kernelName:R,inputsToSave:["a","b"],gradFunc:(t,e,n)=>{const[s,r]=e,{transposeA:i,transposeB:a}=n;return i||a?!i&&a?{a:()=>Ea(t,r,!1,!1),b:()=>Ea(t,s,!0,!1)}:i&&!a?{a:()=>Ea(r,t,!1,!0),b:()=>Ea(s,t,!1,!1)}:{a:()=>Ea(r,t,!0,!0),b:()=>Ea(t,s,!0,!0)}:{a:()=>Ea(t,r,!1,!0),b:()=>Ea(s,t,!0,!1)}}},al=An({spaceToBatchND_:function(t,e,n){const s=Rn(t,"x","spaceToBatchND");he(s.rank>=1+e.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${e.length}`)),he(n.length===e.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`)),he(s.shape.reduce(((t,s,r)=>r>0&&r<=e.length?t&&(s+n[r-1][0]+n[r-1][1])%e[r-1]==0:t),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`));const r={x:s},i={blockShape:e,paddings:n};return wn.runKernelFunc((t=>t.spaceToBatchND(s,e,n)),r,null,Bt,i)}}),ol={kernelName:S,gradFunc:(t,e,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>al(t,s,r)}}},ll={kernelName:A,gradFunc:(t,e,n)=>{const s=n,r=s.inputShape,i=s.shape,a=Array.from(i);for(let t=r.length-1;t>=0;t--)if(r[t]===i[t])a[t]=1;else if(1!==r[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${i}].`);const o=[];for(let t=0;t<a.length;t++)a[t]>1&&o.push(t);return{x:()=>yi(t,o,!0)}}},ul={kernelName:N,gradFunc:t=>({x:()=>t.clone()})},cl={kernelName:T,gradFunc:t=>({x:()=>_i(t)})},hl={kernelName:D,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{clipValueMin:r,clipValueMax:i}=n;return{x:()=>da(wi(ui(s,r),Wa(s,i)),t,_i(t))}}},dl={kernelName:F,saveAllInputs:!0,gradFunc:(t,e,n)=>{const s=e.map((t=>t.shape)),{axis:r}=n,i=Ce(r,e[0].shape)[0],a=s.map((t=>t[i]));return ra(t,a,i).map((t=>()=>t))}},pl={kernelName:_,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[s,r]=e,{dilations:i,strides:a,pad:o,dataFormat:l}=n;return he(wr(i),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${i}'`)),{x:()=>Pr(s.shape,t,r,a,o,l),filter:()=>ya(s,t,r.shape,a,o,l)}}},fl={kernelName:O,inputsToSave:["dy","filter"],gradFunc:(t,e,n)=>{const[s,r]=e,{strides:i,pad:a,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>Mr(t,r,i,a,o,1,l),filter:()=>ya(t,s,r.shape,i,a,o,l)}}},gl=An({conv3DBackpropFilter_:function(t,e,n,s,r){let i=t;4===t.rank&&(i=ir(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let a=e;4===a.rank&&(a=ir(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),he(5===i.rank,(()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+i.shape+".")),he(5===a.rank,(()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+a.shape+".")),he(5===n.length,(()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+".")),he(i.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${i.shape[4]}) must match input depth in filter (${n[3]}.`)),he(a.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${a.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:i,y:a},l={strides:s,pad:r};return wn.runKernelFunc((t=>{const e=fr(i.shape,n,s,1,r);return t.conv3dDerFilter(i,a,e)}),o,null,"Conv3DBackpropFilterV2",l)}}),ml=An({conv3DBackpropInput_:function(t,e,n,s,r){he(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let i=t,a=e,o=!1;4===e.rank&&(o=!0,a=ir(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),i=[1,t[0],t[1],t[2],t[3]]);const l=i[4],u=a.shape[4];he(5===i.length,(()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+i.length+".")),he(5===a.rank,(()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+a.rank)),he(5===n.rank,(()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank)),he(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),he(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:a},h={pad:r},d=wn.runKernelFunc((t=>{const e=fr(i,n.shape,s,1,r);return t.conv3dDerInput(a,n,e)}),c,null,"Conv3DBackpropInputV2",h);return o?ir(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),xl={kernelName:L,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:s,strides:r,pad:i}=n;he(wr(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[a,o]=e;return{x:()=>ml(a.shape,t,o,r,i),filter:()=>gl(a,t,o.shape,r,i)}}},yl=An({sin_:function(t){const e=Rn(t,"x","sin"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.sin(e);return n([e]),s}),n,null,Tt)}}),bl={kernelName:B,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>di(Ni(yl(ds(n,"float32"))),t)}}},wl=An({sinh_:function(t){const e=Rn(t,"x","sinh"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.sinh(e);return n([e]),s}),n,null,Dt)}}),vl={kernelName:M,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>di(wl(ds(n,"float32")),t)}}},Cl=An({cumsum_:function(t,e=0,n=!1,s=!1){const r=Rn(t,"x","cumsum"),i={x:r},a={axis:e,exclusive:n,reverse:s};return wn.runKernelFunc(((t,i)=>{const a=nr([e],r.rank);let o=r;null!=a&&(o=ar(r,a));const l=rr(1,r.rank)[0];let u=t.cumsum(o,l,n,s);if(i([r]),null!=a){const t=sr(a);u=ar(u,t)}return u}),i,null,z,a)}}),kl={kernelName:z,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{axis:r,exclusive:i,reverse:a}=n;return{x:()=>{const e=nr([r],s.rank);let n=Cl(t,r,i,!a);return null!=e&&(n=ar(n,e)),n}}}},$l=An({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,s){let r=t;3===t.rank&&(r=ir(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let i=e;3===i.rank&&(i=ir(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const a={x:r,dy:i};return wn.runKernelFunc((t=>t.depthwiseConv2DDerFilter(r,i,s)),a,null,"DepthwiseConv2dNativeBackpropFilter")}}),Il=An({depthwiseConv2dNativeBackpropInput_:function(t,e,n,s){let r=e,i=!1;3===e.rank&&(i=!0,r=ir(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const a={dy:r},o=wn.runKernelFunc((t=>t.depthwiseConv2DDerInput(r,n,s)),a,null,"DepthwiseConv2dNativeBackpropInput");return i?ir(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),El={kernelName:P,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:s,strides:r,pad:i,dimRoundingMode:a}=n,o=null==s?[1,1]:s;he(wr(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=e;he(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),he(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),he(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),he(vr(r,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`)),null!=a&&he(xe(i),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${i}.`));const c=pr(l.shape,u.shape,r,o,i,a,!0);return{x:()=>Il(l.shape,t,u,c),filter:()=>$l(l,t,u.shape,c)}}},Rl={kernelName:W,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[s,r]=e,i={x:s,filter:r,dy:t},a={x:s,filter:r,dy:t};return{x:()=>wn.runKernel("Dilation2DBackpropInput",i,n),filter:()=>wn.runKernel("Dilation2DBackpropFilter",a,n)}}},Sl={kernelName:U,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=Xr(n.shape,s.shape);return{a:()=>{const e=Hr(t,ds(s,"float32")),i=qr(n.shape,r);return i.length>0?ir(yi(e,i),n.shape):e},b:()=>{let e=di(t,ds(n,"float32"));const i=qr(s.shape,r);i.length>0&&(e=ir(yi(e,i),s.shape));const a=Si(s);return Ni(Hr(e,ds(a,"float32")))}}}},Al={kernelName:"Elu",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,s=e=>e.eluDer(t,n),r={dy:t,y:n};return{x:()=>wn.runKernelFunc(s,r,null,"EluGrad")}}},Nl={kernelName:"Erf",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,s=di(gi(Ni(Si(n))),2/Math.sqrt(Math.PI));return{x:()=>di(t,s)}}},Tl={kernelName:V,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>di(t,n)}}},Dl={kernelName:G,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>di(t,gi(n))}}},Fl={kernelName:j,gradFunc:t=>({x:()=>_i(t)})},_l={kernelName:K,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=Xr(n.shape,s.shape);return{a:()=>{const e=Hr(t,ds(s,"float32")),i=qr(n.shape,r);return i.length>0?ir(yi(e,i),n.shape):e},b:()=>{let e=di(t,ds(n,"float32"));const i=qr(s.shape,r);i.length>0&&(e=ir(yi(e,i),s.shape));const a=Si(s);return Ni(Hr(e,ds(a,"float32")))}}}},Ol=An({rsqrt_:function(t){const e=Rn(t,"x","rsqrt"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.rsqrt(e);return n([e]),s}),n,null,Rt)}}),Ll={kernelName:q,inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:s}=n,[r,i,a,o]=e,l=null==o?Ks(1):o,u=qr(i.shape,r.shape),c=[];if(1===i.rank){for(let t=0;t<r.shape.length-1;++t)c.push(r.shape[t]);c.push(1)}const h=xi(r,i),d=di(t,l),p=Ol(Ys(a,Ks(s))),f=di(di(di(p,p),p),Ks(-.5));return{x:()=>1===i.rank?ir(di(di(t,Zr(ir(p,[1,1,1,i.shape[0]]),c)),l),r.shape):ir(di(di(t,p),l),r.shape),mean:()=>{let t=di(di(p,Ks(-1)),d);return 1===i.rank&&(t=yi(t,u)),ir(t,i.shape)},variance:()=>{let t=di(di(f,h),d);return 1===i.rank&&(t=yi(t,u)),ir(t,i.shape)},scale:()=>{const e=di(h,p);let n=di(t,e);return 1===i.rank&&(n=yi(n,u)),ir(n,i.shape)},offset:()=>{let e=t;return 1===i.rank&&(e=yi(e,u)),ir(e,i.shape)}}}},Bl=An({unsortedSegmentSum_:function(t,e,n){const s=Rn(t,"x","unsortedSegmentSum"),r=Rn(e,"segmentIds","unsortedSegmentSum","int32");he(xe(n),(()=>"numSegments must be of dtype int"));const i={x:s,segmentIds:r},a={numSegments:n};return wn.runKernelFunc(((t,e)=>{const i=t.unsortedSegmentSum(s,r,n);return e([r]),i}),i,null,Xt,a)}}),Ml={kernelName:X,inputsToSave:["x","indices"],gradFunc:(t,e,n)=>{const[s,r]=e,{axis:i}=n,a=Ce(i,s.shape)[0];return{x:()=>{const e=s.shape,n=r.size,o=e.slice(0,a),l=o.length,u=e.slice(i,e.length).slice(1),c=u.length,h=zl(0,l),d=zl(l+1,l+1+c),p=Pl([o,[n],u]),f=ir(t,p),g=ir(r,[n]),m=Pl([[l],h,d]),x=ar(f,m);let y=Bl(x,g,s.shape[a]);const b=sr(m);return y=ar(y,b),y},indices:()=>r}}};function zl(t,e){const n=[];for(let s=t;s<e;++s)n.push(s);return n}function Pl(t){const e=[];for(let n=0;n<t.length;++n)for(let s=0;s<t[n].length;++s)e.push(t[n][s]);return e}const Wl={kernelName:Y,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e;return{a:()=>_i(n),b:()=>_i(s)}}},Ul={kernelName:J,gradFunc:t=>({x:()=>ds(t,"float32")})},Vl={kernelName:Z,gradFunc:t=>({x:()=>_i(t)})},Gl={kernelName:Q,gradFunc:t=>({x:()=>_i(t)})},Hl={kernelName:tt,gradFunc:t=>({x:()=>_i(t)})},jl={kernelName:nt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Hr(t,Ys(n,1))}}},Kl={kernelName:et,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Hr(t,ds(n,"float32"))}}},ql={kernelName:st,inputsToSave:[],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[s]=e,{axis:r}=n;return{logits:()=>{const e=gi(s);return xi(t,di(yi(t,r,!0),e))}}}},Xl=An({localResponseNormalizationBackprop_:function(t,e,n,s=5,r=1,i=1,a=.5){const o={x:t,y:e,dy:n},l={depthRadius:s,bias:r,alpha:i,beta:a};return wn.runKernelFunc((o=>o.LRNGrad(n,t,e,s,r,i,a)),o,null,"LRNBackprop",l)}}),Yl={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[s,r]=e,{depthRadius:i,bias:a,alpha:o,beta:l}=n;return{x:()=>Xl(s,r,t,i,a,o,l)}}};function Jl(t,e,n,s,r){return e.rank<n.rank&&(e=ir(e,tr(e.shape,s))),t.rank<n.rank&&(t=ir(t,tr(t.shape,s))),{x:()=>{const s=di(t,ds(Yr(n,e),t.dtype));return null==r?s:ar(s,r)}}}const Zl={kernelName:rt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const s=n,{reductionIndices:r}=s,[i,a]=e,o=Ce(r,i.shape),l=nr(o,i.rank),u=Jl(t,a,i,o,l);return{x:()=>{let t=u.x();return null!=l&&(t=ar(t)),t}}}},Ql=An({less_:function(t,e){let n=Rn(t,"a","less"),s=Rn(e,"b","less");[n,s]=fn(n,s),Xr(n.shape,s.shape);const r={a:n,b:s};return wn.runKernelFunc((t=>t.less(n,s)),r,null,"Less")}}),tu={kernelName:it,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e;return{a:()=>di(t,ds(ui(n,s),"float32")),b:()=>di(t,ds(Ql(n,s),"float32"))}}},eu=An({maxPool3dBackprop_:function(t,e,n,s,r,i=[1,1,1],a,o){const l=Rn(t,"dy","maxPool3dBackprop"),u=Rn(e,"input","maxPool3dBackprop"),c=Rn(n,"output","maxPool3dBackprop");let h=l,d=u,p=c,f=!1;4===u.rank&&(f=!0,h=ir(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=ir(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),p=ir(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),he(5===h.rank,(()=>"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+".")),he(5===d.rank,(()=>"Error in maxPool3dBackprop: input must be rank 5 but got rank "+d.rank+".")),he(5===p.rank,(()=>"Error in maxPool3dBackprop: output must be rank 5 but got rank "+p.rank+".")),he(vr(r,i),(()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${i}'`)),null!=o&&he(xe(a),(()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`));const g={dy:h,input:d,output:p},m={filterSize:s,strides:r,dilations:i,pad:a,dimRoundingMode:o},x=wn.runKernelFunc((t=>{const e=dr(d.shape,s,r,i,a,o);return t.maxPool3dBackprop(h,d,p,e)}),g,null,"MaxPool3DBackprop",m);return f?ir(x,[x.shape[1],x.shape[2],x.shape[3],x.shape[4]]):x}}),nu={kernelName:lt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[s,r]=e,{filterSize:i,strides:a,dilations:o,pad:l,dimRoundingMode:u}=n,c=null==o?[1,1,1]:o;return{x:()=>eu(t,s,r,i,a,c,l,u)}}},su=An({maxPoolBackprop_:function(t,e,n,s,r,i,a){const o=Rn(t,"dy","maxPoolBackprop"),l=Rn(e,"input","maxPoolBackprop"),u=Rn(n,"output","maxPoolBackprop");he(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),he(4===o.rank,(()=>"Error in maxPoolBackprop: dy must be rank 4 but got rank "+o.rank+".")),he(4===l.rank,(()=>"Error in maxPoolBackprop: input must be rank 4 but got rank "+l.rank+".")),null!=a&&he(xe(i),(()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${a} but got pad ${i}.`));const c={dy:o,input:l,output:u},h={filterSize:s,strides:r,pad:i,dimRoundingMode:a};return wn.runKernelFunc((t=>{const e=hr(l.shape,s,r,1,i,a);return t.maxPoolBackprop(o,l,u,e)}),c,null,ot,h)}}),ru={kernelName:at,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[s,r]=e,{filterSize:i,strides:a,pad:o}=n;return{x:()=>su(t,s,r,i,a,o)}}},iu={kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const s=n,{axis:r}=s,[i,a]=e,o=Ce(r,i.shape),l=nr(o,i.rank),u=Jl(t,a,i,o,l);return{x:()=>{let t=u.x();return null!=l&&(t=ar(t)),t}}}},au={kernelName:ut,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e;return{a:()=>di(t,ds(Wa(n,s),"float32")),b:()=>di(t,ds(li(n,s),"float32"))}}},ou={kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=Xr(n.shape,s.shape);return{a:()=>{const e=qr(n.shape,r);return e.length>0?ir(yi(t,e),n.shape):t},b:()=>{const e=di(t,Ni(ei(Hr(n,s)))),i=qr(s.shape,r);return i.length>0?ir(yi(e,i),s.shape):e}}}},lu={kernelName:ct,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=Xr(n.shape,s.shape);return{a:()=>{const e=di(t,ds(s,"float32")),i=qr(n.shape,r);return i.length>0?ir(yi(e,i),n.shape):e},b:()=>{const e=di(t,ds(n,"float32")),i=qr(s.shape,r);return i.length>0?ir(yi(e,i),s.shape):e}}}},uu={kernelName:ht,gradFunc:t=>({x:()=>Ni(t)})},cu={kernelName:mt,inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>ki(n.shape,"float32")}}},hu={kernelName:gt,gradFunc:t=>({x:()=>_i(t)})},du={kernelName:xt,inputsToSave:["x"],gradFunc:(t,e,n)=>{const s=e[0],{paddings:r}=n,i=r.map((t=>t[0]));return{x:()=>Yi(t,i,s.shape)}}},pu={kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,e)=>{const[n,s,r]=e,i=n,a=s,o=Xr(i.shape,a.shape);return{a:()=>{const e=ds(a,"float32");let n=di(t,di(e,Va(i,xi(e,Ks(1)))));const s=qr(i.shape,o);return s.length>0&&(n=yi(n,s)),ir(n,i.shape)},b:()=>{const e=li(i,0),n=da(e,fi(i),_i(i));let s=di(t,di(r,n));const l=qr(a.shape,o);return l.length>0&&(s=yi(s,l)),ir(s,a.shape)}}}},fu={kernelName:yt,inputsToSave:["x","alpha"],gradFunc:(t,e)=>{const[n,s]=e,r=li(n,0);return{x:()=>da(r,t,di(t,s)),alpha:()=>{let e=da(r,_i(t),di(t,n));const i=qr(s.shape,t.shape);return i.length>0&&(e=yi(e,i)),ir(e,s.shape)}}}},gu={kernelName:bt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Hr(t,Ni(Si(n)))}}},mu={kernelName:$t,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,s=di(Wa(n,6),wa(n));return{x:()=>di(t,ds(s,"float32"))}}},xu={kernelName:wt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>di(t,ds(wa(n),"float32"))}}},yu={kernelName:vt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ir(t,n.shape)}}},bu={kernelName:kt,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[s]=e,r=e=>{const{alignCorners:r}=n;return e.resizeBilinearBackprop(t,s,r)},i={images:s};return{images:()=>wn.runKernelFunc(r,i,null,"ResizeBilinearGrad",n)}}},wu={kernelName:Ct,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[s]=e,r=e=>{const{alignCorners:r}=n;return e.resizeNearestNeighborBackprop(t,s,r)},i={images:s};return{images:()=>wn.runKernelFunc(r,i,null,"ResizeNearestNeighborGrad",n)}}},vu={kernelName:It,gradFunc:(t,e,n)=>{const{dims:s}=n,r=Ce(s,t.shape);return{x:()=>ji(t,r)}}},Cu={kernelName:Et,gradFunc:t=>({x:()=>_i(t)})},ku={kernelName:Rt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ni(Hr(t,di(Va(n,1.5),2)))}}},$u=An({logicalNot_:function(t){const e=Rn(t,"x","logicalNot","bool"),n={x:e};return wn.runKernelFunc((t=>t.logicalNot(e)),n,null,"LogicalNot")}}),Iu={kernelName:St,inputsToSave:["condition"],gradFunc:(t,e)=>{const[n]=e;return{condition:()=>ds(_i(n),"float32"),t:()=>di(t,ds(n,t.dtype)),e:()=>di(t,ds($u(n),t.dtype))}}},Eu={kernelName:At,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=li(n,Ks(0)),s=Ks(ko),r=Ks($o),i=di(t,r),a=di(di(t,s),gi(ds(n,"float32")));return da(e,i,a)}}}},Ru={kernelName:_t,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>di(t,di(n,xi(Ks(1),n)))}}},Su={kernelName:Ft,gradFunc:t=>({x:()=>_i(t)})},Au=An({cos_:function(t){const e=Rn(t,"x","cos"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.cos(e);return n([e]),s}),n,null,B)}}),Nu={kernelName:Tt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>di(Au(ds(n,"float32")),t)}}},Tu=An({cosh_:function(t){const e=Rn(t,"x","cosh"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.cosh(e);return n([e]),s}),n,null,M)}}),Du={kernelName:Dt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>di(Tu(ds(n,"float32")),t)}}},Fu={kernelName:Nt,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{begin:r,size:i}=n,a=s.shape,[o,l]=Ls(s,r,i),u=[];for(let e=0;e<t.rank;e++)u.push([o[e],a[e]-o[e]-l[e]]);return{x:()=>Li(t,u)}}},_u={kernelName:zt,outputsToSave:[!0],gradFunc:(t,e,n)=>{const[s]=e,{dim:r}=n,i=di(t,s);return{logits:()=>xi(i,di(yi(i,[r],!0),s))}}},Ou={kernelName:Ot,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>di(t,Xi(n))}}},Lu=An({batchToSpaceND_:function(t,e,n){const s=Rn(t,"x","batchToSpaceND"),r=e.reduce(((t,e)=>t*e));he(s.rank>=1+e.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${e.length}`)),he(n.length===e.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`)),he(s.shape[0]%r==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${r}`));const i={x:s},a={blockShape:e,crops:n};return wn.runKernelFunc((t=>t.batchToSpaceND(s,e,n)),i,null,S,a)}}),Bu={kernelName:Bt,gradFunc:(t,e,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>Lu(t,s,r)}}},Mu={kernelName:Mt,gradFunc:(t,e,n)=>{const{axis:s}=n;return{x:()=>Fr(t,s)}}},zu=[Go,Ho,jo,Ko,{kernelName:"AddN",saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach(((e,s)=>{n[s]=()=>t.clone()})),n}},qo,Xo,Yo,Jo,Zo,Qo,tl,nl,rl,il,ol,ll,ul,cl,hl,dl,fl,pl,xl,bl,vl,kl,El,Rl,Sl,Al,Nl,Tl,Dl,_l,Fl,Ll,Ml,Wl,Ul,Vl,Gl,Hl,jl,Kl,ql,Yl,Zl,Zl,tu,nu,ru,iu,au,ou,lu,uu,cu,hu,du,du,pu,fu,gu,mu,xu,yu,bu,wu,vu,Cu,ku,Iu,Eu,Ru,Su,Nu,Du,Fu,_u,Ou,Bu,Bu,Mu,Mu,{kernelName:Lt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Hr(t,di(ia(ds(n,"float32")),2))}}},{kernelName:Pt,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=Ks(2);return{a:()=>di(t,di(r,xi(n,s))),b:()=>di(t,di(r,xi(s,n)))}}},{kernelName:Wt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>di(t,di(ds(n,"float32"),2))}}},{kernelName:Jt,gradFunc:t=>({x:()=>_i(t)})},{kernelName:Ut,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=Xr(n.shape,s.shape);return{a:()=>{let e=t;const s=qr(n.shape,r);return s.length>0&&(e=yi(e,s)),ir(e,n.shape)},b:()=>{let e=t;const n=qr(s.shape,r);return n.length>0&&(e=yi(e,n)),ir(Ni(e),s.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,r=s.shape.slice(),{axis:i}=n;Ce(i,s.shape).forEach((t=>{r[t]=1}));const a=ir(t,r),o=di(a,$i(s.shape,"float32"));return{x:()=>o}}},{kernelName:Vt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Hr(t,Si(Au(n)))}}},{kernelName:Gt,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>di(xi(Ks(1),Si(n)),t)}}},{kernelName:Ht,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{reps:r}=n;return{x:()=>{let e=_i(s);if(1===s.rank)for(let n=0;n<r[0];++n)e=Ys(e,Yi(t,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let i=0;i<r[1];++i)e=Ys(e,Yi(t,[n*s.shape[0],i*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let i=0;i<r[1];++i)for(let a=0;a<r[2];++a)e=Ys(e,Yi(t,[n*s.shape[0],i*s.shape[1],a*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+s.rank+" tensors yet.");for(let n=0;n<r[0];++n)for(let i=0;i<r[1];++i)for(let a=0;a<r[2];++a)for(let o=0;o<r[3];++o)e=Ys(e,Yi(t,[n*s.shape[0],i*s.shape[1],a*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return e}}}},{kernelName:jt,gradFunc:(t,e,n)=>{const s=n,{perm:r}=s,i=sr(r);return{x:()=>ar(t,i)}}},{kernelName:qt,gradFunc:(t,e,n)=>{const s=n,{axis:r}=s;return{value:()=>oa(t,r)}}},{kernelName:Xt,inputsToSave:["segmentIds"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>function(t,e){const n=hi(e,_i(e)),s=oi(t,n);let r=ui(e,Ks(0,"int32"));const i=s.rank-r.rank;for(let t=0;t<i;++t)r=Jr(r,t+1);r=wi(r,$i(s.shape,"bool"));const a=_i(s);return da(r,s,a)}(t,n)}}},{kernelName:Yt,gradFunc:t=>({x:()=>_i(t)})}];for(const t of zu)ae(t);sn.prototype.abs=function(){return this.throwIfDisposed(),Xs(this)};const Pu=An({acos_:function(t){const e=Rn(t,"x","acos"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.acos(e);return n([e]),s}),n,null,f)}});sn.prototype.acos=function(){return this.throwIfDisposed(),Pu(this)};const Wu=An({acosh_:function(t){const e=Rn(t,"x","acosh"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.acosh(e);return n([e]),s}),n,null,g)}});sn.prototype.acosh=function(){return this.throwIfDisposed(),Wu(this)};const Uu=An({mod_:function(t,e){let n=Rn(t,"a","mod"),s=Rn(e,"b","mod");[n,s]=fn(n,s);const r={a:n,b:s};return wn.runKernelFunc(((t,e)=>{const r=t.mod(n,s);return e([n,s]),r}),r,null,"Mod")}}),Vu=An({addStrict_:function(t,e){Ps("strict variants of ops have been deprecated and will be removed in future");const n=Rn(t,"a","addStrict"),s=Rn(e,"b","addStrict");return de(n.shape,s.shape,"Error in addStrict: "),Ys(n,s)}}),Gu=An({divStrict_:function(t,e){Ps("strict variants of ops have been deprecated and will be removed in future");const n=Rn(t,"a","div"),s=Rn(e,"b","div");return de(n.shape,s.shape,"Error in divideStrict: "),Hr(n,s)}}),Hu=An({maximumStrict_:function(t,e){Ps("strict variants of ops have been deprecated and will be removed in future");const n=Rn(t,"a","maximumStrict"),s=Rn(e,"b","maximumStrict");return de(n.shape,s.shape,"Error in maximumStrict: "),hi(n,s)}}),ju=An({minimumStrict_:function(t,e){Ps("strict variants of ops have been deprecated and will be removed in future");const n=Rn(t,"a","minimumStrict"),s=Rn(e,"b","minimumStrict");return de(n.shape,s.shape,"Error in minimumStrict: "),Ri(n,s)}}),Ku=An({modStrict_:function(t,e){Ps("strict variants of ops have been deprecated and will be removed in future");const n=Rn(t,"a","modStrict"),s=Rn(e,"b","modStrict");return de(n.shape,s.shape,"Error in modStrict: "),Uu(n,s)}}),qu=An({mulStrict_:function(t,e){Ps("strict variants of ops have been deprecated and will be removed in future");const n=Rn(t,"a","mul"),s=Rn(e,"b","mul");return de(n.shape,s.shape,"Error in multiplyStrict: "),di(n,s)}}),Xu=An({powStrict_:function(t,e){return Ps("strict variants of ops have been deprecated and will be removed in future"),de(t.shape,e.shape,"Error in powStrict: "),Va(t,e)}}),Yu=An({squaredDifferenceStrict_:function(t,e){Ps("strict variants of ops have been deprecated and will be removed in future");const n=Rn(t,"a","squaredDifferenceStrict"),s=Rn(e,"b","squaredDifferenceStrict");return de(n.shape,s.shape,"Error in squaredDifferenceStrict: "),Ja(n,s)}}),Ju=An({subStrict_:function(t,e){Ps("strict variants of ops have been deprecated and will be removed in future");const n=Rn(t,"a","subStrict"),s=Rn(e,"b","subStrict");return de(n.shape,s.shape,"Error in subStrict: "),xi(n,s)}});sn.prototype.addStrict=function(t){return this.throwIfDisposed(),Vu(this,t)},sn.prototype.add=function(t){return this.throwIfDisposed(),Ys(this,t)},sn.prototype.all=function(t,e){return this.throwIfDisposed(),or(this,t,e)},sn.prototype.any=function(t,e){return this.throwIfDisposed(),lr(this,t,e)},sn.prototype.argMax=function(t){return this.throwIfDisposed(),ur(this,t)};const Zu=An({argMin_:function(t,e=0){let n=Rn(t,"x","argMin");const s={x:n},r={axis:e};return wn.runKernelFunc(((t,s)=>{s([n]),null==e&&(e=0);let r=Ce(e,n.shape);const i=nr(r,n.rank);return null!=i&&(n=ar(n,i),r=rr(r.length,n.rank)),t.argMin(n,r[0])}),s,null,y,r)}});sn.prototype.argMin=function(t){return this.throwIfDisposed(),Zu(this,t)},sn.prototype.asScalar=function(){return this.throwIfDisposed(),he(1===this.size,(()=>"The array must have only 1 element.")),ir(this,[])},sn.prototype.asType=function(t){return this.throwIfDisposed(),ds(this,t)},sn.prototype.as1D=function(){return this.throwIfDisposed(),ir(this,[this.size])},sn.prototype.as2D=function(t,e){return this.throwIfDisposed(),ir(this,[t,e])},sn.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),ir(this,[t,e,n])},sn.prototype.as4D=function(t,e,n,s){return this.throwIfDisposed(),ir(this,[t,e,n,s])},sn.prototype.as5D=function(t,e,n,s,r){return this.throwIfDisposed(),ir(this,[t,e,n,s,r])};const Qu=An({asin_:function(t){const e=Rn(t,"x","asin"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.asin(e);return n([e]),s}),n,null,b)}});sn.prototype.asin=function(){return this.throwIfDisposed(),Qu(this)};const tc=An({asinh_:function(t){const e=Rn(t,"x","asinh"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.asinh(e);return n([e]),s}),n,null,w)}});sn.prototype.asinh=function(){return this.throwIfDisposed(),tc(this)};const ec=An({atan_:function(t){const e=Rn(t,"x","atan"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.atan(e);return n([e]),s}),n,null,v)}});sn.prototype.atan=function(){return this.throwIfDisposed(),ec(this)};const nc=An({atan2_:function(t,e){let n=Rn(t,"a","atan2"),s=Rn(e,"b","atan2");[n,s]=fn(n,s);const r={a:n,b:s};return wn.runKernelFunc(((t,e)=>{const r=t.atan2(n,s);return e([n,s]),r}),r,null,k)}});sn.prototype.atan2=function(t){return this.throwIfDisposed(),nc(this,t)};const sc=An({atanh_:function(t){const e=Rn(t,"x","atanh"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.atanh(e);return n([e]),s}),n,null,C)}});sn.prototype.atanh=function(){return this.throwIfDisposed(),sc(this)},sn.prototype.avgPool=function(t,e,n,s){return this.throwIfDisposed(),kr(this,t,e,n,s)},sn.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),Lu(this,t,e)},sn.prototype.batchNorm=function(t,e,n,s,r){return this.throwIfDisposed(),Er(this,t,e,n,s,r)},sn.prototype.broadcastTo=function(t){return this.throwIfDisposed(),ha(this,t)},sn.prototype.cast=function(t){return this.throwIfDisposed(),ds(this,t)};const rc=An({ceil_:function(t){const e=Rn(t,"x","ceil"),n={x:e};return wn.runKernelFunc((t=>t.ceil(e)),n,null,T)}});sn.prototype.ceil=function(){return this.throwIfDisposed(),rc(this)},sn.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),Nr(this,t,e)},sn.prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof sn&&(t=[t]),Fr([this,...t],e)},sn.prototype.conv1d=function(t,e,n,s,r,i){return this.throwIfDisposed(),zr(this,t,e,n,s,r,i)},sn.prototype.conv2dTranspose=function(t,e,n,s,r){return this.throwIfDisposed(),Wr(this,t,e,n,s,r)},sn.prototype.conv2d=function(t,e,n,s,r,i){return this.throwIfDisposed(),Mr(this,t,e,n,s,r,i)},sn.prototype.cos=function(){return this.throwIfDisposed(),Au(this)},sn.prototype.cosh=function(){return this.throwIfDisposed(),Tu(this)},sn.prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),Cl(this,t,e,n)};const ic=An({depthToSpace_:function(t,e,n="NHWC"){const s=Rn(t,"x","depthToSpace"),r="NHWC"===n?s.shape[1]:s.shape[2],i="NHWC"===n?s.shape[2]:s.shape[3],a="NHWC"===n?s.shape[3]:s.shape[1];he(r*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${e}  for depthToSpace with input shape\n    ${s.shape}`)),he(i*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${i} and ${e} for depthToSpace with input shape\n        ${s.shape}`)),he(a%(e*e)==0,(()=>`Dimension size must be evenly divisible by ${e*e} but is ${a} for depthToSpace with input shape ${s.shape}`));const o={x:s},l={blockSize:e,dataFormat:n};return wn.runKernelFunc((t=>t.depthToSpace(s,e,n)),o,null,"DepthToSpace",l)}});sn.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),ic(this,t,e)},sn.prototype.depthwiseConv2D=function(t,e,n,s,r,i){return Ps("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),Vr(this,t,e,n,s,r,i)},sn.prototype.depthwiseConv2d=function(t,e,n,s,r,i){return this.throwIfDisposed(),Vr(this,t,e,n,s,r,i)};const ac=An({dilation2d_:function(t,e,n,s,r=[1,1],i="NHWC"){const a=Rn(t,"x","dilation2d"),o=Rn(e,"filter","dilation2d");he(3===a.rank||4===a.rank,(()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+a.rank+".")),he(3===o.rank,(()=>"Error in dilation2d: filter must be rank 3, but got rank "+o.rank+".")),he("NHWC"===i,(()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+i));let l=a,u=!1;3===a.rank&&(l=ir(a,[1,a.shape[0],a.shape[1],a.shape[2]]),u=!0);const c={x:l,filter:o},h={strides:n,pad:s,dilations:r},d=wn.runKernel(W,c,h);return u?ir(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});sn.prototype.dilation2d=function(t,e,n,s,r){return this.throwIfDisposed(),ac(this,t,e,n,s,r)};const oc=An({divNoNan_:function(t,e){let n=Rn(t,"a","div"),s=Rn(e,"b","div");[n,s]=fn(n,s);const r=Hr(n,s),i=_i(r),a=Yr(s,i);return da(a,i,r)}});sn.prototype.divNoNan=function(t){return this.throwIfDisposed(),oc(this,t)},sn.prototype.divStrict=function(t){return this.throwIfDisposed(),Gu(this,t)},sn.prototype.div=function(t){return this.throwIfDisposed(),Hr(this,t)};const lc=An({dot_:function(t,e){const n=Rn(t,"t1","dot"),s=Rn(e,"t2","dot");he(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const r=1===n.rank?n.size:n.shape[1],i=1===s.rank?s.size:s.shape[0];if(he(r===i,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${i}.`)),1===n.rank&&1===s.rank){const t=ir(n,[1,-1]),e=ir(s,[-1,1]),r=Ea(t,e);return ir(r,[])}if(1===n.rank&&2===s.rank){const t=ir(n,[1,-1]),e=ir(s,[s.shape[0],s.shape[1]]),r=Ea(t,e);return ir(r,[r.size])}if(2===n.rank&&1===s.rank){const t=ir(s,[-1,1]),e=Ea(n,t);return ir(e,[e.size])}{const t=ir(s,[s.shape[0],s.shape[1]]);return Ea(n,t)}}});sn.prototype.dot=function(t){return this.throwIfDisposed(),lc(this,t)},sn.prototype.elu=function(){return this.throwIfDisposed(),jr(this)};const uc=An({equalStrict_:function(t,e){Ps("strict variants of ops have been deprecated and will be removed in future");const n=Rn(t,"a","equalStrict"),s=Rn(e,"b","equalStrict");return de(n.shape,s.shape,"Error in equalStrict: "),Yr(n,s)}}),cc=An({greaterEqualStrict_:function(t,e){Ps("strict variants of ops have been deprecated and will be removed in future");const n=Rn(t,"a","greaterEqualStrict"),s=Rn(e,"b","greaterEqualStrict");return de(n.shape,s.shape,"Error in greaterEqualStrict: "),ui(n,s)}}),hc=An({greaterStrict_:function(t,e){Ps("strict variants of ops have been deprecated and will be removed in future");const n=Rn(t,"a","greaterStrict"),s=Rn(e,"b","greaterStrict");return de(n.shape,s.shape,"Error in greaterStrict: "),li(n,s)}}),dc=An({lessEqualStrict_:function(t,e){Ps("strict variants of ops have been deprecated and will be removed in future");const n=Rn(t,"a","lessEqualStrict"),s=Rn(e,"b","lessEqualStrict");return de(n.shape,s.shape,"Error in lessEqualStrict: "),Wa(n,s)}}),pc=An({lessStrict_:function(t,e){Ps("strict variants of ops have been deprecated and will be removed in future");const n=Rn(t,"a","lessStrict"),s=Rn(e,"b","lessStrict");return de(n.shape,s.shape,"Error in lessStrict: "),Ql(n,s)}}),fc=An({notEqualStrict_:function(t,e){Ps("strict variants of ops have been deprecated and will be removed in future");const n=Rn(t,"a","notEqualStrict"),s=Rn(e,"b","notEqualStrict");return de(n.shape,s.shape,"Error in notEqualStrict: "),Ti(n,s)}});sn.prototype.equalStrict=function(t){return this.throwIfDisposed(),uc(this,t)},sn.prototype.equal=function(t){return this.throwIfDisposed(),Yr(this,t)};const gc=An({erf_:function(t){let e=Rn(t,"x","erf");he("int32"===e.dtype||"float32"===e.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===e.dtype&&(e=ds(e,"float32"));const n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.erf(e);return n([e]),s}),n,null,"Erf")}});sn.prototype.erf=function(){return this.throwIfDisposed(),gc(this)},sn.prototype.exp=function(){return this.throwIfDisposed(),gi(this)},sn.prototype.expandDims=function(t){return this.throwIfDisposed(),Jr(this,t)};const mc=An({expm1_:function(t){const e=Rn(t,"x","expm1"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.expm1(e);return n([e]),s}),n,null,G)}});sn.prototype.expm1=function(){return this.throwIfDisposed(),mc(this)},sn.prototype.fft=function(){return this.throwIfDisposed(),fa(this)},sn.prototype.flatten=function(){return this.throwIfDisposed(),ir(this,[this.size])},sn.prototype.floor=function(){return this.throwIfDisposed(),ei(this)},sn.prototype.floorDiv=function(t){return this.throwIfDisposed(),Gr(this,t)},sn.prototype.gather=function(t,e){return this.throwIfDisposed(),oi(this,t,e)},sn.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),cc(this,t)},sn.prototype.greaterEqual=function(t){return this.throwIfDisposed(),ui(this,t)},sn.prototype.greaterStrict=function(t){return this.throwIfDisposed(),hc(this,t)},sn.prototype.greater=function(t){return this.throwIfDisposed(),li(this,t)},sn.prototype.ifft=function(){return this.throwIfDisposed(),ma(this)},sn.prototype.irfft=function(){return this.throwIfDisposed(),xa(this)};const xc=An({isFinite_:function(t){const e=Rn(t,"x","isFinite"),n={x:e};return wn.runKernelFunc((t=>t.isFinite(e)),n,null,Z)}});sn.prototype.isFinite=function(){return this.throwIfDisposed(),xc(this)};const yc=An({isInf_:function(t){const e=Rn(t,"x","isInf"),n={x:e};return wn.runKernelFunc((t=>t.isInf(e)),n,null,Q)}});sn.prototype.isInf=function(){return this.throwIfDisposed(),yc(this)};const bc=An({isNaN_:function(t){const e=Rn(t,"x","isNaN"),n={x:e};return wn.runKernelFunc((t=>t.isNaN(e)),n,null,tt)}});sn.prototype.isNaN=function(){return this.throwIfDisposed(),bc(this)},sn.prototype.leakyRelu=function(t){return this.throwIfDisposed(),pi(this,t)},sn.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),dc(this,t)},sn.prototype.lessEqual=function(t){return this.throwIfDisposed(),Wa(this,t)},sn.prototype.lessStrict=function(t){return this.throwIfDisposed(),pc(this,t)},sn.prototype.less=function(t){return this.throwIfDisposed(),Ql(this,t)};const wc=An({localResponseNormalization_:function(t,e=5,n=1,s=1,r=.5){const i=Rn(t,"x","localResponseNormalization");he(4===i.rank||3===i.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${i.rank}.`)),he(xe(e),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`));let a=i,o=!1;3===i.rank&&(o=!0,a=ir(i,[1,i.shape[0],i.shape[1],i.shape[2]]));const l={x:a},u={depthRadius:e,bias:n,alpha:s,beta:r},c=wn.runKernelFunc(((t,i)=>{const o=t.localResponseNormalization4D(a,e,n,s,r);return i([a,o]),o}),l,null,"LRN",u);return o?ir(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});sn.prototype.localResponseNormalization=function(t,e,n,s){return this.throwIfDisposed(),wc(this,t,e,n,s)};const vc=An({logSigmoid_:function(t){const e=Rn(t,"x","logSigmoid");return js((t=>({value:Ni(na(Ni(t))),gradFunc:e=>di(e,Xi(Ni(t)))})))(e)}});sn.prototype.logSigmoid=function(){return this.throwIfDisposed(),vc(this)},sn.prototype.logSoftmax=function(t){return this.throwIfDisposed(),bi(this,t)},sn.prototype.logSumExp=function(t,e){return this.throwIfDisposed(),Qa(this,t,e)},sn.prototype.log=function(){return this.throwIfDisposed(),fi(this)},sn.prototype.log1p=function(){return this.throwIfDisposed(),Za(this)},sn.prototype.logicalAnd=function(t){return this.throwIfDisposed(),wi(this,t)},sn.prototype.logicalNot=function(){return this.throwIfDisposed(),$u(this)};const Cc=An({logicalOr_:function(t,e){const n=Rn(t,"a","logicalOr","bool"),s=Rn(e,"b","logicalOr","bool");Xr(n.shape,s.shape);const r={a:n,b:s};return wn.runKernelFunc((t=>t.logicalOr(n,s)),r,null,"LogicalOr")}});sn.prototype.logicalOr=function(t){return this.throwIfDisposed(),Cc(this,t)};const kc=An({logicalXor_:function(t,e){const n=Rn(t,"a","logicalXor","bool"),s=Rn(e,"b","logicalXor","bool");return Xr(n.shape,s.shape),wi(Cc(t,e),$u(wi(t,e)))}});sn.prototype.logicalXor=function(t){return this.throwIfDisposed(),kc(this,t)},sn.prototype.matMul=function(t,e,n){return this.throwIfDisposed(),Ea(this,t,e,n)},sn.prototype.maxPool=function(t,e,n,s){return this.throwIfDisposed(),vi(this,t,e,n,s)},sn.prototype.max=function(t,e){return this.throwIfDisposed(),mi(this,t,e)},sn.prototype.maximumStrict=function(t){return this.throwIfDisposed(),Hu(this,t)},sn.prototype.maximum=function(t){return this.throwIfDisposed(),hi(this,t)},sn.prototype.mean=function(t,e){return this.throwIfDisposed(),Ii(this,t,e)},sn.prototype.min=function(t,e){return this.throwIfDisposed(),Ei(this,t,e)},sn.prototype.minimumStrict=function(t){return this.throwIfDisposed(),ju(this,t)},sn.prototype.minimum=function(t){return this.throwIfDisposed(),Ri(this,t)},sn.prototype.modStrict=function(t){return this.throwIfDisposed(),Ku(this,t)},sn.prototype.mod=function(t){return this.throwIfDisposed(),Uu(this,t)},sn.prototype.mulStrict=function(t){return this.throwIfDisposed(),qu(this,t)},sn.prototype.mul=function(t){return this.throwIfDisposed(),di(this,t)},sn.prototype.neg=function(){return this.throwIfDisposed(),Ni(this)},sn.prototype.norm=function(t,e,n){return this.throwIfDisposed(),Ha(this,t,e,n)},sn.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),fc(this,t)},sn.prototype.notEqual=function(t){return this.throwIfDisposed(),Ti(this,t)},sn.prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),Di(this,t,e,n)},sn.prototype.onesLike=function(){return this.throwIfDisposed(),Oi(this)},sn.prototype.pad=function(t,e){return this.throwIfDisposed(),Li(this,t,e)};const $c=An({pool_:function(t,e,n,s,r,i){null==r&&(r=[1,1]),null==i&&(i=1),0===s&&(s="valid");const a=Rn(t,"x","maxPool");let o=a,l=!1;3===a.rank&&(l=!0,o=ir(a,[1,a.shape[0],a.shape[1],a.shape[2]])),he(vr(i,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${i} and dilations '${r}'`));const u=hr(o.shape,e,i,r,s),c=[u.dilationHeight,u.dilationWidth];let h;h="same"===s?function(t,e){const n=t.map(((t,n)=>t+(t-1)*(e[n]-1))).map((t=>t-1)),s=n.map((t=>Math.floor(t/2))),r=n.map(((t,e)=>t-s[e]));return n.map(((t,e)=>[s[e],r[e]]))}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const d=1===c[0]&&1===c[1],[p,f]=function(t,e,n){const s=n.map((t=>t[0])),r=n.map((t=>t[1])),i=t.concat(s,r),a=e.map(((t,e)=>(t-i[e]%t)%t)),o=r.map(((t,e)=>t+a[e]));return[e.map(((t,e)=>[s[e],o[e]])),e.map(((t,e)=>[0,a[e]]))]}([u.inHeight,u.inWidth],c,h),g=d?s:"valid",m=d?o:al(o,c,p),x=("avg"===n?()=>kr(m,e,i,g):()=>vi(m,e,i,g))(),y=d?x:Lu(x,c,f);return l?ir(y,[y.shape[1],y.shape[2],y.shape[3]]):y}});sn.prototype.pool=function(t,e,n,s,r){return this.throwIfDisposed(),$c(this,t,e,n,s,r)},sn.prototype.powStrict=function(t){return this.throwIfDisposed(),Xu(this,t)},sn.prototype.pow=function(t){return this.throwIfDisposed(),Va(this,t)},sn.prototype.prelu=function(t){return this.throwIfDisposed(),Bi(this,t)};const Ic=An({prod_:function(t,e=null,n=!1){let s=Rn(t,"x","prod");const r={x:s},i={axis:e,keepDims:n};return wn.runKernelFunc((t=>{"bool"===s.dtype&&(s=ds(s,"int32"));const r=Ce(e,s.shape),i=nr(r,s.rank);let a=r,o=s;null!=i&&(o=ar(s,i),a=rr(a.length,s.rank));let l=t.prod(o,a);if(n){const t=tr(l.shape,r);l=ir(l,t)}return l}),r,null,"Prod",i)}});sn.prototype.prod=function(t,e){return this.throwIfDisposed(),Ic(this,t,e)};const Ec=An({reciprocal_:function(t){const e=Rn(t,"x","reciprocal"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.reciprocal(e);return n([e]),s}),n,null,bt)}});sn.prototype.reciprocal=function(){return this.throwIfDisposed(),Ec(this)},sn.prototype.relu=function(){return this.throwIfDisposed(),Hi(this)},sn.prototype.relu6=function(){return this.throwIfDisposed(),ba(this)},sn.prototype.reshapeAs=function(t){return this.throwIfDisposed(),ir(this,t.shape)},sn.prototype.reshape=function(t){return this.throwIfDisposed(),ir(this,t)},sn.prototype.resizeBilinear=function(t,e){return this.throwIfDisposed(),za(this,t,e)},sn.prototype.resizeNearestNeighbor=function(t,e){return this.throwIfDisposed(),Pa(this,t,e)},sn.prototype.reverse=function(t){return this.throwIfDisposed(),ji(this,t)},sn.prototype.rfft=function(){return this.throwIfDisposed(),ga(this)};const Rc=An({round_:function(t){const e=Rn(t,"x","round"),n={x:e};return wn.runKernelFunc((t=>t.round(e)),n,null,Et)}});sn.prototype.round=function(){return this.throwIfDisposed(),Rc(this)},sn.prototype.rsqrt=function(){return this.throwIfDisposed(),Ol(this)},sn.prototype.selu=function(){return this.throwIfDisposed(),Ki(this)},sn.prototype.separableConv2d=function(t,e,n,s,r,i){return this.throwIfDisposed(),qi(this,t,e,n,s,r,i)},sn.prototype.sigmoid=function(){return this.throwIfDisposed(),Xi(this)};const Sc=An({sign_:function(t){const e=Rn(t,"x","sign"),n={x:e};return wn.runKernelFunc((t=>t.sign(e)),n,null,Ft)}});sn.prototype.sign=function(){return this.throwIfDisposed(),Sc(this)},sn.prototype.sin=function(){return this.throwIfDisposed(),yl(this)},sn.prototype.sinh=function(){return this.throwIfDisposed(),wl(this)},sn.prototype.slice=function(t,e){return this.throwIfDisposed(),Yi(this,t,e)},sn.prototype.softmax=function(t){return this.throwIfDisposed(),ea(this,t)},sn.prototype.softplus=function(){return this.throwIfDisposed(),na(this)},sn.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),al(this,t,e)},sn.prototype.split=function(t,e){return this.throwIfDisposed(),ra(this,t,e)},sn.prototype.sqrt=function(){return this.throwIfDisposed(),ia(this)},sn.prototype.square=function(){return this.throwIfDisposed(),Si(this)},sn.prototype.squaredDifference=function(t){return this.throwIfDisposed(),Ja(this,t)},sn.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),Yu(this,t)},sn.prototype.squeeze=function(t){return this.throwIfDisposed(),aa(this,t)},sn.prototype.stack=function(t,e){this.throwIfDisposed();const n=t instanceof sn?[this,t]:[this,...t];return oa(n,e)},sn.prototype.step=function(t){return this.throwIfDisposed(),wa(this,t)};const Ac=An({stridedSlice_:function(t,e,n,s,r=0,i=0,a=0,o=0,l=0){let u=Rn(t,"x","stridedSlice");const c={x:u},h={begin:e,end:n,strides:s,beginMask:r,endMask:i,ellipsisMask:a,newAxisMask:o,shrinkAxisMask:l};return wn.runKernelFunc((t=>{null==s&&(s=new Array(e.length));const c=ks(a);if(c.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==a&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==a&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=u.rank-e.length,d=ks(o),p=u.shape.slice();d.forEach((t=>{e[t]=0,n[t]=1,p.splice(t,0,1)})),u=ir(u,p);const{begin:f,end:g,strides:m}=Ss(u.shape,c,h,e,n,s,r,i,a);e=f,n=g,s=m;const x=ks(l);x.forEach((t=>{n[t]=e[t]+1,s[t]=1}));const y=$s(e,n,s),b=y.filter(((t,e)=>-1===x.indexOf(e)));if(s.every((t=>1===t)))return ir(Yi(u,e,y),b);const w=t.stridedSlice(u,e,n,s);return ir(w,b)}),c,null,"StridedSlice",h)}});sn.prototype.stridedSlice=function(t,e,n,s,r,i,a,o){return this.throwIfDisposed(),Ac(this,t,e,n,s,r,i,a,o)},sn.prototype.subStrict=function(t){return this.throwIfDisposed(),Ju(this,t)},sn.prototype.sub=function(t){return this.throwIfDisposed(),xi(this,t)},sn.prototype.sum=function(t,e){return this.throwIfDisposed(),yi(this,t,e)};const Nc=An({tan_:function(t){const e=Rn(t,"x","tan"),n={x:e};return wn.runKernelFunc(((t,n)=>{const s=t.tan(e);return n([e]),s}),n,null,Vt)}});sn.prototype.tan=function(){return this.throwIfDisposed(),Nc(this)},sn.prototype.tanh=function(){return this.throwIfDisposed(),la(this)},sn.prototype.tile=function(t){return this.throwIfDisposed(),Zr(this,t)},sn.prototype.toBool=function(){return this.throwIfDisposed(),ds(this,"bool")},sn.prototype.toFloat=function(){return this.throwIfDisposed(),ds(this,"float32")},sn.prototype.toInt=function(){return this.throwIfDisposed(),ds(this,"int32")};const Tc=An({topk_:function(t,e=1,n=!0){const s=Rn(t,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(e>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got `+e);const i={x:s},a={k:e,sorted:n},[o,l]=wn.runKernelFunc((t=>t.topk(s,e,n)),i,null,"TopK",a);return{values:o,indices:l}}});sn.prototype.topk=function(t,e){return this.throwIfDisposed(),Tc(this,t,e)},sn.prototype.transpose=function(t){return this.throwIfDisposed(),ar(this,t)};const Dc=An({unique_:function(t,e=0){const n=Rn(t,"x","unique",null);he(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},r={axis:e},[i,a]=wn.runKernel(Kt,s,r);return{values:i,indices:a}}});sn.prototype.unique=function(t){return this.throwIfDisposed(),Dc(this,t)},sn.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),Bl(this,t,e)},sn.prototype.unstack=function(t){return this.throwIfDisposed(),ca(this,t)},sn.prototype.where=function(t,e){return this.throwIfDisposed(),da(t,this,e)},sn.prototype.zerosLike=function(){return this.throwIfDisposed(),_i(this)};const Fc={},_c={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Oc(t){if(!(t in Fc)){const e=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);return e.addEventListener("webglcontextlost",(e=>{e.preventDefault(),delete Fc[t]}),!1),1===t?e.getContext("webgl",_c)||e.getContext("experimental-webgl",_c):e.getContext("webgl2",_c)}(t);if(null===e)return console.log("Could not get context for WebGL version",t),null;Fc[t]=e}const e=Fc[t];return e.isContextLost()?(delete Fc[t],Oc(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Fc[t])}var Lc,Bc,Mc;function zc(t,e){return[e,t]}function Pc(t){const e=ge(t);return ye(Math.ceil(e/4))}function Wc(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Uc(t,e){const n=t;let s,r,i,a,o,l,c,h,d,p;return 2===u().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,i=n.RGBA16F,a=n.RGBA32F,o=n.RED,c=4,h=1,d=n.HALF_FLOAT,p=n.FLOAT):(s=t.RGBA,r=t.RGBA,i=t.RGBA,a=n.RGBA,o=t.RGBA,c=4,h=4,d=null!=e?e.HALF_FLOAT_OES:null,p=t.FLOAT),l=t.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:i,internalFormatPackedFloat:a,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:c,defaultNumChannels:h,textureTypeHalfFloat:d,textureTypeFloat:p}}function Vc(t,e){const n=e();return u().getBool("DEBUG")&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}(t,e))}(t),n}function Gc(t){return!!(u().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function Hc(t,e){return Qc(t,(()=>t.getExtension(e)),'Extension "'+e+'" not supported on this browser.')}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(Lc||(Lc={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(Bc||(Bc={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(Mc||(Mc={}));const jc=/ERROR: [0-9]+:([0-9]+):/g;function Kc(t,e){if(Vc(t,(()=>t.validateProgram(e))),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function qc(t,e,n,s,r,i,a){const o=t.getAttribLocation(e,n);return-1!==o&&(Vc(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,s))),Vc(t,(()=>t.vertexAttribPointer(o,r,t.FLOAT,!1,i,a))),Vc(t,(()=>t.enableVertexAttribArray(o))),!0)}function Xc(t,e,n,s){Vc(t,(()=>function(t,e,n){(function(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=e+t.TEXTURE0;if(s<t.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(t,n),Vc(t,(()=>t.activeTexture(t.TEXTURE0+n))),Vc(t,(()=>t.bindTexture(t.TEXTURE_2D,e)))}(t,e,s))),Vc(t,(()=>t.uniform1i(n,s)))}function Yc(t,e,n){Vc(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,n))),Vc(t,(()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)))}function Jc(t,e){Vc(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,e))),Vc(t,(()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)))}function Zc(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}(t,e))}function Qc(t,e,n){const s=Vc(t,(()=>e()));if(null==s)throw new Error(n);return s}function th(t,e=2){return ge(t.slice(0,t.length-e))}function eh(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function nh(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[th(t),...eh(t)]),e}function sh(t){return t%2==0}function rh(t,e){if(me(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],s=e.slice(-1)[0];if(n===s)return!0;if(sh(n)&&sh(s)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&sh(t[0])&&sh(e[0])}let ih,ah;function oh(t,e){return null!=t.getExtension(e)}function lh(t){try{if(null!=Oc(t))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function uh(t){const e=Uc(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n),t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const s=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,s),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const r=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(s),r}function ch(t,e){Array.isArray(t)||(t=[t]),t.forEach((t=>{null!=t&&he("complex64"!==t.dtype,(()=>e+" does not support complex64 tensors in the WebGL backend."))}))}const hh=u();function dh(t){const e=new Float32Array(t.length);for(let n=0;n<t.length;++n)e[n]=Math.abs(t[n]);return e}function ph(t){return(e,n,s,r,i)=>{const a=Xr(e,n),o=a.length,l=_e(a),u=$e(i,ge(a)),c=e.length,h=n.length,d=_e(e),p=_e(n),f=Kr(e,a),g=Kr(n,a);if(f.length+g.length===0)for(let e=0;e<u.length;++e)u[e]=t(s[e%s.length],r[e%r.length]);else for(let e=0;e<u.length;++e){const n=Ge(e,o,l),i=n.slice(-c);f.forEach((t=>i[t]=0));const a=Ve(i,c,d),m=n.slice(-h);g.forEach((t=>m[t]=0));const x=Ve(m,h,p);u[e]=t(s[a],r[x])}return[u,a]}}function fh(t,e){Array.isArray(t)||(t=[t]),t.forEach((t=>{null!=t&&he("complex64"!==t.dtype,(()=>e+" does not support complex64 tensors in the CPU backend."))}))}function gh(t){const{inputs:e,backend:n}=t,{real:s,imag:r}=e,i=n.data.get(s.dataId).values,a=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",i),imag:n.makeTensorInfo(r.shape,"float32",a)},o}function mh(t){const{inputs:e,backend:n}=t,{x:s}=e;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}function xh(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e,{dtype:i}=s;if("complex64"===i){if("complex64"===r.dtype)return mh({inputs:{x:r},backend:n});const t=ki(r.shape),e=xh({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=gh({inputs:{real:e,imag:t},backend:n});return t.dispose(),n.disposeIntermediateTensorInfo(e),s}if("complex64"===r.dtype){const t=function(t){const{inputs:e,backend:n}=t,{input:s}=e,r=n.data.get(s.dataId).complexTensorInfos.real,i=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,i)}({inputs:{input:r},backend:n}),e=xh({inputs:{x:t},backend:n,attrs:{dtype:i}});return n.disposeIntermediateTensorInfo(t),e}if(!Ee(r.dtype,i)){const t=mh({inputs:{x:r},backend:n});return{dataId:t.dataId,shape:t.shape,dtype:i}}if("int32"===i){const t=n.data.get(r.dataId).values,e=Int32Array.from(t);return n.makeTensorInfo(r.shape,"int32",e)}if("bool"===i){const t=n.data.get(r.dataId).values,e=Oe([0],r.dtype),[s,i]=ph(((t,e)=>t!==e?1:0))(r.shape,[],t,e,"bool");return n.makeTensorInfo(i,"bool",s)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${i}`)}function yh(t,e,n,s){return null==n?({inputs:n,backend:r})=>{const{a:i,b:a}=n,o=r;fh([i,a],t);const l=o.data.get(i.dataId).values,u=o.data.get(a.dataId).values,c=s||i.dtype,[h,d]=e(i.shape,a.shape,l,u,c);return o.makeTensorInfo(d,c,h)}:({inputs:t,backend:r})=>{const{a:i,b:a}=t,o=r;if("complex64"===i.dtype||"complex64"===a.dtype){const t=xh({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),e=o.data.get(t.dataId),s=e.complexTensorInfos.real,r=e.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=xh({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),d=h.complexTensorInfos.real,p=h.complexTensorInfos.imag,f=o.data.get(d.dataId).values,g=o.data.get(p.dataId).values,[m,x,y]=n(i.shape,a.shape,l,u,f,g),b=o.makeTensorInfo(y,"float32",m),w=o.makeTensorInfo(y,"float32",x),v=gh({inputs:{real:b,imag:w},backend:o});return o.disposeIntermediateTensorInfo(t),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(b),o.disposeIntermediateTensorInfo(w),v}{const t=o.data.get(i.dataId).values,n=o.data.get(a.dataId).values,r=s||i.dtype,[l,u]=e(i.shape,a.shape,t,n,r);return o.makeTensorInfo(u,r,l)}}}function bh(t){return(e,n,s,r,i,a)=>{const o=Xr(e,n),l=ge(o),u=o.length,c=_e(o),h=$e("float32",l),d=$e("float32",l),p=Kr(e,o),f=Kr(n,o),g=Fo(s,r),m=Fo(i,a),x=e.length,y=_e(e),b=n.length,w=_e(n);if(p.length+f.length===0)for(let e=0;e<h.length;e++){const n=e%g.length,s=e%m.length,r=t(g[2*n],g[2*n+1],m[2*s],m[2*s+1]);h[e]=r.real,d[e]=r.imag}else for(let e=0;e<h.length;e++){const n=Ge(e,u,c),s=n.slice(-x);p.forEach((t=>s[t]=0));const r=Ve(s,x,y),i=n.slice(-b);f.forEach((t=>i[t]=0));const a=Ve(i,b,w),o=t(g[2*r],g[2*r+1],m[2*a],m[2*a+1]);h[e]=o.real,d[e]=o.imag}return[h,d,o]}}hh.registerFlag("HAS_WEBGL",(()=>hh.getNumber("WEBGL_VERSION")>0)),hh.registerFlag("WEBGL_VERSION",(()=>lh(2)?2:lh(1)?1:0)),hh.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),hh.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===hh.get("WEBGL_VERSION"))),hh.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),hh.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),hh.registerFlag("WEBGL_PACK",(()=>hh.getBool("HAS_WEBGL"))),hh.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>hh.getBool("WEBGL_PACK"))),hh.registerFlag("WEBGL_PACK_CLIP",(()=>hh.getBool("WEBGL_PACK"))),hh.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!1)),hh.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>hh.getBool("WEBGL_PACK"))),hh.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>hh.getBool("WEBGL_PACK"))),hh.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>hh.getBool("WEBGL_PACK"))),hh.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>hh.getBool("WEBGL_PACK"))),hh.registerFlag("WEBGL_PACK_REDUCE",(()=>hh.getBool("WEBGL_PACK"))),hh.registerFlag("WEBGL_LAZILY_UNPACK",(()=>hh.getBool("WEBGL_PACK"))),hh.registerFlag("WEBGL_CONV_IM2COL",(()=>hh.getBool("WEBGL_PACK"))),hh.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(t){if(null==ih){const e=Oc(t);ih=e.getParameter(e.MAX_TEXTURE_SIZE)}return ih}(hh.getNumber("WEBGL_VERSION")))),hh.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(t){if(null==ah){const e=Oc(t);ah=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,ah)}(hh.getNumber("WEBGL_VERSION")))),hh.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const t=hh.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=Oc(t);return e=oh(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:oh(n,"EXT_disjoint_timer_query")?1:0,e}(t)})),hh.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>hh.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!function(){if("undefined"!=typeof navigator&&null!=navigator){const t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}())),hh.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(t){if(0===t)return!1;const e=Oc(t);if(1===t){if(!oh(e,"OES_texture_float"))return!1}else if(!oh(e,"EXT_color_buffer_float"))return!1;return uh(e)}(hh.getNumber("WEBGL_VERSION")))),hh.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!hh.getBool("WEBGL_FORCE_F16_TEXTURES")&&hh.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),hh.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(t){if(0===t)return!1;const e=Oc(t);if(1!==t){if(oh(e,"EXT_color_buffer_float"))return uh(e);const t="EXT_color_buffer_half_float";if(oh(e,t)){const n=e.getExtension(t);return function(t,e){const n=Uc(t,e),s=t.createTexture();t.bindTexture(t.TEXTURE_2D,s),t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,s,0);const i=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(s),t.deleteFramebuffer(r),i}(e,n)}return!1}return!!oh(e,"OES_texture_float")&&!!oh(e,"WEBGL_color_buffer_float")&&uh(e)}(hh.getNumber("WEBGL_VERSION")))),hh.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(t=hh.getNumber("WEBGL_VERSION"))&&null!=Oc(t).fenceSync;var t})),hh.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>hh.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),hh.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(t=>{if(t<0&&-1!==t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`)}));const wh=ph(((t,e)=>t+e)),vh=bh(((t,e,n,s)=>({real:t+n,imag:e+s})));function Ch(t){return(e,n,s)=>{const r=$e(n,e.length);for(let n=0;n<e.length;++n)r[n]=t(e[n],s);return r}}function kh(t,e,n){return({inputs:s,attrs:r,backend:i})=>{const{x:a}=s;if(fh(a,t),"string"===a.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=i,l=o.data.get(a.dataId).values,u=n||a.dtype,c=e(l,u,r);return o.makeTensorInfo(a.shape,u,c)}}yh(m,wh,vh);const $h=Ch((t=>Math.ceil(t))),Ih=(kh(T,$h),Ch((t=>Math.exp(t)))),Eh=(kh(V,Ih),Ch((t=>Math.expm1(t)))),Rh=(kh(G,Eh),Ch((t=>Math.floor(t)))),Sh=(kh(j,Rh),Ch((t=>Math.log(t))));function Ah(t,e,n,s){const r=$e(s,ge(n));for(let n=0;n<r.length;++n){const s=n*e;let i=t[s];for(let n=0;n<e;++n){const e=t[s+n];e>i&&(i=e)}r[n]=i}return r}kh(et,Sh);const Nh=ph(((t,e)=>t*e)),Th=bh(((t,e,n,s)=>({real:t*n-e*s,imag:t*s+e*n}))),Dh=(yh(ct,Nh,Th),Ch((t=>1/Math.sqrt(t))));function Fh(t,e,n,s,r){const i=_s(s,e,n),a=ge(n),o=_e(s);if(i){const n=Os(e,o);return t.subarray(n,n+a)}const l=$e(r,a);for(let r=0;r<a;++r){const i=Ve(Ge(r,n.length,_e(n)).map(((t,n)=>t+e[n])),s.length,o);l[r]=t[i]}return l}kh(Rt,Dh);const _h=ph(((t,e)=>t-e)),Oh=bh(((t,e,n,s)=>({real:t-n,imag:e-s})));function Lh(t,e,n,s,r){const i=e.length,a=ge(e),o=_e(e),l=_e(r),u=$e(n,ge(r));for(let e=0;e<a;++e){const n=Ge(e,i,o),r=new Array(n.length);for(let t=0;t<r.length;t++)r[t]=n[s[t]];u[Ve(r,i,l)]=t[e]}return u}function Bh(t,e,n,s){const r=Ce(e,n)[0],i=[1,n[0],1];for(let t=0;t<r;t++)i[0]*=n[t];i[1]=n[r];for(let t=r+1;t<n.length;t++)i[2]*=n[t];const a={},o=new Int32Array(n[r]),l=new Qe(i,s,t),u=[],c=1===i[0]&&1===i[2];for(let e=0;e<n[r];e++){let n;if(c)n=t[e].toString();else{const t=[];for(let n=0;n<i[0];n++)for(let s=0;s<i[2];s++)t.push(l.get(n,e,s));n=t.join(",")}if(void 0!==a[n])o[e]=a[n];else{const t=Object.keys(a).length;a[n]=t,o[e]=t,u.push(e)}}const h=i.slice();h[1]=Object.keys(a).length;const d=new Qe(h,s);u.forEach(((t,e)=>{for(let n=0;n<i[0];n++)for(let s=0;s<i[2];s++)d.set(l.get(n,t,s),n,e,s)}));const p=n.slice();return p[r]=h[1],{outputValues:d.values,outputShape:p,indices:o}}yh(Ut,_h,Oh);const{simpleAbsImpl:Mh,addImpl:zh,ceilImpl:Ph,expImpl:Wh,expm1Impl:Uh,floorImpl:Vh,logImpl:Gh,maxImpl:Hh,multiplyImpl:jh,rsqrtImpl:Kh,sliceImpl:qh,subImpl:Xh,transposeImpl:Yh,uniqueImpl:Jh}=r;class Zh{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map(((t,e)=>"T"+e));const n=[];this.variableNames.forEach((t=>{n.push(`float v${t} = get${t}AtOutCoords();`)}));const s=this.variableNames.map((t=>"v"+t)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class Qh{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map(((t,e)=>"T"+e));const n=[];this.variableNames.forEach((t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)}));const s=this.variableNames.map((t=>"v"+t)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}class td{constructor(t,e,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:i}=t;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,i];const a="max"===e?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${a} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function ed(t,e){return["x","y","z","w","u","v"].slice(0,e).map((e=>`${t}.${e}`))}function nd(t,e){return 1===e?[t]:ed(t,e)}function sd(){let t,e,n,s,r,i,a,o,l,c;return 2===u().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",s="in",r="texture",i="outputColor",a="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",s="varying",r="texture2D",i="gl_FragColor",a="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:s,texture2D:r,output:i,defineOutput:a,defineSpecialNaN:o,defineSpecialInf:l,defineRound:c}}function rd(t,e,n="index"){const s=_e(e);return s.map(((e,r)=>`int ${t[r]} = ${n} / ${e}; ${r===s.length-1?`int ${t[r+1]} = ${n} - ${t[r]} * ${e}`:`index -= ${t[r]} * ${e}`};`)).join("")}function id(t){const e=_e(t).map((t=>t.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}const ad="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:od}=s;function ld(t,e,n,s){const r=[];t.forEach((t=>{const e=ge(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?r.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(r.push(`uniform sampler2D ${t.name};`),r.push(`uniform int offset${t.name};`))}));const i=r.join("\n"),a=t.map((t=>function(t,e,n=!1){let s="";s+=n?cd(t):ud(t);const r=t.shapeInfo.logicalShape,i=e.logicalShape;return r.length<=i.length&&(s+=n?function(t,e){const n=t.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",i=t.shapeInfo.logicalShape.length,a=e.logicalShape.length,o=od(t.shapeInfo.logicalShape,e.logicalShape),l=xd(a),u=a-i;let c;const h=["x","y","z","w","u","v"];c=0===i?"":a<2&&o.length>=1?"coords = 0;":o.map((t=>`coords.${h[t+u]} = 0;`)).join("\n");let d="";d=a<2&&i>0?"coords":t.shapeInfo.logicalShape.map(((t,e)=>"coords."+h[e+u])).join(", ");let p="return outputValue;";const f=1===ge(t.shapeInfo.logicalShape),g=1===ge(e.logicalShape);if(1!==i||f||g){if(f&&!g)p=1===a?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const t=i-2,e=i-1;o.indexOf(t)>-1&&o.indexOf(e)>-1?p="return vec4(outputValue.x);":o.indexOf(t)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(e)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${p}\n    }\n  `}(t,e):function(t,e){const n=t.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",i=e.texShape,a=t.shapeInfo.texShape,o=t.shapeInfo.logicalShape.length,l=e.logicalShape.length;if(!t.shapeInfo.isUniform&&o===l&&null==t.shapeInfo.flatOffset&&me(a,i))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=xd(l),c=od(t.shapeInfo.logicalShape,e.logicalShape),h=l-o;let d;const p=["x","y","z","w","u","v"];d=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((t=>`coords.${p[t+h]} = 0;`)).join("\n");let f="";return f=l<2&&o>0?"coords":t.shapeInfo.logicalShape.map(((t,e)=>"coords."+p[e+h])).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${f});\n    }\n  `}(t,e)),s}(t,e,s))).join("\n"),o=e.texShape,l=sd(),u=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,h,d=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${hd}\n    ${dd}\n    ${pd}\n  `}(l);return e.isPacked?(c=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];return 1===n[0]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(me(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const s=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],s=Math.ceil(t[2]/2),r=s*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],s=Math.ceil(t[t.length-1]/2),r=s*Math.ceil(t[t.length-2]/2);let i=r,a="",o="b, r, c";for(let e=2;e<t.length-1;e++)i*=t[t.length-e-1],a=`\n      int b${e} = index / ${i};\n      index -= b${e} * ${i};\n    `+a,o=`b${e}, `+o;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${a}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${t.length}(${o});\n    }\n  `}(t,e)}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(l)):(c=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return 1===(n=e)[0]?`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `;case 2:return function(t,e){return me(t,e)?`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `:1===t[1]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===t[0]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=rd(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=rd(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=rd(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=rd(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}var n}(e.logicalShape,o),h=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),s&&(d+=fd),[d,u,h,i,c,a,n].join("\n")}function ud(t){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[s,r]=t.shapeInfo.texShape;if(1===s&&1===r)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[i,a]=t.shapeInfo.texShape;return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${i}, ${a}, ${gd(e)});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${md(t)}\n      }\n    `;const s=t.shapeInfo.texShape,r=s[0],i=s[1];if(1===i&&1===r)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const a=gd(e);return 1===i?`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${r}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `:1===r?`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${i}, index + ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t.shapeInfo.texShape;if(null!=r&&me(e,r)){const t=r[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${r[1]}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:i,keptDims:a}=ke(e),o=i;if(o.length<e.length){const e=["row","col"];return`\n      ${ud(yd(t,o))}\n      float ${s}(int row, int col) {\n        return ${s}(${bd(e,a)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${md(t)}\n      }\n    `;const l=r[0],u=r[1],c=gd(n);return 1===u?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `:1===l?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e[1]*e[2],i=e[2],{newShape:a,keptDims:o}=ke(e),l=a;if(l.length<e.length){const e=["row","col","depth"];return`\n        ${ud(yd(t,l))}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${bd(e,o)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${r}, ${i}, 1)));\n        ${md(t)}\n      }\n    `;const u=t.shapeInfo.texShape,c=u[0],h=u[1],d=t.shapeInfo.flatOffset;if(h===r&&null==d)return`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===i&&null==d)return`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r} + col * ${i} + depth + ${gd(n)};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(t);case 4:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e[3],i=e[2]*r,a=e[1]*i,{newShape:o,keptDims:l}=ke(e);if(o.length<e.length){const e=["row","col","depth","depth2"];return`\n      ${ud(yd(t,o))}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${bd(e,l)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${a}, ${i}, ${r}, 1)));\n        ${md(t)}\n      }\n    `;const u=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,h=c[0],d=c[1];if(d===a&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===r&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${a} + col * ${i} +\n          depth * ${r} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${gd(n)});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e[4],i=e[3]*r,a=e[2]*i,o=e[1]*a,{newShape:l,keptDims:u}=ke(e);if(l.length<e.length){const e=["row","col","depth","depth2","depth3"];return`\n      ${ud(yd(t,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${bd(e,u)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${a}, ${i}, ${r})) +\n          depth3;\n        ${md(t)}\n      }\n    `;const c=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,d=h[0],p=h[1];if(p===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${a}, ${i}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]},\n               ${e[2]*e[3]}, ${e[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${a} + depth * ${i} +\n          depth2 * ${r} + depth3 + ${gd(n)};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:i}=ke(e);if(r.length<e.length){const e=["row","col","depth","depth2","depth3","depth4"];return`\n      ${ud(yd(t,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${bd(e,i)});\n      }\n    `}const a=e[5],o=e[4]*a,l=e[3]*o,u=e[2]*l,c=e[1]*u;if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${a}, 1)));\n        ${md(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${a})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===a&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]*e[4]},\n               ${e[2]*e[3]*e[4]},\n               ${e[3]*e[4]},\n               ${e[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${a} + depth4 + ${gd(n)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);default:throw new Error(e.length+"-D input sampling is not yet supported")}}function cd(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name;return`\n    vec4 ${"get"+e.charAt(0).toUpperCase()+e.slice(1)}() {\n      return ${sd().texture2D}(${e}, halfCR);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),s=t.shapeInfo.texShape,r=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],i=sd();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${r[0]}, ${r[1]}, index);\n      return ${i.texture2D}(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t.shapeInfo.texShape,i=r[0],a=r[1],o=sd();if(null!=r&&me(e,r))return`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(e[1]/2)}, ${l[0]}, ${l[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t.shapeInfo.texShape,i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===e[0]){const n=[1,2],r=["b","row","col"];return`\n        ${cd(yd(t,e.slice(1)))}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${bd(r,n)});\n        }\n      `}const a=i[0],o=i[1],l=Math.ceil(e[2]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${a}, ${o}, ${l*Math.ceil(e[1]/2)}, ${l}, b, row, col);\n      return ${sd().texture2D}(${n}, uv);\n    }\n  `}(t);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,s=t.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),i=t.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],o=a[0],l=a[1],u=Math.ceil(e[n-1]/2);let c=u*Math.ceil(e[n-2]/2),h="int b, int row, int col",d=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let t=2;t<n-1;t++)h=`int b${t}, `+h,c*=e[n-t-1],d=`b${t} * ${c} + `+d;return`\n    vec4 ${r}(${h}) {\n      int index = ${d};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${sd().texture2D}(${s}, uv);\n    }\n  `}(t)}}const hd="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",dd="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",pd="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",fd="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function gd(t){return"offset"+t}function md(t){const e=t.name,n=ge(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function xd(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function yd(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function bd(t,e){return e.map((e=>t[e])).join(", ")}class wd{constructor(t,e,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,he(t.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=t[t.length-1],i=Math.ceil(r/e);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),s||this.variableNames.push("bestIndicesA");const a=this.outputShape,o=a.length,l=xd(o),u=nd("coords",o);let c,h;if(1===i){h=o+1;const t=xd(h);c=`\n        ${t} sourceLocR = ${t}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${t} sourceLocG = ${t}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${t} sourceLocA = ${t}(${u.join()}, 0);\n        --${u[o-1]};\n        ${t} sourceLocB = ${t}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const d=["x","y","z","w","u","v"].slice(0,h),p="."+d[h-1],f=d.map((t=>"int "+t)),g=nd("sourceLocR",h-1).concat("inIdx.r"),m=nd("sourceLocG",h-1).concat("inIdx.g"),x=nd("sourceLocB",h-1).concat("inIdx.b"),y=nd("sourceLocA",h-1).concat("inIdx.a"),b="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${y.join()})));`,v=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${m.join()}) : 0.,\n            hasNextRow ? getAChannel(${x.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${y.join()}) : 0.)`,C=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${C}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${a[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${a[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},\n          sourceLocB${p}, sourceLocA${p}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${b}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class vd{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,s=t.strideHeight,r=t.strideWidth,i=t.dilationHeight,a=t.dilationWidth,o=t.effectiveFilterHeight,l=t.effectiveFilterWidth,u=o-1-t.padInfo.top,c=l-1-t.padInfo.left,h=1/(e*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${i}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${a}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Cd{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,s=t.filterWidth,r=t.strideDepth,i=t.strideHeight,a=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterDepth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=c-1-t.padInfo.front,f=h-1-t.padInfo.top,g=d-1-t.padInfo.left,m=1/(e*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${p}, ${f}, ${g});\n      const float avgMultiplier = float(${m});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${i}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${a}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class kd{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Xr(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const $d="return a + b;",Id="return a - b;",Ed="return a * b;",Rd="return (a < 0.) ? b * a : a;";class Sd{constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=Xr(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const Ad="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class Nd{constructor(t,e,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Xr(e,n);const r=this.outputShape.length;let i="";if(s)if(0===r||1===ge(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i=`\n          ${xd(r)} coords = getOutputCoords();\n        `,1===r)i+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=nd("coords",r);i+=`\n            bool nextRowOutOfBounds =\n              (${t[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${t[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}class Td{constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class Dd{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class Fd{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class _d{constructor(t){this.outputShape=[],this.outputShape=Dr(t,1),this.variableNames=t.map(((t,e)=>"T"+e));const e=new Array(t.length-1);e[0]=t[0][1];for(let n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let t=1;t<e.length;t++){const s=e[t-1];n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${s}));`)}const s=e.length,r=e[e.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class Od{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Dr(t,e);const n=this.outputShape,s=n.length,r=xd(s),i=nd("coords",s),a=["x","y","z","w","u","v"].slice(0,s);this.variableNames=t.map(((t,e)=>"T"+e));const o=new Array(t.length-1);o[0]=t[0][e];for(let n=1;n<o.length;n++)o[n]=o[n-1]+t[n][e];const l=a[e],u=a.slice(-2),c=a.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let t=1;t<o.length;t++){const e=o[t-1];h+=`\n        if (${l} < ${o[t]}  && ${l} >= ${o[t-1]}) {\n          return getChannel(\n            getT${t}(${Ld(a,l,e)}),\n            vec2(${Ld(u,l,e)}));\n        }`}const d=o.length,p=o[o.length-1];h+=`\n        return getChannel(\n          getT${d}(${Ld(a,l,p)}),\n          vec2(${Ld(u,l,p)}));`,this.userCode=`\n      float getValue(${a.map((t=>"int "+t))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${i}), 0., 0., 0.);\n\n        ${i[s-1]} = ${i[s-1]} + 1;\n        if (${i[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${i});\n        }\n\n        ${i[s-2]} = ${i[s-2]} + 1;\n        if (${i[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${i});\n        }\n\n        ${i[s-1]} = ${i[s-1]} - 1;\n        if (${i[s-2]} < ${n[s-2]} &&\n            ${i[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${i});\n        }\n        setOutput(result);\n      }\n    `}}function Ld(t,e,n){const s=t.indexOf(e);return t.map(((t,e)=>e===s?`${t} - ${n}`:t)).join()}class Bd{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,s=t.padInfo.top,r=t.padInfo.left,i="channelsLast"===t.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${s};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${i}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Md{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,s=t.strideHeight,r=t.strideWidth,i="channelsLast"===t.dataFormat,a=e-1-t.padInfo.top,o=n-1-t.padInfo.left,l=i?1:2,u=i?2:3,c=i?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${i}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class zd{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,s=t.strideWidth,r=t.padInfo.front,i=t.padInfo.top,a=t.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${r};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${i};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${a};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Pd{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,s=t.filterWidth,r=t.strideDepth,i=t.strideHeight,a=t.strideWidth,o=e-1-t.padInfo.front,l=n-1-t.padInfo.top,u=s-1-t.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${i}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${a}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Wd{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,s=t.padInfo.top,r=t.padInfo.left,i=t.outChannels/t.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${i} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${s};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ud{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,s=t.strideHeight,r=t.strideWidth,i=e-1-t.padInfo.top,a=n-1-t.padInfo.left,o=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Vd{constructor(t,e=!1,n=null,s=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const r=t.padInfo.top,i=t.padInfo.left,a=t.strideHeight,o=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,d=4*Math.floor(t.inChannels/4),p=t.inChannels%4,f="channelsLast"===t.dataFormat,g=f?1:2,m=f?2:3,x=f?3:1;let y="",b="";n&&(y=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,b="result = activation(result);");const w=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${a}, ${o});\n      const ivec2 pads = ivec2(${r}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${x}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${m}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${u};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===p}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===p}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===p}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${b}\n        setOutput(result);\n      }\n    `}}class Gd{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,s=t.padInfo.left,r=t.strideDepth,i=t.strideHeight,a=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterDepth,h=t.filterHeight,d=t.filterWidth,p=4*Math.floor(t.inChannels/4),f=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${i}, ${a});\n      const ivec3 pads = ivec3(${e}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Hd{constructor(t,e=!1,n=null,s=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const r=t.inHeight,i=t.inWidth,a=t.padInfo.top,o=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=t.outChannels/t.inChannels;let g="",m="";n&&(g=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,m="result = activation(result);");const x=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${r}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${x}\n        ${m}\n        setOutput(result);\n      }\n    `}}class jd{constructor(t,e=!1,n=null,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const r=t.inHeight,i=t.inWidth,a=t.padInfo.top,o=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=p;let g="int xR; int xC; int xCOffset;";for(let t=0;t<d;t++)for(let e=0;e<p;e++)g+=`\n          vec4 xTexelR${t}C${2*e} = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;for(let t=0;t<d;t++)for(let e=0;e<f;e++){const n=2*e;if(g+=`\n          xR = xRCorner + ${t*c};\n          xC = xCCorner + ${n*h};\n        `,1===u){if(n<p&&(g+=o%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${r} && xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${r} && xCOffset >= 0 && xCOffset < ${i}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${r} && xC >= 0 && xC < ${i}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `,n+1<p)){const e=o%2==0?ce(h):h;h%2==0&&o%2==1||h%2!=0&&o%2!=1?(g+=`\n                  xCOffset = xC + ${o%2} + ${e};\n\n                  if(xR >= 0 && xR < ${r} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,h>1&&(g+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${r} &&\n                      xCOffset >= 0 && xCOffset < ${i}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),g+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.xy);\n                `):g+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${r} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${n+1} = xTexelR${t}C${n+2};\n                `}}else n<p&&(g+=`\n              if(xR >= 0 && xR < ${r}) {\n            `,o%2==1?(g+=`\n                xCOffset = xC + 1 - ${u};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${i}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n              `,n+1<p&&(g+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${u};\n                  if(xCOffset >= 0 && xCOffset < ${i}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${n+1} = vec4(xTexelR${t}C${n+2}.xy, final.xy);\n                `)):(g+=`\n                if(xC >= 0 && xC < ${i}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${u};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${n+2}.xy);\n              `,n+1<p&&(g+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n                `)),g+="}");n<p&&(g+=`\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `,n+1<p&&(g+=`\n              vec4 wTexelR${t}C${n+1} = getW(${t}, ${n+1}, d1, q);\n              wR${t}C${n+1} =\n                vec4(wTexelR${t}C${n+1}.xz, wTexelR${t}C${n+1}.xz);`))}for(let t=0;t<d;t++)for(let e=0;e<p;e++)g+=`dotProd += xR${t}C${e} * wR${t}C${e};`;let m="",x="";n&&(m=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,x="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${g}\n\n        vec4 result = dotProd;\n        ${y}\n        ${x}\n        setOutput(result);\n      }\n    `}}class Kd{constructor(t,e,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[i,a,o,l]=t,[u]=e,[c,h]=n;this.outputShape=[u,c,h,l];const d="bilinear"===s?1:0,[p,f]=[a-1+".0",o-1+".0"],[g,m,x]=c>1?[""+(a-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+p],[y,b,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${g});\n      const float width_ratio = float(${y});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${i}) {\n          return;\n        }\n\n        float height_scale = ${m};\n        float width_scale = ${b};\n\n        float in_y = ${x};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class qd{constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const s=t.length,r=e?"0.0":`getX(${Xd(s,"coords")})`,i=t[t.length-1];let a="",o="";e?(a=n?"end != "+(i-1):"end != 0",o=n?"end + 1":"end - 1"):(a=n?"end + pow2 < "+i:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${xd(s)} coords = getOutputCoords();\n        int end = ${Yd(s,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${a}) {\n          int idx = ${o};\n          ${Yd(s,"coords")} = idx;\n          val += getX(${Xd(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.index&&(this.index=e.getUniformLocation(n,"index")),e.gl.uniform1f(this.index,t)}}}function Xd(t,e){if(1===t)return""+e;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}function Yd(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error(`Cumulative sum for rank ${t} is not yet supported`)}class Jd{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Lc.DENSE;const e=Pc(t),n=sd();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${rd(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class Zd{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Lc.DENSE;const e=Pc(t),n=sd();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${rd(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class Qd{constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class tp{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class ep{constructor(t){this.variableNames=["A"],this.outTexUsage=Bc.DOWNLOAD;const e=sd();this.outputShape=t,this.userCode=`\n      ${ad}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class np{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Bc.DOWNLOAD;const e=sd();this.outputShape=t,this.userCode=`\n      ${ad}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class sp{constructor(t,e,n=!1){this.variableNames=["A"];const s=sd(),[r,i]=e;this.outputShape=t;let a="result";n&&(a="floor(result * 255. + 0.5)"),this.userCode=`\n      ${id(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${i};\n        int c = imod(flatIndex, ${i});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${i}.0, ${r}.0);\n        vec4 values = ${s.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${s.output} = vec4(${a}, 0., 0., 0.);\n      }\n    `}}class rp{constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const s=sd(),[r,i]=e;this.outputShape=t;let a="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let e=0;e<=1;e++)for(let n=0;n<=1;n++){const o=2*e+n;a+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${t[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${i};\n              c = imod(flatIndex, ${i});\n              uv = (vec2(c, r) + halfCR) / vec2(${i}.0, ${r}.0);\n              values = ${s.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${id(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${a}\n\n        ${s.output} = ${o};\n      }\n    `}}class ip{constructor(t,e,n){this.variableNames=["real","imag"];const s=e[1];this.outputShape=e;const r=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,i=n?s+".0":"1.0";this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${t}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${i};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}class ap{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}class op{constructor(t,e,n){this.variableNames=["A","indices"];const s=t.slice();s[n]=e,this.outputShape=s,this.rank=s.length;const r=xd(this.rank),i=function(t,e){const n=t.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const s=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let n=0;n<t.length;n++)n===e?r.push(`int(getIndices(${s[n]}))`):r.push(""+s[n]);return r.join()}(t,n);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${i}));\n      }\n    `}}class lp{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const s=xd(e.length),r=xd(n.length),i=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${i};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function up(t,e,n,s,r,i){!function(t,e){const n=u().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0)throw new Error(`Requested texture size [${t}x${e}] is invalid.`);if(t>n||e>n)throw new Error(`Requested texture size [${t}x${e}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(e,n);const a=function(t){return Qc(t,(()=>t.createTexture()),"Unable to create WebGLTexture.")}(t),o=t.TEXTURE_2D;return Vc(t,(()=>t.bindTexture(o,a))),Vc(t,(()=>t.texParameteri(o,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE))),Vc(t,(()=>t.texParameteri(o,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE))),Vc(t,(()=>t.texParameteri(o,t.TEXTURE_MIN_FILTER,t.NEAREST))),Vc(t,(()=>t.texParameteri(o,t.TEXTURE_MAG_FILTER,t.NEAREST))),Vc(t,(()=>t.texImage2D(o,0,s,e,n,0,r,i,null))),Vc(t,(()=>t.bindTexture(t.TEXTURE_2D,null))),a}function cp(t){return t.internalFormatFloat}function hp(t){return t.internalFormatHalfFloat}function dp(t){return t.downloadTextureFormat}function pp(t){return t.internalFormatPackedFloat}function fp(t){return t.internalFormatPackedHalfFloat}class gp{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=u().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){Fc[t]=e}(e,t)):this.gl=Oc(e);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(1===u().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=Hc(this.gl,t),oh(this.gl,e))this.textureHalfFloatExtension=Hc(this.gl,e);else if(u().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),oh(this.gl,s))this.colorBufferHalfFloatExtension=Hc(this.gl,s);else if(u().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",oh(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!oh(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=function(t){return function(t,e){const n=Qc(t,(()=>t.createBuffer()),"Unable to create WebGLBuffer");return Vc(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,n))),Vc(t,(()=>t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW))),n}(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(t){return function(t,e){const n=Qc(t,(()=>t.createBuffer()),"Unable to create WebGLBuffer");return Vc(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n))),Vc(t,(()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW))),n}(t,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(t){return Qc(t,(()=>t.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=Uc(this.gl,this.textureHalfFloatExtension)}get debug(){return u().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;Vc(t,(()=>t.finish())),Vc(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,null))),Vc(t,(()=>t.deleteFramebuffer(this.framebuffer))),Vc(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,null))),Vc(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null))),Vc(t,(()=>t.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,s){const[r,i]=zc(e,n);return up(t,r,i,cp(s),s.textureFormatFloat,t.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,s){const[r,i]=zc(e,n);return up(t,r,i,hp(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,s){const[r,i]=zc(e,n);return up(t,r,i,dp(s),t.RGBA,t.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n){Vc(t,(()=>t.bindTexture(t.TEXTURE_2D,e))),n.data instanceof Uint8Array?Vc(t,(()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n.width,n.height,0,t.RGBA,t.UNSIGNED_BYTE,n.data))):Vc(t,(()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n))),Vc(t,(()=>t.bindTexture(t.TEXTURE_2D,null)))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,n,s){this.throwIfDisposed(),function(t,e,n,s,r,i){let a,o,l;Vc(t,(()=>t.bindTexture(t.TEXTURE_2D,e))),r instanceof Uint8Array?(a=new Uint8Array(n*s*4),o=t.UNSIGNED_BYTE,l=t.RGBA):(a=new Float32Array(n*s*4),o=t.FLOAT,l=i.internalFormatPackedFloat),a.set(r),Vc(t,(()=>t.texImage2D(t.TEXTURE_2D,0,l,n,s,0,t.RGBA,o,a))),Vc(t,(()=>t.bindTexture(t.TEXTURE_2D,null)))}(this.gl,t,e,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,s){const[r,i]=Wc(e,n);return up(t,r,i,fp(s),t.RGBA,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,s){const[r,i]=Wc(e,n);return up(t,r,i,pp(s),t.RGBA,t.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(Jc(this.gl,this.framebuffer),this.outputTexture=null),Vc(this.gl,(()=>this.gl.deleteTexture(t)))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,(()=>function(t,e,n,s){const[r,i]=zc(e,n),a=new Uint8Array(e*n*4);return Vc(t,(()=>t.readPixels(0,0,r,i,s.downloadTextureFormat,t.UNSIGNED_BYTE,a))),new Float32Array(a.buffer)}(this.gl,e,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(t,e,n,s,r,i){return function(t,e,n,s,r,i,a,o){const l=t,u=new Float32Array(function(t,e){const[n,s]=Wc(t,e);return n*s*4}(i,a));return l.bindBuffer(l.PIXEL_PACK_BUFFER,e),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,t,0,0,0,r,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const s=t,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,e),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const s=function(t,e,n,s){const r=t.createBuffer();Vc(t,(()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,r)));const i=16*e*n;return Vc(t,(()=>t.bufferData(t.PIXEL_PACK_BUFFER,i,t.STREAM_READ))),Vc(t,(()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,0))),Vc(t,(()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null))),r}(this.gl,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,n;if(u().getBool("WEBGL_FENCE_API_ENABLED")){const s=t,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=()=>{const t=s.clientWaitSync(r,0,0);return t===s.ALREADY_SIGNALED||t===s.CONDITION_SATISFIED},e=r}else u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(e,u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:e,isFencePassed:n}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,(()=>function(t,e,n){const s=new Float32Array(e*n*4);return Vc(t,(()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,s))),s}(this.gl,e,n)))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=function(t,e){const n=Qc(t,(()=>t.createShader(t.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(Vc(t,(()=>t.shaderSource(n,e))),Vc(t,(()=>t.compileShader(n))),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){const n=jc.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);const s=+n[1],r=t.split("\n"),i=r.length.toString().length+2,a=r.map(((t,e)=>be((e+1).toString(),i)+t));let o=0;for(let t=0;t<a.length;t++)o=Math.max(a[t].length,o);const l=a.slice(0,s-1),u=a.slice(s-1,s),c=a.slice(s);console.log(l.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+be(u[0],o),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e,t),s=function(t){const e=sd();return function(t,e){const n=Qc(t,(()=>t.createShader(t.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(Vc(t,(()=>t.shaderSource(n,e))),Vc(t,(()=>t.compileShader(n))),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(t,`${e.version}\n    precision highp float;\n    ${e.attribute} vec3 clipSpacePos;\n    ${e.attribute} vec2 uv;\n    ${e.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(e),r=function(t){return Qc(t,(()=>t.createProgram()),"Unable to create WebGLProgram.")}(e);return Vc(e,(()=>e.attachShader(r,s))),Vc(e,(()=>e.attachShader(r,n))),function(t,e){if(Vc(t,(()=>t.linkProgram(e))),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}(e,r),this.debug&&Kc(e,r),this.vertexAttrsAreBound||(this.setProgram(r),this.vertexAttrsAreBound=function(t,e,n){return Vc(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,n))),qc(t,e,"clipSpacePos",n,3,20,0)&&qc(t,e,"uv",n,2,20,12)}(e,this.program,this.vertexBuffer)),r}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&Vc(this.gl,(()=>this.gl.deleteProgram(t)))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&Kc(this.gl,this.program),Vc(this.gl,(()=>this.gl.useProgram(t)))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n){return Qc(t,(()=>t.getUniformLocation(e,n)),'uniform "'+n+'" not present in program.')}(this.gl,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),Vc(this.gl,(()=>this.gl.getAttribLocation(t,e)))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),Xc(this.gl,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[s,r]=Wc(e,n);this.setOutputMatrixTextureDriver(t,s,r)}setOutputMatrixWriteRegion(t,e,n,s){this.setOutputMatrixWriteRegionDriver(n,t,s,e)}setOutputPackedMatrixWriteRegion(t,e,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Kc(this.gl,this.program),Zc(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),Vc(t,(()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Vc(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Hc(this.gl,2===u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await we((()=>this.disposed||this.isQueryAvailable(t,u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(t,u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise((e=>{this.addItemToPoll((()=>t.isFencePassed()),(()=>e()))}))}pollItems(){const t=function(t){let e=0;for(;e<t.length&&t[e]();++e);return e-1}(this.itemsToPoll.map((t=>t.isDoneFn)));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||we((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),Yc(this.gl,t,this.framebuffer),this.debug&&Zc(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Yc(this.gl,this.outputTexture,this.framebuffer),this.debug&&Zc(this.gl)):Jc(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const s=this.gl;Yc(s,t,this.framebuffer),this.debug&&Zc(s),this.outputTexture=t,Vc(s,(()=>s.viewport(0,0,e,n))),Vc(s,(()=>s.scissor(0,0,e,n)))}setOutputMatrixWriteRegionDriver(t,e,n,s){this.throwIfDisposed(),Vc(this.gl,(()=>this.gl.scissor(t,e,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function mp(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach(((t,n)=>{const s=t.logicalShape,r=e[n],i=r.shape;if(!me(s,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${i} must match`);if(t.isUniform&&r.isUniform)return;const a=t.texShape,o=r.isUniform?null:r.texData.texShape;if(!me(a,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${o} must match`)}))}class xp{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:s,inChannels:r,strideWidth:i,strideHeight:a,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:d,top:p}=o,f=r*s,g=sd(),m="channelsLast"===h,x=m?0:1,y=m?1:2;let b="";for(let n=0;n<=1;n++)for(let s=0;s<=1;s++)b+=`\n          blockIndex = rc.y + ${s};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${a} - ${p};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${e[x]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${i}. - ${d}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${r}.));\n\n              if(d1 < ${e[y]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${r}.));\n\n                if (${m}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+s}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+s}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${b}\n\n        ${g.output} = result;\n      }\n    `}}class yp{constructor(t,e,n,s,r){this.variableNames=["x"],this.outputShape=[];const i=e,a=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${i}; j <= ${i}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${a}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class bp{constructor(t,e,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class wp{constructor(t,e,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const i=e,a=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${i};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${i}; j <= ${i}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}class vp{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,s=t.dilationHeight,r=t.effectiveFilterHeight,i=t.effectiveFilterWidth,a=r-1-t.padInfo.top,o=i-1-t.padInfo.left,l=r*i-1;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${i} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Cp{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,s=t.strideWidth,r=t.dilationDepth,i=t.dilationHeight,a=t.dilationWidth,o=t.effectiveFilterDepth,l=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=o-1-t.padInfo.front,h=l-1-t.padInfo.top,d=u-1-t.padInfo.left,p=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${i}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${a}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class kp{constructor(t,e,n=!1,s=!1,r=!1,i=null,a=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const o=n?t[1]:t[2],l=Math.ceil(o/2),u=n?"i * 2, rc.y":"rc.y, i * 2",c=s?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let p="",f="";i&&(p=a?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,f="result = activation(result);");const g=r?"result += getBiasAtOutCoords();":"";r&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${p}\n\n      const float sharedDimension = ${l}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${l}; i++) {\n          vec4 a = getMatrixA(rc.x, ${u});\n          vec4 b = getMatrixB(rc.x, ${c});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${d[0]});\n          result += (${h[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${g}\n\n        ${f}\n\n        setOutput(result);\n      }\n    `}}class $p{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}class Ip{constructor(t,e,n,s){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class Ep{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=nd("rc",e),s=xd(e),r=function(t,e,n){if(1===t)return"rc > "+e[0];let s="";for(let r=t-2;r<t;r++)s+=`${n[r]} >= ${e[r]}`,r<t-1&&(s+="||");return s}(e,t,n),i=function(t,e,n,s){if(1===t)return"";const r=s.slice(-2);return`\n    int r = ${r[0]};\n    int c = ${r[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),a=function(t,e){const n=t.length,s=function(t,e){const n=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let i=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let n=2;n<t;n++)i=e[e.length-1-n]+","+i;n.push(i)}return n}(n,e);return 1===n?`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${i}\n\n            setOutput(vec4(${a}));\n          }\n        }\n      `}}}class Rp{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const s=t.length,r=xd(s),i=e.map((t=>t[0])).join(","),a=e.map(((e,n)=>e[0]+t[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${i});\n      ${r} end = ${r}(${a});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${i};\n        int end = ${a};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Sp{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const s=t.length,r=xd(s),i=e.map((t=>t[0])).join(","),a=e.map(((e,n)=>e[0]+t[n])).join(","),o=nd("rc",s),l=nd("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[r+" rc = outputLoc;",`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],d=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let t=0,e=1===s?2:4;t<e;t++)p+=`\n        ${h[t]}\n        if (${d}) {\n          result[${t}] = float(${n});\n        } else {\n          ${r} source = rc - start;\n          result[${t}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;p+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${i});\n      const ${r} end = ${r}(${a});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}class Ap{constructor(t,e,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const i=t.filterWidth,a=t.strideHeight,o=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.top,p=t.padInfo.left;this.outputShape=t.outShape;const f="avg"===e,g=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,m=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let x="0.0";if(f||(x="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${a}, ${o});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?g:m:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let y=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(y="avgValue / count");const b=4*Math.floor(i/4),w=i%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${o});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${b}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${b};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${y});\n      }\n    `}}class Np{constructor(t,e,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const i=t.filterWidth,a=t.strideDepth,o=t.strideHeight,l=t.strideWidth,u=t.dilationDepth,c=t.dilationHeight,h=t.dilationWidth,d=t.effectiveFilterDepth,p=t.effectiveFilterHeight,f=t.effectiveFilterWidth,g=t.padInfo.front,m=t.padInfo.top,x=t.padInfo.left;this.outputShape=t.outShape;const y="avg"===e;let b="0.0";if(y||(b="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${a}, ${o}, ${l});\n        const ivec3 pads = ivec3(${g}, ${m}, ${x});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / count");const v=4*Math.floor(i/4),C=i%4,k=`\n      if (${y}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${a}, ${o}, ${l});\n      const ivec3 pads = ivec3(${g}, ${m}, ${x});\n      const float initializationValue = ${b};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${b});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${k}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${k}\n            } else if (${2===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${k}\n            } else if (${3===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${k}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}class Tp{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:i}=t;this.outputShape=[s,i];let a="0.0",o="";"prod"===e?a="1.0":"min"===e?(a="1.0 / 1e-20",o="min"):"max"===e&&(a="-1.0 / 1e-20",o="max");let l=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?l="sumValue":"prod"===e?l="prodValue":"all"===e?l="allValue":"any"===e&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,d="vec4";"all"===e?(a="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===e&&(a="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";r%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${a};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${a});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}class Dp{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let t=0;t<4;t++){let e="thisRC = rc;";t%2==1&&(e+="thisRC.z += 1;"),t>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${t>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${t>0?"}":""}\n      `}var s;this.userCode=`\n      ${s=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${rd(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${id(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Fp{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,s,r]=e.shape,[,i,a]=t.shape,o=[n&&i>1?s-1:s,n&&a>1?r-1:r],l=[n&&i>1?i-1:i,n&&a>1?a-1:a],u=o[0]/l[0],c=o[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${a}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class _p{constructor(t,e,n,s){this.variableNames=["A"],this.outputShape=[];const[r,i,a,o]=t;this.outputShape=[r,e,n,o];const l=[s&&e>1?i-1:i,s&&n>1?a-1:a],u=[s&&e>1?e-1:e,s&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${a}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class Op{constructor(t,e,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,i,a,o]=t;this.outputShape=[r,e,n,o];const l=[s&&e>1?i-1:i,s&&n>1?a-1:a],u=[s&&e>1?e-1:e,s&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]},\n          ${l[1]/u[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${a}.0,\n                                     ${a}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${o-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class Lp{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,s,r]=e.shape,[,i,a]=t.shape,o=[n&&i>1?s-1:s,n&&a>1?r-1:r],l=[n&&i>1?i-1:i,n&&a>1?a-1:a],u=o[0]/l[0],c=o[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${a}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class Bp{constructor(t,e,n,s){this.variableNames=["A"],this.outputShape=[];const[r,i,a,o]=t;this.outputShape=[r,e,n,o];const l=[s&&e>1?i-1:i,s&&n>1?a-1:a],u=[s&&e>1?e-1:e,s&&n>1?n-1:n],c=s?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${a}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class Mp{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const s=t.map(((n,s)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=xd(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class zp{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const s=nd("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,i=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,a=xd(n);function o(n){const s=t.map(((s,r)=>function(n,s){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${s[n]} - 1`:""+s[n]}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${a} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return o(t)}(s.slice())};\n          if(${r}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",o(t)}(s.slice())};\n          }\n          if(${i}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",o(t)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",o(t)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class Pp{constructor(t,e,n,s,r,i,a=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;const o=xd(r.length),l=xd(i.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const d=`getUpdates(${h})`,p=e>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${p};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class Wp{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,s=t.batchSize,r=t.inSize,i=t.numSegments,a=i*Math.ceil(r/n);this.outputShape=[s,a];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${i})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${i})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Up{constructor(t,e,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],i=[],a=[];for(let s=0;s<e.length;s++)a.push(""+n[s]),s<t&&i.push(""+n[s]);s=i.join(),r=a.join()}const i=xd(n);this.userCode=`\n      void main() {\n        ${i} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}class Vp{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=xd(this.rank),n=`uniform int start[${this.rank}];`,s=function(t){if(1===t)return"sourceLoc";if(t<=6)return Gp.slice(0,t).map((t=>"sourceLoc."+t)).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let r;r=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map(((t,e)=>`sourceLoc.${Gp[e]} = start[${e}] + coords.${Gp[e]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const Gp=["x","y","z","w","u","v"];class Hp{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=xd(this.rank),n=nd("coords",this.rank),s=nd("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,i=`getChannel(getSource(${s.join()}), ${r})`,a=`\n      result.x = ${i};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${i};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${i};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${i};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map(((t,e)=>`start[${e}]`)).join()});`:t.map(((t,e)=>`${s[e]} = ${n[e]} + start[${e}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${a}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}class jp{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=xd(n.length),i=xd(n.length);let a="";if(1===s)a="coords * strides + begin";else{let t=0;a=n.map(((e,s)=>(t++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${t-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${t});\n      ${r} strides = ${r}(${e});\n\n      void main() {\n        ${i} coords = getOutputCoords();\n        setOutput(getX(${a}));\n      }\n    `}}class Kp{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const s=Xp(e,n),r=Yp(t,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const i=qp(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();const t=this.freeTextures[r].shift();return this.usedTextures[r].push(t),t}let a;return s===Mc.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):s===Mc.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):s===Mc.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):s===Mc.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):s===Mc.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[r].push(a),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),a}releaseTexture(t,e,n,s){if(null==this.freeTextures)return;const r=Xp(n,s),i=Yp(e,r,s);i in this.freeTextures||(this.freeTextures[i]=[]);const a=qp(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=u().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=a):(this.freeTextures[i].push(t),this.numFreeTextures++,this._numBytesFree+=a),this.numUsedTextures--;const l=this.usedTextures[i],c=l.indexOf(t);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);const e=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach((t=>{this.gpgpu.deleteMatrixTexture(t)}));for(const t in this.usedTextures)this.usedTextures[t].forEach((t=>{this.gpgpu.deleteMatrixTexture(t)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function qp(t,e,n,s,r){const i=function(t,e){switch(t){case Mc.PACKED_2X2_FLOAT32:return pp(e);case Mc.PACKED_2X2_FLOAT16:return fp(e);case Mc.UNPACKED_FLOAT32:return cp(e);case Mc.UNPACKED_FLOAT16:return hp(e);case Mc.PACKED_4X1_UNSIGNED_BYTE:return dp(e);default:throw new Error("Unknown physical texture type "+t)}}(e,s);let a;if(r){const[e,n]=Wc(t[0],t[1]);a=e*n}else{const[e,n]=zc(t[0],t[1]);a=e*n}return a*function(t,e){const n=t;if(e===n.R32F)return 4;if(e===n.R16F)return 2;if(e===n.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===n.RGBA16F)return 8;throw new Error("Unknown internal format "+e)}(n,i)}function Xp(t,e){if(t===Bc.UPLOAD)return Mc.PACKED_2X2_FLOAT32;if(t===Bc.RENDER||null==t)return function(t){return u().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?Mc.PACKED_2X2_FLOAT32:Mc.UNPACKED_FLOAT32:t?Mc.PACKED_2X2_FLOAT16:Mc.UNPACKED_FLOAT16}(e);if(t===Bc.DOWNLOAD||t===Bc.PIXELS)return Mc.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function Yp(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class Jp{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let s=0;s<n.length;s++)n[s]=t[s]*e[s];this.outputShape=n,this.rank=n.length;const s=xd(this.rank),r=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let e=0;e<t.length;e++)s.push(`imod(${n[e]}, ${t[e]})`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}class Zp{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Qp="return abs(x);",tf="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",ef="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",nf="return (x >= 0.0) ? x : (exp(x) - 1.0);",sf=`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${ko};\n  float scale = ${$o};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`,rf="return -x;",af="return ceil(x);",of="return floor(x);",lf="return exp(x);",uf="return exp(x) - 1.0;",cf=`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Io};\n  float a1 = ${Eo};\n  float a2 = ${Ro};\n  float a3 = ${So};\n  float a4 = ${Ao};\n  float a5 = ${No};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`,hf="return x;",df="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",pf="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",ff="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class gf{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class mf{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=nd("rc",e),s=xd(e),r=function(t,e){if(1===t)return"rc";let n="";for(let s=0;s<t;s++)n+=e[s],s<t-1&&(n+=",");return n}(e,n),i=n.slice(-2),a=e<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${a}));\n      }\n    `}}const{segment_util:xf}=s,yf={};function bf(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?df:tf;if("elu"===t)return e?ff:nf;if("relu6"===t)return e?pf:ef;if("prelu"===t)return e?Ad:Rd;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class wf extends a{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!u().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=Oc(u().getNumber("WEBGL_VERSION"));this.binaryCache=((e=u().getNumber("WEBGL_VERSION"))in yf||(yf[e]={}),yf[e]),this.gpgpu=new gp(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new Kp(this.gpgpu),this.numMBBeforeWarning=null==u().global.screen?1024:u().global.screen.height*u().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new i(this,Ws())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,n){if((u().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||u().getBool("DEBUG"))&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={};return this.texData.set(s,{shape:e,dtype:n,values:t,usage:Bc.UPLOAD,refCount:1}),s}incRef(t){this.texData.get(t).refCount++}decRef(t){this.texData.has(t)&&this.texData.get(t).refCount--}move(t,e,n,s){if(u().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:s,values:e,usage:Bc.UPLOAD,refCount:1})}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.texData.has(e)){const t=this.texData.get(e);t.refCount--,t.refCount<1&&this.disposeData(e)}}readSync(t){const e=this.texData.get(t),{values:n,dtype:s,complexTensors:r,slice:i,shape:a,isPacked:o}=e;if(null!=i){let e;e=o?new gf(a,hf):new Zp(a,hf);const n=this.runWebGLProgram(e,[{dataId:t,shape:a,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;return l&&(u=Pe()),c="complex64"===s?Fo(r.real.dataSync(),r.imag.dataSync()):this.getValuesFromTexture(t),l&&(this.downloadWaitMs+=Pe()-u),this.convertAndCacheOnCPU(t,c)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise((t=>e.push(t)))}const e=this.texData.get(t),{values:n,shape:s,slice:r,dtype:i,complexTensors:a,isPacked:o}=e;if(null!=r){let e;e=o?new gf(s,hf):new Zp(s,hf);const n=this.runWebGLProgram(e,[{dataId:t,shape:s,dtype:i}],i),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(t);if(!u().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===u().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,c,h=null;if("complex64"!==i&&u().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(t);const e=this.texData.get(l.dataId);h=this.gpgpu.createBufferFromTexture(e.texture,...Pc(s))}if(this.pendingRead.set(t,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const t=await Promise.all([a.real.data(),a.imag.data()]);c=Fo(t[0],t[1])}else if(null==h)c=this.getValuesFromTexture(t);else{const t=ge(s);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,t)}null!=l&&this.disposeIntermediateTensorInfo(l);const d=this.convertAndCacheOnCPU(t,c),p=this.pendingRead.get(t);return this.pendingRead.delete(t),p.forEach((t=>t(d))),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),d}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const n=t[e];if(!Gc(n)){if(u().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:n,isPacked:s}=this.texData.get(t),r=ge(e);if(u().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),s=this.texData.get(n.dataId),i=this.gpgpu.downloadMatrixFromPackedTexture(s.texture,...Pc(e)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),i}const i=u().getBool("WEBGL_PACK")&&!0===s,a=i?nh(e):e,o=i?new np(a):new ep(a),l=this.runWebGLProgram(o,[{shape:a,dtype:n,dataId:t}],"float32"),c=this.texData.get(l.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),h}async time(t){const e=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,t();const r=fe(this.activeTimers.map((t=>t.query))).filter((t=>null!=t)),i=fe(this.activeTimers.map((t=>t.name))).filter((t=>null!=t));this.activeTimers=e,s&&(this.programTimersStack=null);const a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(r);a.kernelMs=function(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}(t),a.getExtraProfileInfo=()=>t.map(((t,e)=>({name:i[e],ms:t}))).map((t=>`${t.name}: ${t.ms}`)).join(", ")}else a.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,a}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Pe(),endMs:null}}endTimer(t){return u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=Pe(),t)}async getQueryTime(t){if(u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;this.releaseGPUData(t);const{complexTensors:e}=this.texData.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:s,usage:r,isPacked:i,slice:a}=this.texData.get(t),o=a&&a.origDataId||t,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=e&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(e,s,r,i)));const u=this.texData.get(t);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return u().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Ws().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){const n=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&t.every((t=>null==this.texData.get(t.dataId).texture&&ge(t.shape)<e))}getGPGPUContext(){return this.gpgpu}complex(t,e){const n=this.makeOutput(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:Ws().keep(t.clone()),imag:Ws().keep(e.clone())},n}real(t){return this.texData.get(t.dataId).complexTensors.real.clone()}imag(t){return this.texData.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){if(this.shouldExecuteOnCPU([t])){const s=qh(this.texData.get(t.dataId).values,e,n,t.shape,t.dtype);return this.makeOutput(n,t.dtype,s)}if(0===ge(n))return Dn([],n,t.dtype);const{isPacked:s}=this.texData.get(t.dataId),r=_s(t.shape,e,n);if(s||!r){const s=u().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Hp(n):new Vp(n),r=s.getCustomSetupFunc(e);return this.compileAndRun(s,[t],null,r)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)}shallowSlice(t,e,n){const s=this.texData.get(t.dataId),r=this.makeOutput(n,t.dtype),i=this.texData.get(r.dataId);Object.assign(i,s),i.shape=n,i.dtype=t.dtype;let a=Os(e,t.strides);s.slice&&(a+=s.slice.flatOffset),i.slice={flatOffset:a,origDataId:s.slice&&s.slice.origDataId||t.dataId};const o=this.dataRefCount.get(i.slice.origDataId)||1;return this.dataRefCount.set(i.slice.origDataId,o+1),r}stridedSlice(t,e,n,s){const r=this.tryRunOnCpuOrThrow([t],(()=>this.cpuBackend.stridedSlice(t,e,n,s)));if(r)return r;const i=$s(e,n,s);if(i.some((t=>0===t)))return Dn([],i);const a=new jp(e,s,i);return this.compileAndRun(a,[t])}reverse(t,e){const n=u().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new zp(t.shape,e):new Mp(t.shape,e);return this.compileAndRun(n,[t])}concat(t,e){if("complex64"===t[0].dtype){const n=t.map((t=>Fi(t))),s=t.map((t=>ci(t)));return Nn(this.concat(n,e),this.concat(s,e))}if(1===t.length)return t[0];if(t.length>u().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(t.length/2),s=this.concat(t.slice(0,n),e),r=this.concat(t.slice(n),e);return this.concat([s,r],e)}if(u().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){const n=new Od(t.map((t=>t.shape)),e);return this.compileAndRun(n,t)}const n=Dr(t.map((t=>t.shape)),e),s=t.map((t=>t.as2D(-1,ge(t.shape.slice(e))))),r=new _d(s.map((t=>t.shape)));return this.compileAndRun(r,s).reshape(n)}neg(t){const e=this.tryRunOnCpuOrThrow([t],(()=>this.cpuBackend.neg(t)));if(e)return e;if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,rf,t.dtype);const n=new Zp(t.shape,rf);return this.compileAndRun(n,[t])}batchMatMul(t,e,n,s){const r=n?t.shape[2]:t.shape[1],i=s?e.shape[1]:e.shape[2],a=n?t.shape[1]:t.shape[2],[o,,]=t.shape;if((1===r||1===i)&&a>1e3){n&&(t=ar(t,[0,2,1])),s&&(e=ar(e,[0,2,1]));const r=1===i?t:t.as3D(o,a,1),l=1===i?2:1,u=1===i?e.as3D(o,1,a):e;return this.multiply(r,u).sum(l,!0)}const l=dn(t.dtype,e.dtype),u=new kp(t.shape,[o,r,i],n,s);return this.compileAndRun(u,[t,e],l)}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:s,bias:r,activation:i,preluActivationWeights:a}){const o=n?t.shape[2]:t.shape[1],l=s?e.shape[1]:e.shape[2],[u,,]=t.shape,c=dn(t.dtype,e.dtype),h=null!=r,d=null!=a,p=i?bf(i,!0):null,f=new kp(t.shape,[u,o,l],n,s,h,p,d),g=[t,e];return r&&g.push(r),a&&g.push(a),this.compileAndRun(f,g,c)}multiply(t,e){if("complex64"===t.dtype){const n=this.texData.get(t.dataId),s=this.texData.get(e.dataId),r=new kd("return areal * breal - aimag * bimag;",t.shape,e.shape),i=new kd("return areal * bimag + aimag * breal;",t.shape,e.shape),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,s.complexTensors.real),this.makeComplexComponentTensorInfo(e,s.complexTensors.imag)],o=this.compileAndRun(r,a),l=this.compileAndRun(i,a),u=this.complex(o,l);return o.dispose(),l.dispose(),u}const n=dn(t.dtype,e.dtype);if(this.shouldExecuteOnCPU([t,e])){const s=this.texData.get(t.dataId),r=this.texData.get(e.dataId),[i,a]=jh(t.shape,e.shape,s.values,r.values,n);return this.makeOutput(a,n,i)}if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Ed,t.dtype);const s=new Sd(Ed,t.shape,e.shape);return this.compileAndRun(s,[t,e],t.dtype)}localResponseNormalization4D(t,e,n,s,r){const i=u().getBool("WEBGL_PACK_NORMALIZATION")?new wp(t.shape,e,n,s,r):new yp(t.shape,e,n,s,r);return this.compileAndRun(i,[t])}LRNGrad(t,e,n,s,r,i,a){const o=new bp(e.shape,s,r,i,a);return this.compileAndRun(o,[e,n,t])}tile(t,e){if("string"===t.dtype){const n=this.readSync(t.dataId).map((t=>Ue(t)));return function(t,e){const n=new Array(t.rank);for(let s=0;s<n.length;s++)n[s]=t.shape[s]*e[s];const s=hs(n,t.dtype);for(let e=0;e<s.values.length;++e){const n=s.indexToLoc(e),r=new Array(t.rank);for(let e=0;e<r.length;e++)r[e]=n[e]%t.shape[e];const i=t.locToIndex(r);s.values[e]=t.values[i]}return s.toTensor()}(hs(t.shape,t.dtype,n),e)}const n=new Jp(t.shape,e);return this.compileAndRun(n,[t])}pad(t,e,n){const s=u().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Sp(t.shape,e,n):new Rp(t.shape,e,n);return this.compileAndRun(s,[t])}gather(t,e,n){const s=this.tryRunOnCpuOrThrow([t,e],(()=>this.cpuBackend.gather(t,e,n)));if(s)return s;const r=new op(t.shape,e.size,n);return this.compileAndRun(r,[t,e])}batchToSpaceND(t,e,n){he(t.rank<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const s=e.reduce(((t,e)=>t*e)),r=fo(t.shape,e,s),i=go(r.length,e.length),a=mo(t.shape,e,s),o=xo(n,e.length),l=yo(a,n,e.length);return ar(t.reshape(r),i).reshape(a).slice(o,l)}spaceToBatchND(t,e,n){he(t.rank<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const s=e.reduce(((t,e)=>t*e)),r=[[0,0]];r.push(...n);for(let n=1+e.length;n<t.shape.length;++n)r.push([0,0]);const i=t.pad(r),a=fo(i.shape,e,s,!1),o=go(a.length,e.length,!1),l=mo(i.shape,e,s,!1),u=ar(i.reshape(a),o);return ir(u,l)}reduce(t,e,n){const s=t.shape[0],r=t.shape[1],i=si(r),a=Math.ceil(r/i),o=new Tp({windowSize:i,inSize:r,batchSize:s,outSize:a},e),l=this.compileAndRun(o,[t],n);return 1===l.shape[1]?l:this.reduce(l,e,n)}argReduce(t,e,n=null){let s=t.shape[0],r=t.shape[1];null!=n&&(s=n.shape[0],r=n.shape[1]);const i=si(r),a={windowSize:i,inSize:r,batchSize:s,outSize:Math.ceil(r/i)},o=new td(a,e,null==n),l=[t];null!=n&&l.push(n);const u=this.compileAndRun(o,l,"int32");return 1===u.shape[1]?u:this.argReduce(t,e,u)}argReducePacked(t,e,n=null){const s=null!=n?n.shape:t.shape,r=si(s[s.length-1]),i=new wd(s,r,e,null==n),a=null==n?[t]:[t,n],o=this.compileAndRun(i,a,"int32");return o.rank===t.rank?this.argReducePacked(t,e,o):o}sum(t,e){er("sum",e,t.rank);const[n,s]=Qs(t.shape,e),r=ge(s),i=t.as2D(-1,r),a=pn(t.dtype);return this.reduce(i,"sum",a).reshape(n)}prod(t,e){const n=this.tryRunOnCpuOrThrow([t],(()=>this.cpuBackend.prod(t,e)));if(n)return n;const[s,r]=Qs(t.shape,e),i=ge(r),a=t.as2D(-1,i),o=pn(t.dtype);return this.reduce(a,"prod",o).reshape(s)}unsortedSegmentSum(t,e,n){let s=0;const r=nr([s],t.rank);let i=t;null!=r&&(i=ar(t,r),s=rr(1,t.rank)[0]);const a=xf.computeOutShape(i.shape,s,n),o=ge([i.shape[s]]),l=i.as2D(-1,o),u=pn(t.dtype);let c=this.segOpCompute(l,"unsortedSegmentSum",e,u,n).reshape(a);return null!=r&&(c=ar(c,sr(r))),c}segOpCompute(t,e,n,s,r){const i=t.shape[0],a=t.shape[1],o=xf.segOpComputeOptimalWindowSize(a,r),l=new Wp({windowSize:o,inSize:a,batchSize:i,numSegments:r},e),u=this.compileAndRun(l,[t,n],s);return u.shape[1]===r?u:(n=Gi(0,r).tile([a/o]),this.segOpCompute(u,e,n,s,r))}argMinMaxReduce(t,e,n){const s=[e];if(er("arg"+n.charAt(0).toUpperCase()+n.slice(1),s,t.rank),!u().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){const[e,r]=Qs(t.shape,s),i=ge(r),a=t.as2D(-1,i);return this.argReduce(a,n).reshape(e)}return this.argReducePacked(t,n)}argMin(t,e){return this.argMinMaxReduce(t,e,"min")}argMax(t,e){return this.argMinMaxReduce(t,e,"max")}cumsum(t,e,n,s){if(e!==t.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${t.rank-1} but got axis=`+e);const r=t.shape[e];let i=t;for(let e=0;e<=Math.ceil(Math.log2(r))-1;e++){const n=new qd(t.shape,!1,s),r=n.getCustomSetupFunc(e),a=i;i=this.compileAndRun(n,[i],i.dtype,r),a.dispose()}if(n){const e=new qd(t.shape,n,s),r=i;i=this.compileAndRun(e,[i]),r.dispose()}return i}equal(t,e){if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");const n=new Sd("return float(a == b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}notEqual(t,e){if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");const n=new Sd("return float(a != b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}less(t,e){const n=this.tryRunOnCpuOrThrow([t,e],(()=>this.cpuBackend.less(t,e)));if(n)return n;if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");const s=new Sd("return float(a < b);",t.shape,e.shape);return this.compileAndRun(s,[t,e],"bool")}lessEqual(t,e){if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");const n=new Sd("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greater(t,e){const n=this.tryRunOnCpuOrThrow([t,e],(()=>this.cpuBackend.greater(t,e)));if(n)return n;if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");const s=new Sd("return float(a > b);",t.shape,e.shape);return this.compileAndRun(s,[t,e],"bool")}greaterEqual(t,e){if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const n=new Sd("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalNot(t){const e=new Zp(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])}logicalAnd(t,e){if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const n=new Sd("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalOr(t,e){if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const n=new Sd("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}select(t,e,n){const s=new Up(t.rank,e.shape,e.rank);return this.compileAndRun(s,[t,e,n],dn(e.dtype,n.dtype))}where(t){To("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return function(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const s=hs(t,"int32"),r=hs([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const i=s.indexToLoc(n[e]),a=e*t.length;r.values.set(i,a)}return r.toTensor()}(t.shape,e)}topk(t,e,n){return function(t,e,n,s,r){const i=e[e.length-1],[a,o]=[t.length/i,i],l=$e(n,a*s),u=$e("int32",a*s);for(let e=0;e<a;e++){const n=e*o,r=t.subarray(n,n+o),i=[];for(let t=0;t<r.length;t++)i.push({value:r[t],index:t});i.sort(((t,e)=>e.value-t.value));const a=e*s,c=l.subarray(a,a+s),h=u.subarray(a,a+s);for(let t=0;t<s;t++)c[t]=i[t].value,h[t]=i[t].index}const c=e.slice();return c[c.length-1]=s,[Dn(l,c,n),Dn(u,c,"int32")]}(t.dataSync(),t.shape,t.dtype,e)}min(t,e){er("min",e,t.rank);const[n,s]=Qs(t.shape,e),r=ge(s),i=t.as2D(-1,r);return this.reduce(i,"min",i.dtype).reshape(n)}minimum(t,e){const n=this.tryRunOnCpuOrThrow([t,e],(()=>this.cpuBackend.minimum(t,e)));if(n)return n;const s=u().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Nd("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Sd("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(s,[t,e])}mod(t,e){const n=u().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Nd("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Sd("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}maximum(t,e){const n=this.tryRunOnCpuOrThrow([t,e],(()=>this.cpuBackend.maximum(t,e)));if(n)return n;const s=u().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Nd("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Sd("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(s,[t,e])}all(t,e){er("all",e,t.rank);const[n,s]=Qs(t.shape,e),r=ge(s),i=t.as2D(-1,r);return this.reduce(i,"all",i.dtype).reshape(n)}any(t,e){er("any",e,t.rank);const[n,s]=Qs(t.shape,e),r=ge(s),i=t.as2D(-1,r);return this.reduce(i,"any",i.dtype).reshape(n)}floorDiv(t,e){const n="int32";if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",n);const s=new Sd("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(s,[t,e],n)}add(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,$d);const n=dn(t.dtype,e.dtype);if(this.shouldExecuteOnCPU([t,e])){const s=this.texData.get(t.dataId),r=this.texData.get(e.dataId),[i,a]=zh(t.shape,e.shape,s.values,r.values,n);return this.makeOutput(a,n,i)}if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,$d,n);const s=new Sd($d,t.shape,e.shape);return this.compileAndRun(s,[t,e],n)}packedUnaryOp(t,e,n){const s=new gf(t.shape,e);return this.compileAndRun(s,[t],n)}packedBinaryOp(t,e,n,s,r=!1){const i=new Nd(n,t.shape,e.shape,r);return this.compileAndRun(i,[t,e],s)}complexSeparableBinaryOp(t,e,n){const s=this.texData.get(t.dataId),r=this.texData.get(e.dataId),[i,a]=[[s.complexTensors.real,r.complexTensors.real],[s.complexTensors.imag,r.complexTensors.imag]].map((s=>{const[r,i]=s,a=this.makeComplexComponentTensorInfo(t,r),o=this.makeComplexComponentTensorInfo(e,i),l=new Sd(n,t.shape,e.shape);return this.compileAndRun(l,[a,o],dn(r.dtype,i.dtype))})),o=this.complex(i,a);return i.dispose(),a.dispose(),o}makeComplexComponentTensorInfo(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}addN(t){if(1===t.length)return t[0];if(t.length>u().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),s=this.addN(t.slice(e));return this.addN([n,s])}const e=t.map((t=>t.dtype)).reduce(((t,e)=>dn(t,e))),n=t.map((t=>t.shape)),s=u().getBool("WEBGL_PACK")?new Qh(t[0].shape,n):new Zh(t[0].shape,n);return this.compileAndRun(s,t,e)}subtract(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,Id);const n=dn(t.dtype,e.dtype);if(this.shouldExecuteOnCPU([t,e])){const s=this.texData.get(t.dataId),r=this.texData.get(e.dataId),[i,a]=Xh(t.shape,e.shape,s.values,r.values,n);return this.makeOutput(a,n,i)}if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Id,t.dtype);const s=new Sd(Id,t.shape,e.shape);return this.compileAndRun(s,[t,e],n)}pow(t,e){const n=u().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Nd("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Sd("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),s=dn(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],s)}ceil(t){if(this.shouldExecuteOnCPU([t])){const e=Ph(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,af,t.dtype);const e=new Zp(t.shape,af);return this.compileAndRun(e,[t])}floor(t){if(this.shouldExecuteOnCPU([t])){const e=Vh(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,of,t.dtype);const e=new Zp(t.shape,of);return this.compileAndRun(e,[t])}sign(t){const e=new Zp(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])}isNaN(t){const e=new Zp(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")}isInf(t){const e=new Zp(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")}isFinite(t){const e=new Zp(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")}round(t){const e=new Zp(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])}exp(t){if(this.shouldExecuteOnCPU([t])){const e=Wh(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,lf,t.dtype);const e=new Zp(t.shape,lf);return this.compileAndRun(e,[t])}expm1(t){if(this.shouldExecuteOnCPU([t])){const e=Uh(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,uf,t.dtype);const e=new Zp(t.shape,uf);return this.compileAndRun(e,[t])}softmax(t,e){const n=Ce([e],t.shape),s=mi(t,n),r=tr(s.shape,n),i=this.subtract(t,s.reshape(r)),a=this.exp(i),o=this.sum(a,n).reshape(r);return Hr(a,o)}log(t){if(this.shouldExecuteOnCPU([t])){const e=Gh(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);const e=new Zp(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])}log1p(t){const e=new Zp(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])}sqrt(t){const e=new Zp(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])}rsqrt(t){if(this.shouldExecuteOnCPU([t])){const e=Kh(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}const e=new Zp(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])}reciprocal(t){const e=new Zp(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])}relu(t){let e;return e=u().getBool("WEBGL_PACK")?new gf(t.shape,df):new Zp(t.shape,tf),this.compileAndRun(e,[t])}relu6(t){let e;return e=u().getBool("WEBGL_PACK")?new gf(t.shape,pf):new Zp(t.shape,ef),this.compileAndRun(e,[t])}prelu(t,e){const n=u().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Nd(Ad,t.shape,e.shape):new Sd(Rd,t.shape,e.shape);return this.compileAndRun(n,[t,e])}elu(t){if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,ff,t.dtype);const e=new Zp(t.shape,nf);return this.compileAndRun(e,[t])}eluDer(t,e){const n=u().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Nd("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new Sd("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}selu(t){const e=new Zp(t.shape,sf);return this.compileAndRun(e,[t])}int(t){const e=new Zp(t.shape,"return float(int(x));");return this.compileAndRun(e,[t],"int32")}clip(t,e,n){let s;s=u().getBool("WEBGL_PACK_CLIP")?new Dd(t.shape):new Td(t.shape);const r=s.getCustomSetupFunc(e,n);return this.compileAndRun(s,[t],null,r)}abs(t){if(this.shouldExecuteOnCPU([t])&&"complex64"!==t.dtype){const e=Mh(this.texData.get(t.dataId).values);return this.makeOutput(t.shape,t.dtype,e)}if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Qp,t.dtype);const e=new Zp(t.shape,Qp);return this.compileAndRun(e,[t])}complexAbs(t){const e=this.texData.get(t.dataId),n=new Fd(t.shape),s=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,s)}sigmoid(t){const e=new Zp(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])}softplus(t){const e=new Zp(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])}asin(t){const e=new Zp(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])}acos(t){const e=new Zp(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])}atan(t){const e=new Zp(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])}sinh(t){const e=new Zp(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}cosh(t){const e=new Zp(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}tanh(t){const e=new Zp(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])}asinh(t){const e=new Zp(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])}acosh(t){const e=new Zp(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])}atanh(t){const e=new Zp(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])}erf(t){const e=new Zp(t.shape,cf);return this.compileAndRun(e,[t])}step(t,e){const n=new Zp(t.shape,function(t=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `}(e));return this.compileAndRun(n,[t])}conv2dByMatMul(t,e,n,s,r,i){const a=t.shape,o=this.texData.get(t.dataId),l=n.inChannels,c=a[0]*a[1]*a[2],h=n.outChannels,d="channelsLast"===n.dataFormat,p=(1===c||1===h)&&l>1e3,f=a[2]%2!=0&&!!o.isPacked;if(p||!u().getBool("WEBGL_LAZILY_UNPACK")||!u().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!f){const o=d?a[0]*a[1]*a[2]:a[0]*a[2]*a[3],l=ir(t,[1,o,n.inChannels]),u=ir(e,[1,n.inChannels,n.outChannels]),c=this.fusedBatchMatMul({a:l,b:u,transposeA:!1,transposeB:!1,bias:s,activation:r,preluActivationWeights:i});return ir(c,n.outShape)}const g=d?a[0]*a[1]*(a[2]+1):a[0]*a[2]*(a[3]+1),m={dataId:t.dataId,shape:[1,g,n.inChannels],dtype:t.dtype},x=o.shape;o.shape=o.shape.slice(),o.shape[o.shape.length-2]++,he(rh(o.shape,m.shape),(()=>`packed reshape ${o.shape} to ${m.shape} isn't free`));const y=ir(e,[1,n.inChannels,n.outChannels]),b=this.fusedBatchMatMul({a:m,b:y,transposeA:!1,transposeB:!1,bias:s,activation:r,preluActivationWeights:i}),w=this.texData.get(b.dataId);return he(w.isPacked,(()=>"batchMatMul result is expected to be packed")),o.shape=x,w.shape=n.outShape,Ws().makeTensorFromDataId(b.dataId,n.outShape,b.dtype)}conv2dWithIm2Row(t,e,n,s,r,i){const{filterWidth:a,filterHeight:o,inChannels:l,outWidth:u,outHeight:c,dataFormat:h}=n,d="channelsLast"===h,p=a*o*l,f=c*u,g=[p,f],m=t.squeeze([0]),x=e.reshape([1,p,-1]),y=new xp(g,m.shape,n),b=this.compileAndRun(y,[m]).reshape([1,g[0],g[1]]),w=null!=s,v=null!=i,C=r?bf(r,!0):null,k=new kp(b.shape,[1,f,n.outChannels],!0,!1,w,C,v),$=[b,x];s&&$.push(s),v&&$.push(i);const I=this.compileAndRun(k,$);return d?I.reshape([1,c,u,n.outChannels]):I.reshape([1,n.outChannels,c,u])}fusedConv2d({input:t,filter:e,convInfo:n,bias:s,activation:r,preluActivationWeights:i}){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n,s,r,i);if(u().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n,s,r,i);const a=null!=s,o=null!=i,l=r?bf(r,!1):null,c=new Vd(n,a,l,o),h=[t,e];return s&&h.push(s),i&&h.push(i),this.compileAndRun(c,h)}conv2d(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(u().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);const s=new Vd(n);return this.compileAndRun(s,[t,e])}conv2dDerInput(t,e,n){const s=new Md(n);return this.compileAndRun(s,[t,e])}conv2dDerFilter(t,e,n){const s=new Bd(n);return this.compileAndRun(s,[t,e])}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:s,activation:r,preluActivationWeights:i}){const a=u().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1,o=r?bf(r,a):null,l=[t,e],c=null!=s,h=null!=i;let d;return c&&l.push(s),h&&l.push(i),a?(d=new jd(n,c,o,h),this.compileAndRun(d,l)):(d=new Hd(n,c,o,h),this.compileAndRun(d,l))}depthwiseConv2D(t,e,n){let s;return u().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(s=new jd(n),this.compileAndRun(s,[t,e])):(s=new Hd(n),this.compileAndRun(s,[t,e]))}depthwiseConv2DDerInput(t,e,n){const s=new Ud(n);return this.compileAndRun(s,[t,e])}depthwiseConv2DDerFilter(t,e,n){const s=new Wd(n);return this.compileAndRun(s,[t,e])}conv3d(t,e,n){const s=new Gd(n);return this.compileAndRun(s,[t,e])}conv3dDerInput(t,e,n){const s=new Pd(n);return this.compileAndRun(s,[t,e])}conv3dDerFilter(t,e,n){const s=new zd(n);return this.compileAndRun(s,[t,e])}cast(t,e){return Wo(t,e,this)}unstack(t,e){const n=t.shape[e],s=new Array(t.rank-1);let r=0;for(let n=0;n<t.rank;n++)n!==e&&(s[r++]=t.shape[n]);const i=new Array(t.rank).fill(0),a=t.shape.slice();a[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)i[e]=n,o[n]=this.slice(t,i,a).reshape(s);return o}avgPool3d(t,e){const n=new Np(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}avgPool3dBackprop(t,e,n){const s=new Cd(n);return this.compileAndRun(s,[t],e.dtype)}maxPool3d(t,e){const n=new Np(e,"max",!1);return this.compileAndRun(n,[t],"float32")}maxPool3dBackprop(t,e,n,s){const r=new Np(s,"max",!0),i=this.compileAndRun(r,[e]),a=new Cp(s),o=this.compileAndRun(a,[t,i],e.dtype);return i.dispose(),o}resizeBilinear(t,e,n,s){const r=u().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Op(t.shape,e,n,s):new _p(t.shape,e,n,s);return this.compileAndRun(r,[t],"float32")}resizeBilinearBackprop(t,e,n){const s=new Fp(t,e,n);return this.compileAndRun(s,[t])}resizeNearestNeighbor(t,e,n,s){const r=new Bp(t.shape,e,n,s);return this.compileAndRun(r,[t])}resizeNearestNeighborBackprop(t,e,n){const s=new Lp(t,e,n);return this.compileAndRun(s,[t])}multinomial(t,e,n,s){const r=e?t:ea(t),i=r.shape[0],a=r.shape[1],o=new $p(i,a,n),l=o.getCustomSetupFunc(s);return this.compileAndRun(o,[r],"int32",l)}oneHot(t,e,n,s){const r=new Ip(t.size,e,n,s);return this.compileAndRun(r,[t])}diag(t){const e=new tp(t.size);return this.compileAndRun(e,[t])}cropAndResize(t,e,n,s,r,i){const a=new Kd(t.shape,e.shape,s,r,i);return this.compileAndRun(a,[t,e,n],"float32")}depthToSpace(t,e,n){he(e>1,(()=>"blockSize should be > 1 for depthToSpace, but was: "+e));const s=t.shape[0],r="NHWC"===n?t.shape[1]:t.shape[2],i="NHWC"===n?t.shape[2]:t.shape[3],a="NHWC"===n?t.shape[3]:t.shape[1],o=r*e,l=i*e,u=a/(e*e),c=new Qd("NHWC"===n?[s,o,l,u]:[s,u,o,l],e,n);return this.compileAndRun(c,[t])}split(t,e,n){return function(t,e,n){const s=new Array(t.rank).fill(0),r=t.shape.slice();return e.map((e=>{const i=[...r];i[n]=e;const a=Yi(t,s,i);return s[n]+=e,a}))}(t,e,n)}scatterND(t,e,n){const{sliceRank:s,numUpdates:r,sliceSize:i,strides:a,outputSize:o}=Co(0,t,n),l=[o/i,i],u=t.reshape([r,s]),c=e.reshape([r,i]);if(0===o)return Uo(Dn([]),n);const h=Ks(0),d=new Pp(r,s,u.rank,c.rank,a,l);return this.compileAndRun(d,[c,u,h]).reshape(n)}sparseToDense(t,e,n,s){const{sliceRank:r,numUpdates:i,strides:a,outputSize:o}=Co(0,t,n),l=new Pp(i,r,t.rank,e.rank,a,[o,1],!1);return this.compileAndRun(l,[e,t,s]).reshape(n)}fft(t){return this.fftImpl(t,!1)}ifft(t){return this.fftImpl(t,!0)}fftImpl(t,e){const n=this.texData.get(t.dataId),s=new ip("return real * expR - imag * expI;",t.shape,e),r=new ip("return real * expI + imag * expR;",t.shape,e),i=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],a=this.compileAndRun(s,i),o=this.compileAndRun(r,i),l=this.complex(a,o).as2D(t.shape[0],t.shape[1]);return a.dispose(),o.dispose(),l}gatherND(t,e){const n=e.shape,s=n[n.length-1],[r,i,a,o]=bo(t,e),l=e.reshape([i,s]),u=t.reshape([t.size/a,a]),c=new lp(s,o,[i,a]);return this.compileAndRun(c,[u,l]).reshape(r)}fill(t,e,n){if("string"===(n=n||Te(e))){const s=Ie(n,ge(t));return s.fill(e),Ws().makeTensor(s,t,n,this)}{const s=new ap(t,e),r=s.getCustomSetupFunc(e);return this.compileAndRun(s,[],n,r)}}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)}zerosLike(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)}linspace(t,e,n){return Vo(t,e,n)}makeTensorInfo(t,e,n){const s=this.write(n,t,e);return this.texData.get(s).usage=null,{dataId:s,shape:t,dtype:e}}makeOutput(t,e,n){const{dataId:s}=this.makeTensorInfo(t,e,n);return Ws().makeTensorFromDataId(s,t,e,this)}unpackTensor(t){const e=new mf(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new Ep(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[th(t.shape),...eh(t.shape)],s={dtype:t.dtype,shape:n,dataId:t.dataId},r=[th(e),...eh(e)],i=new Dp(r,n),a=this.runWebGLProgram(i,[s],t.dtype,null,!0);return{dataId:a.dataId,shape:e,dtype:a.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:s,dtype:r}=e,i=nh(s);let a;return a=n?new Zd(i):new Jd(i),{dtype:r,shape:s,dataId:this.runWebGLProgram(a,[{shape:i,dtype:r,dataId:t}],r,null,!0).dataId}}runWebGLProgram(t,e,n,s,r=!1){const i=this.makeTensorInfo(t.outputShape,n),a=this.texData.get(i.dataId);if(t.packedOutput&&(a.isPacked=!0),t.outPackingScheme===Lc.DENSE){const e=Pc(t.outputShape);a.texShape=e.map((t=>2*t))}if(null!=t.outTexUsage&&(a.usage=t.outTexUsage),0===ge(i.shape))return a.values=$e(i.dtype,0),i;const o=[],l=e.map((e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&ge(e.shape)<=u().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?this.unpackTensor(e):this.packTensor(e),o.push(e),n=this.texData.get(e.dataId);else if(n.isPacked&&!rh(n.shape,e.shape)){const t=e,s=e.shape;e.shape=n.shape,e=this.packedReshape(e,s),o.push(e),n=this.texData.get(e.dataId),t.shape=s}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:a,isUniform:!1},h=function(t,e,n){let s="";e.concat(n).forEach((t=>{const e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${n}_${e}`}));const r=t.userCode;let i=t.constructor.name;return i+="_"+s+"_"+r,i}(t,l,c),d=this.getAndSaveBinary(h,(()=>function(t,e,n,s){const r=e.userCode,i=n.map(((t,n)=>{const s={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(s.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:s}})),a=i.map((t=>t.shapeInfo)),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},l=ld(i,o,r,e.packedInputs),c=t.createProgram(l);let h=null;const d=t.getUniformLocation(c,"NAN",!1);1===u().getNumber("WEBGL_VERSION")&&(h=t.getUniformLocation(c,"INFINITY",!1));const p={};for(let n=0;n<e.variableNames.length;n++){const s=e.variableNames[n],r=!1;p[s]=t.getUniformLocation(c,s,r),p["offset"+s]=t.getUniformLocation(c,"offset"+s,r)}return{program:e,source:l,webGLProgram:c,uniformLocations:p,inShapeInfos:a,outShapeInfo:o,infLoc:h,nanLoc:d}}(this.gpgpu,t,l,c))),p=null!=this.activeTimers;let f;if(p&&(f=this.startTimer()),function(t,e,n,s,r){mp(e.inShapeInfos,n),mp([e.outShapeInfo],[s]);const i=s.texData.texture,a=s.texData.texShape;s.texData.isPacked?t.setOutputPackedMatrixTexture(i,a[0],a[1]):t.setOutputMatrixTexture(i,a[0],a[1]),t.setProgram(e.webGLProgram),1===u().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach(((n,s)=>{const r=e.program.variableNames[s],i=e.uniformLocations[r],a=e.uniformLocations["offset"+r];if(null!=i)if(n.isUniform)if(ge(n.shape)<2)t.gl.uniform1f(i,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(i,e)}else null!=n.texData.slice&&null!=a&&t.gl.uniform1i(a,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,i,s)})),null!=r&&r(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,d,l,c,s),o.forEach((t=>this.disposeIntermediateTensorInfo(t))),p&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!u().getBool("WEBGL_LAZILY_UNPACK")&&a.isPacked&&!1===r){const t=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),t}return i}compileAndRun(t,e,n,s,r=!1){n=n||e[0].dtype;const i=this.runWebGLProgram(t,e,n,s,r);return Ws().makeTensorFromDataId(i.dataId,i.shape,i.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(u().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Vs((()=>{if(!u().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=u().getBool("DEBUG");u().set("DEBUG",!1);const e=this.abs(Ks(1e-8)).dataSync()[0];if(u().set("DEBUG",t),e>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:n,dtype:s,values:r,texture:i,usage:a,isPacked:o}=e;if(null!=i)return;const l=null!=this.activeTimers;let c;l&&(c=Pe());let h=e.texShape;if(null==h&&(h=function(t,e=!1){let n=u().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(n*=2,1===(t=t.map(((e,n)=>n>=t.length-2?ce(t[n]):t[n]))).length&&(t=[2,t[0]])),2!==t.length){const e=ke(t);t=e.newShape}let s=ge(t);if(t.length<=1&&s<=n)return[1,s];if(2===t.length&&t[0]<=n&&t[1]<=n)return t;if(3===t.length&&t[0]*t[1]<=n&&t[2]<=n)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=n&&t[1]*t[2]<=n)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=n&&t[3]<=n)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=n&&t[1]*t[2]*t[3]<=n)return[t[0],t[1]*t[2]*t[3]];if(e){const e=th(t);let n=2,r=2;return t.length&&([n,r]=eh(t)),s=e*(n/2)*(r/2),ye(s).map((t=>2*t))}return ye(s)}(n,o),e.texShape=h),null!=r){const t=nh(n);let i,a=h[1],u=h[0];const d=r instanceof Uint8Array;o?([a,u]=Wc(h[0],h[1]),i=new rp(t,[u,a],d)):i=new sp(t,[u,a],d);const p=this.makeTensorInfo([u,a],s);this.texData.get(p.dataId).usage=d?Bc.PIXELS:Bc.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(p.dataId),a,u,r);const f=!0,g=this.runWebGLProgram(i,[p],s,null,f),m=this.texData.get(g.dataId);e.texture=m.texture,e.texShape=m.texShape,e.isPacked=m.isPacked,e.usage=m.usage,this.disposeIntermediateTensorInfo(p),this.texData.delete(g.dataId),e.values=null,l&&(this.uploadWaitMs+=Pe()-c)}else{const t=this.acquireTexture(h,a,s,o);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:s}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error("Unknown dtype "+e)}(e,s)),n.values}acquireTexture(t,e,n,s){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,s)}computeBytes(t,e){return t[0]*t[1]*Se(e)}tryRunOnCpuOrThrow(t,e){if(this.shouldExecuteOnCPU(t))try{return e()}catch(t){if(u().getBool("IS_TEST"))throw new Error("CPU forwarding failed")}return null}}function vf(t){return({inputs:e,backend:n})=>{const{x:s}=e,r=n,i=new Zp(s.shape,t);return r.runWebGLProgram(i,[s],s.dtype)}}function Cf(t,e,n,s){return({inputs:r,backend:i})=>{const{a,b:o}=r,l=i,c=u().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Nd(e,a.shape,o.shape,!!n):new Sd(t,a.shape,o.shape),h=s||a.dtype;return l.runWebGLProgram(c,[a,o],h)}}Cn()&&function(t,e,n=1){wn.registerBackend(t,e,n)}("webgl",(()=>new wf),2);const kf=Cf("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n","\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"),$f={kernelName:k,backendName:"webgl",kernelFunc:kf};function If(t){const{inputs:e,backend:n}=t,{x:s}=e;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const Ef={kernelName:J,backendName:"webgl",kernelFunc:If},Rf={kernelName:$,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e;ch(r,"avgPool");const{filterSize:i,strides:a,pad:o,dimRoundingMode:l}=s;he(vr(a,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`));const u=hr(r.shape,i,a,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&me(u.inShape,u.outShape))return If({inputs:{x:r},backend:n});const c=new Ap(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}},Sf={kernelName:I,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{dy:r,input:i}=e,a=i;ch([r,i],"avgPoolBackprop");const{filterSize:o,strides:l,pad:u}=s,c=hr(a.shape,o,l,1,u),h=new vd(c);return n.runWebGLProgram(h,[r],a.dtype)}};class Af{constructor(t,e,n,s,r,i){this.outputShape=[],this.variableNames=["x","mean","variance"],Xr(t,e),Xr(t,n);let a="0.0";null!=s&&(Xr(t,s),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let o="1.0";null!=r&&(Xr(t,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${a};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${i}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Nf{constructor(t,e,n,s,r,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Xr(t,e),Xr(t,n);let a="vec4(0.0)";null!=s&&(Xr(t,s),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(Xr(t,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${a};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${i}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Tf={kernelName:q,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:s,mean:r,variance:i,offset:a,scale:o}=t;he(r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),he(null==a||r.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),he(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const c=[s,r,i];let h=null;null!=a&&(h=a.shape,c.push(a));let d=null;null!=o&&(d=o.shape,c.push(o));const p=u().getBool("WEBGL_PACK_NORMALIZATION")?new Nf(s.shape,r.shape,i.shape,h,d,l):new Af(s.shape,r.shape,i.shape,h,d,l);return e.runWebGLProgram(p,c,c[0].dtype)}},Df=vf("if (isnan(x)) return x;\n  return cos(x);\n"),Ff={kernelName:B,backendName:"webgl",kernelFunc:Df},_f=Cf("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;","\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",!0),Of={kernelName:U,backendName:"webgl",kernelFunc:_f};class Lf{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Bf={kernelName:H,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{image:n}=t,s=e,r=new Lf(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}};class Mf{constructor(t){this.variableNames=["A"];const e=sd(),[n,s]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class zf{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=sd(),[n,s]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const Pf={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t;let{pixels:r}=e;const{numChannels:i}=s,a="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,c]=a?[r.videoWidth,r.videoHeight]:[r.width,r.height],h=[c,l],d=[c,l,i];(o||a)&&(null==Wf&&(Wf=document.createElement("canvas").getContext("2d")),Wf.canvas.width=l,Wf.canvas.height=c,Wf.drawImage(r,0,0,l,c),r=Wf.canvas);const p=n.makeTensorInfo(h,"int32");n.texData.get(p.dataId).usage=Bc.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),r);const f=u().getBool("WEBGL_PACK")?new zf(d):new Mf(d),g=n.runWebGLProgram(f,[p],"int32");return n.disposeData(p.dataId),g}};let Wf;function Uf(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e,{shape:i}=s,a=n,o=ge(r.shape),l=ve(i,o),u=ge(l);he(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=a.texData.get(r.dataId);return!c.isPacked||rh(r.shape,l)||null!==c.texture&&rh(c.shape,l)?(a.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(t,e,n){const s=[th(t.shape),...eh(t.shape)],r={dtype:t.dtype,shape:s,dataId:t.dataId},i=[th(e),...eh(e)],a=new Dp(i,s),o=n.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:o.dataId,shape:e,dtype:o.dtype}}(r,l,a)}const Vf={kernelName:vt,backendName:"webgl",kernelFunc:Uf};class Gf{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let s=0;s<n.length;s++)n[s]=t[e[s]];this.outputShape=n,this.rank=n.length;const s=xd(this.rank),r=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(e);for(let e=0;e<t.length;e++)s[t[e]]=n[e];return s.join()}(e);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class Hf{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let s=0;s<n.length;s++)n[s]=t[e[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=xd(this.rank),r=ed("rc",this.rank),i=new Array(this.rank);for(let t=0;t<e.length;t++)i[e[t]]=r[t];const a=`vec2(${i.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${i.join()}), ${a})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function jf(t,e,n){const s=u().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Hf(t.shape,e):new Gf(t.shape,e);return n.runWebGLProgram(s,[t],t.dtype)}const Kf={kernelName:rt,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{reductionIndices:r,keepDims:i}=e,a=n,o=s.shape.length,l=Ce(r,s.shape);let u=l;const c=nr(u,o),h=null!=c,d=a.shouldExecuteOnCPU([s]);let p=s;if(h){if(d){const t=a.texData.get(p.dataId).values,e=new Array(o);for(let t=0;t<e.length;t++)e[t]=s.shape[c[t]];const n=Yh(t,s.shape,s.dtype,c,e);p=a.makeTensorInfo(e,s.dtype),a.texData.get(p.dataId).values=n}else p=jf(s,c,a);u=rr(u.length,o)}er("max",u,o);const[f,g]=Qs(p.shape,u);let m,x=f;if(i&&(x=tr(f,l)),d){const t=a.texData.get(p.dataId).values,e=Hh(t,ge(g),x,s.dtype);m=a.makeTensorInfo(x,s.dtype),a.texData.get(m.dataId).values=e}else m=function(t,e,n,s){const r=ge(e),i=Uf({inputs:{x:t},attrs:{shape:[ge(t.shape)/r,r]},backend:s}),a=function(t,e,n,s){const r=function(t){const e=[];for(;0===e.length||1!==e[e.length-1].outSize;){const n=e.length?e[e.length-1].outSize:t[1],s=si(n);e.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return e}(t.shape);let i=t;for(let a=0;a<r.length;a++){const{inSize:o,windowSize:l,outSize:u}=r[a],c=new Tp({windowSize:l,inSize:o,batchSize:t.shape[0],outSize:u},n),h=i;i=s.runWebGLProgram(c,[i],e),h.dataId!==t.dataId&&s.disposeData(h.dataId)}return i}(i,t.dtype,"max",s),o=Uf({inputs:{x:a},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(a),o}(p,g,x,a);return h&&a.disposeIntermediateTensorInfo(p),m}},qf={kernelName:at,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e;ch(r,"maxPool");const{filterSize:i,strides:a,pad:o,dimRoundingMode:l}=s;he(vr(a,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`));const u=hr(r.shape,i,a,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&me(u.inShape,u.outShape))return If({inputs:{x:r},backend:n});const c=new Ap(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}},Xf={kernelName:ot,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{dy:r,input:i,output:a}=e,o=i;ch([i,a],"maxPoolBackprop");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=hr(o.shape,l,u,1,c,h),p=new Ap(d,"max",!0),f=n.runWebGLProgram(p,[o],o.dtype),g=new vp(d),m=n.runWebGLProgram(g,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),m}},Yf={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{filterSize:r,strides:i,pad:a,includeBatchInIndex:o}=e,l=n;he(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const u=[1,1];he(vr(i,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`));const c=hr(s.shape,r,i,u,a),[h,d]=function(t,e,n,s){let r=new Ap(n,"max",!1);const i=s.runWebGLProgram(r,[t],"float32");return r=new Ap(n,"max",!0,!0,e),[i,s.runWebGLProgram(r,[t],"float32")]}(s,o,c,l);return[h,d]}},Jf={kernelName:dt,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{To("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:s,scores:r}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:o}=n,l=e;return function(t,e,n,s,r){return Oa(t,e,n,s,r,0).selectedIndices}(l.readSync(s.dataId),l.readSync(r.dataId),i,a,o)}},Zf=function(t,e,n,s,r,i){return Oa(t,e,n,s,r,0,!1,i,!0)},Qf={kernelName:pt,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{To("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:s,scores:r}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:o,padToMaxOutputSize:l}=n,u=e,c=u.readSync(s.dataId),h=u.readSync(r.dataId),{selectedIndices:d,validOutputs:p}=Zf(c,h,i,a,o,l);return[d,p]}},tg=function(t,e,n,s,r,i){return Oa(t,e,n,s,r,i,!0)},eg={kernelName:ft,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{To("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:s,scores:r}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:o,softNmsSigma:l}=n,u=e,c=u.readSync(s.dataId),h=u.readSync(r.dataId),d=i,p=a,f=o,g=l,{selectedIndices:m,selectedScores:x}=tg(c,h,d,p,f,g);return[m,x]}};class ng{constructor(t,e,n,s){this.variableNames=["Image"],this.outputShape=[];const r=t[1],i=t[2],a=Math.sin(e).toFixed(3),o=Math.cos(e).toFixed(3);this.outputShape=t;const[l,u]=po(s,r,i),c=l.toFixed(3),h=u.toFixed(3);let d="";d="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${a};\n          float coordYFloat = (float(x) - ${c}) * ${a} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${d}\n          if(coordX >= 0 && coordX < ${i} && coordY >= 0 && coordY < ${r}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const sg={kernelName:Zt,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:s}=t,{radians:r,fillValue:i,center:a}=e,o=n,l=new ng(s.shape,r,i,a);return o.runWebGLProgram(l,[s],s.dtype)}},rg=vf("if (isnan(x)) return x;\n  return sin(x);\n"),ig={kernelName:Tt,backendName:"webgl",kernelFunc:rg},ag={kernelName:Wt,backendName:"webgl",kernelFunc:vf("return x * x;")},og="return (a - b) * (a - b);",lg=Cf(og,og),ug={kernelName:Pt,backendName:"webgl",kernelFunc:lg},cg=vf("return tan(x);"),hg=[$f,Rf,Sf,Tf,Ff,Of,Bf,Pf,Ef,Kf,qf,Xf,Yf,Jf,Qf,eg,Vf,sg,ig,ag,ug,{kernelName:Vt,backendName:"webgl",kernelFunc:cg},{kernelName:jt,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{perm:r}=e,i=n,a=s.shape.length,o=new Array(a);for(let t=0;t<o.length;t++)o[t]=s.shape[r[t]];let l;if(i.shouldExecuteOnCPU([s])){const t=i.texData.get(s.dataId).values,e=Yh(t,s.shape,s.dtype,r,o);l=i.makeTensorInfo(o,s.dtype),i.texData.get(l.dataId).values=e}else l=jf(s,r,i);return l}},{kernelName:Kt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,attrs:n,backend:s}=t,{axis:r}=n,{x:i}=e;ch(i,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const a=s.readSync(i.dataId),{outputValues:o,outputShape:l,indices:u}=Jh(a,r,i.shape,i.dtype);return[s.makeTensorInfo(l,i.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}}];for(const t of hg)ie(t);let dg;function pg(){return null==dg&&(dg=wn.backend.epsilon()),dg}class fg extends Error{constructor(t){super(t),Object.setPrototypeOf(this,fg.prototype)}}class gg extends Error{constructor(t){super(t),Object.setPrototypeOf(this,gg.prototype)}}class mg extends Error{constructor(t){super(t),Object.setPrototypeOf(this,mg.prototype)}}class xg extends Error{constructor(t){super(t),Object.setPrototypeOf(this,xg.prototype)}}class yg extends Error{constructor(t){super(t),Object.setPrototypeOf(this,yg.prototype)}}function bg(t,e){if(Array.isArray(t)){let n=[];for(let s=0;s<e;s++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function wg(t,e){if(!t)throw new yg(e)}function vg(t,e){let n=0;for(const s of t)s===e&&n++;return n}function Cg(t){return 1===t.length?t[0]:t}function kg(t){return Array.isArray(t)?t:[t]}function $g(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Ig(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,((t,e)=>e.toUpperCase()))}Error;let Eg={};function Rg(t){if(null==t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function Sg(t){if(null!=t&&"object"==typeof t)if(Array.isArray(t))t.forEach((t=>Sg(t)));else{const e=Object.keys(t);for(const n of e){const e=t[n];null!=e&&"object"==typeof e&&(Array.isArray(e)||"ndarray"!==e.type||"number"!=typeof e.value?Sg(e):t[n]=e.value)}}}function Ag(t,e={},n={},s="object",r=!1){if("string"==typeof t){const r=t;let i;if(r in n)i=n[r];else if(r in Eg)i=Eg[r];else if(i=e[r],null==i)throw new mg(`Unknown ${s}: ${t}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return i}{const i=t;if(null==i.className||null==i.config)throw new mg(s+": Improper config format: "+JSON.stringify(i)+".\n'className' and 'config' must set.");const a=i.className;let o,l;if(a in n?[o,l]=n[a]:a in Eg?[o,l]=Eg.className:a in e&&([o,l]=e[a]),null==o)throw new mg(`Unknown ${s}: ${a}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const t={};for(const e of Object.keys(Eg))t[e]=Eg[e];for(const e of Object.keys(n))t[e]=n[e];i.config.customObjects=t;const e=Object.assign({},Eg);for(const t of Object.keys(n))Eg[t]=n[t];Sg(i.config);const s=l(o,i.config,n,r);return Eg=Object.assign({},e),s}{const t=Object.assign({},Eg);for(const t of Object.keys(n))Eg[t]=n[t];const e=new o(i.config);return Eg=Object.assign({},t),e}}}function Ng(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function Tg(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function Dg(t){if(null==t)throw new mg("Invalid value in obj: "+JSON.stringify(t));for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function Fg(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new mg(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function _g(t,e,n=0,s=1/0){return wg(n>=0),wg(s>=n),Array.isArray(t)&&t.length>=n&&t.length<=s&&t.every((t=>typeof t===e))}function Og(t,e){Array.isArray(t)?(he(t.length>0,(()=>e+" is unexpectedly an empty array.")),t.forEach(((t,n)=>Og(t,`element ${n+1} of ${e}`)))):he(Number.isInteger(t)&&t>0,(()=>`Expected ${e} to be a positive integer, but got `+Lg(t)+"."))}function Lg(t){return null===t?"null":Array.isArray(t)?"["+t.map((t=>Lg(t))).join(",")+"]":"string"==typeof t?`"${t}"`:""+t}function Bg(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}function Mg(t,e){return Vs((()=>ia(yi(di(t,t),e,!0))))}class zg extends Bs{getConfig(){return{}}}class Pg extends zg{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Vs((()=>{const e=Mg(t,this.axis),n=Nr(e,0,this.maxValue);return di(t,Hr(n,Ys(pg(),e)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Pg.className="MaxNorm",zs(Pg);class Wg extends zg{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Vs((()=>Hr(t,Ys(pg(),Mg(t,this.axis)))))}getConfig(){return{axis:this.axis}}}Wg.className="UnitNorm",zs(Wg);class Ug extends zg{apply(t){return Hi(t)}}Ug.className="NonNeg",zs(Ug);class Vg extends zg{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Vs((()=>{const e=Mg(t,this.axis),n=Ys(di(this.rate,Nr(e,this.minValue,this.maxValue)),di(1-this.rate,e));return di(t,Hr(n,Ys(pg(),e)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Vg.className="MinMaxNorm",zs(Vg);const Gg={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Hg(t){return Rg(t)}function jg(t,e={}){return Ag(t,Ms.getMap().classNameMap,e,"constraint")}function Kg(t){return null==t?null:"string"==typeof t?jg({className:t in Gg?Gg[t]:t,config:{}}):t instanceof zg?t:jg(t)}const qg=["channelsFirst","channelsLast"],Xg=["valid","same","causal"],Yg=["max","avg"],Jg=["sum","mul","concat","ave"],Zg=new Map;function Qg(t){Fg(qg,"DataFormat",t)}function tm(t){Fg(Xg,"PaddingMode",t)}function em(t){Fg(Yg,"PoolMode",t)}const nm=[];function sm(t,e){nm.push(t);try{const t=e();return nm.pop(),t}catch(t){throw nm.pop(),t}}function rm(t){if(!om(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===nm.length?"":nm.join("/")+"/")+t}function im(t){if(!om(t))throw new Error("Not a valid tensor name: '"+t+"'");Zg.has(t)||Zg.set(t,0);const e=Zg.get(t);if(Zg.set(t,Zg.get(t)+1),e>0){const n=`${t}_${e}`;return Zg.set(n,1),n}return t}const am=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function om(t){return!!t.match(am)}function lm(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let s=1;for(let r=e;r<n;++r)s*=t[r];return s}function um(t){return Vi(t=Array.isArray(t)?new Float32Array(t):t)}function cm(t){return Ei(um(t)).dataSync()[0]}function hm(t){return mi(um(t)).dataSync()[0]}function dm(t,e){if(e<t)throw new mg(`end (${e}) < begin (${t}) is forbidden.`);const n=[];for(let s=t;s<e;++s)n.push(s);return n}function pm(t,e){return t.asType(e)}function fm(t,e=-1){const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function gm(t,e,n){return Vs((()=>{switch(t.rank){case 1:return Ji(t,e,n);case 2:return Zi(t,[e,0],[n,t.shape[1]]);case 3:return Qi(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return ta(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return Yi(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return Yi(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new mg("sliceAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}))}function mm(t,e,n){return Vs((()=>{switch(t.rank){case 1:return Ji(t,e,n);case 2:return Zi(t,[0,e],[t.shape[0],n]);case 3:return Qi(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return ta(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new mg("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}}))}function xm(t,e,n,s){return Vs((()=>{switch(t.rank){case 1:return Ji(t,e,n);case 2:switch(s){case 1:return gm(t,e,n);case 2:return mm(t,e,n);default:throw new mg("The axis is not within the rank of the tensor "+s)}case 3:switch(s){case 1:return gm(t,e,n);case 2:return Qi(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return mm(t,e,n);default:throw new mg("The axis is not within the rank of the tensor "+s)}case 4:switch(s){case 1:return gm(t,e,n);case 2:return ta(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return ta(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return mm(t,e,n);default:throw new mg("The axis is not within the rank of the tensor "+s)}default:throw new mg("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}}))}function ym(t,e=-1){let n;return e<0&&(n=t[0].rank,e=0!==n?n:0),e===t[0].rank&&(e=-1),Fr(t,e)}function bm(t,e){switch(t.rank){case 1:return _r([t,e]);case 2:return Or([t,e],0);case 3:return Lr([t,e],0);case 4:return Br([t,e],0);default:throw new mg("concatAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}function wm(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new mg(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return Zr(t,e)}function vm(t,e=0,n=1,s,r){return Wi(t,e,n,s,r)}function Cm(t,e,n,s){if(t.rank<2||e.rank<2)throw new xg(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3&&t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new xg(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = `+e.shape);if(2===t.rank&&2===e.rank)return Ra({a:t,b:e,transposeA:!1,transposeB:!1,bias:s?Im(t.rank,s,"channelsLast"):null,activation:n});{const r=t.shape.slice(),i=r.pop();t=t.reshape([-1,i]);const a=e.shape.slice(),o=a.pop(),l=a.pop(),u=[...a,o],c=Array.from({length:e.rank},((t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n));e=e.transpose(c).reshape([l,-1]);const h=[...r,...u];return Ra({a:t,b:e,transposeA:!1,transposeB:!1,bias:s?Im(t.rank,s,"channelsLast"):null,activation:n}).reshape(h)}}function km(t,e,n){return Vs((()=>(e=Array.isArray(e)?Vi(e,"int32"):e.toInt(),oi(t,e,n))))}function $m(t){return di(t,t)}function Im(t,e,n){const s=e.shape;if(1!==e.rank&&e.rank!==t)throw new mg("Unexpected bias dimensions: "+e.rank+"; expected it to be 1 or "+t);if(5===t){if("channelsFirst"===n)return 1===s.length?e.reshape([1,s[0],1,1,1]):e.reshape([1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?e.reshape([1,1,1,1,s[0]]):e.reshape([1].concat(s))}else if(4===t){if("channelsFirst"===n)return 1===s.length?e.reshape([1,s[0],1,1]):e.reshape([1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?e.reshape([1,1,1,s[0]]):e.reshape([1].concat(s))}else if(3===t){if("channelsFirst"===n)return 1===s.length?e.reshape([1,s[0],1]):e.reshape([1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?e.reshape([1,1,s[0]]):e.reshape([1].concat(s))}else if(t<3)return e;throw new mg("Unsupported input rank by biasAdd: "+e.rank)}function Em(t,e,n){return Vs((()=>(null==n&&(n="channelsLast"),Qg(n),t.add(Im(t.rank,e,n)))))}function Rm(t,e,n,s){return Vs((()=>pa(t,e,n,s)))}function Sm(t,e,n=!1){return n?t():e()}const Am=["fanIn","fanOut","fanAvg"],Nm=["normal","uniform","truncatedNormal"];class Tm extends Bs{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Dm extends Tm{apply(t,e){return ki(t,e)}}Dm.className="Zeros",zs(Dm);class Fm extends Tm{apply(t,e){return $i(t,e)}}Fm.className="Ones",zs(Fm);class _m extends Tm{constructor(t){if(super(),"object"!=typeof t)throw new mg("Expected argument of type ConstantConfig but got "+t);if(void 0===t.value)throw new mg("config must have value set but got "+t);this.value=t.value}apply(t,e){return Vs((()=>di(Ks(this.value),$i(t,e))))}getConfig(){return{value:this.value}}}_m.className="Constant",zs(_m);class Om extends Tm{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return Ui(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Om.className="RandomUniform",zs(Om);class Lm extends Tm{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new xg(`randomNormal does not support dType ${e}.`);return vm(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Lm.className="RandomNormal",zs(Lm);class Bm extends Tm{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new xg(`truncatedNormal does not support dType ${e}.`);return ua(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Bm.className="TruncatedNormal",zs(Bm);class Mm extends Tm{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return Vs((()=>{if(2!==t.length||t[0]!==t[1])throw new mg("Identity matrix initializer can only be used for 2D square matrices.");return di(this.gain,Qr(t[0]))}))}getConfig(){return{gain:this.gain}}}Mm.className="Identity",zs(Mm);class zm extends Tm{constructor(t){if(super(),t.scale<0)throw new mg("scale must be a positive float. Got: "+t.scale);var e;this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,e=this.mode,Fg(Am,"FanMode",e),this.distribution=null==t.distribution?"normal":t.distribution,function(t){Fg(Nm,"Distribution",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t,e="channelsLast"){let n,s;if(Qg(e),2===t.length)n=t[0],s=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===e){const e=lm(t,2);n=t[1]*e,s=t[0]*e}else if("channelsLast"===e){const e=lm(t,0,t.length-2);n=t[t.length-2]*e,s=t[t.length-1]*e}}else{const e=lm(t);n=Math.sqrt(e),s=Math.sqrt(e)}return[n,s]}(t),s=n[0],r=n[1];let i=this.scale;if("fanIn"===this.mode?i/=Math.max(1,s):"fanOut"===this.mode?i/=Math.max(1,r):i/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(i);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new xg(`${this.getClassName()} does not support dType ${e}.`);return ua(t,0,n,e,this.seed)}{const n=Math.sqrt(3*i);return Ui(t,-n,n,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}zm.className="VarianceScaling",zs(zm);class Pm extends zm{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return zm.className}}Pm.className="GlorotUniform",zs(Pm);class Wm extends zm{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return zm.className}}Wm.className="GlorotNormal",zs(Wm);class Um extends zm{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return zm.className}}Um.className="HeNormal",zs(Um);class Vm extends zm{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return zm.className}}Vm.className="HeUniform",zs(Vm);class Gm extends zm{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return zm.className}}Gm.className="LeCunNormal",zs(Gm);class Hm extends zm{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return zm.className}}Hm.className="LeCunNormal",zs(Hm);class jm extends Tm{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new xg("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return Vs((()=>{if(t.length<2)throw new xg("Shape must be at least 2D.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=vm(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32");let n=to.gramSchmidt(e);return t[0]>t[1]&&(n=n.transpose()),di(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}jm.className="Orthogonal",zs(jm);const Km={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function qm(t,e={}){return Ag(t,Ms.getMap().classNameMap,e,"initializer")}function Xm(t){return Rg(t)}function Ym(t){if("string"==typeof t){const e=t in Km?Km[t]:t;if("GlorotNormal"===e)return new Wm;if("GlorotUniform"===e)return new Pm;if("HeNormal"===e)return new Um;if("HeUniform"===e)return new Vm;if("LeCunNormal"===e)return new Gm;if("LeCunUniform"===e)return new Hm;{const t={};return t.className=e,t.config={},qm(t)}}return t instanceof Tm?t:qm(t)}let Jm=0;function Zm(){return Jm++}const Qm={};function tx(t=""){return t in Qm||(Qm[t]=0),Qm[t]+=1,t+Qm[t].toString()}function ex(t){return Array.isArray(t)&&Array.isArray(t[0])}function nx(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function sx(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new mg("Expected Tensor length to be 1; got "+t.length);e=t[0]}else e=t;return e}function rx(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new mg("Expected exactly 1 Shape; got "+t.length)}return t}function ix(t){let e=0;for(const n of t)0===n.shape.length?e+=1:e+=n.shape.reduce(((t,e)=>t*e));return e}class ax{constructor(t,e="float32",n="Variable",s=!0,r=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=Zm(),n=null==n?"Variable":n,this.originalName=rm(n),this.name=im(this.originalName),this.trainable_=s,this.constraint=r,this.val=function(t,e=!0,n,s){return wn.makeVariable(t,e,n,s)}(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function ox(t){return t.map((t=>t.read()))}function lx(t){t.forEach((t=>{t[0].write(t[1])}))}class ux{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class cx{constructor(t,e,n,s,r,i,a){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=a,this.id=Zm(),null!=i&&(this.originalName=rm(i),this.name=im(this.originalName)),this.rank=e.length}}let hx=0;class dx{constructor(t,e){this.callArgs=e,this.id=hx++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const e of t.inboundLayers)null!=e&&e.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let px=0;class fx extends Bs{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=px++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=$g(t)+"_"+tx(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n="float32"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new gg(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new mg(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return Cg(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return Cg(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new fg("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new fg("Layer "+this.name+" is not connected, no input to return.");return Cg(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new fg("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new fg("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return Cg(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((t=>t()))}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach((e=>e.trainable=t)),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((t=>t.trainable)):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((t=>!t.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=kg(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=kg(this.inputSpec);if(t.length!==e.length)throw new mg(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: `+t);for(let n=0;n<t.length;n++){const s=t[n],r=e[n];if(null==r)continue;const i=s.rank;if(null!=r.ndim&&i!==r.ndim)throw new mg(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${i}`);if(null!=r.maxNDim&&i>r.maxNDim)throw new mg(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${i}`);if(null!=r.minNDim&&i<r.minNDim)throw new mg(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${i}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new mg(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const t=s.shape;for(const e in r.axes){const s=Number(e),i=r.axes[e],a=s>=0?t[s]:t[t.length+s];if(null!=i&&-1===[i,null].indexOf(a))throw new mg(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${i} but got shape ${t}.`)}}if(null!=r.shape)for(let t=0;t<r.shape.length;++t){const e=r.shape[t],i=s.shape[t];if(null!=e&&null!=i&&e!==i)throw new mg(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=kg(t);let s=!0;for(const t of n)if(!(t instanceof cx)){s=!1;break}let r=!0;for(const t of n)if(t instanceof cx){r=!1;break}if(s===r)throw new mg("Arguments to apply() must be all SymbolicTensors or all Tensors");return sm(this.name,(()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of kg(t))e.push(n.shape);this.build(Cg(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(t),r){let s=this.call(t,e);const r=kg(s),i=[];for(let t of r)-1!==n.indexOf(t)&&(t=t.clone()),i.push(t);if(s=Cg(i),null!=this.activityRegularizer)throw new xg("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(t){t=kg(t);const e=[];for(const n of t)e.push(n.shape);return Cg(e)}(t),s=this.computeOutputShape(n);let r;const i="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new cx(i,n,this,kg(t),e,this.name,s))):new cx(i,s,this,kg(t),e,this.name),this.addInboundNode(t,r,null,null,n,s,e),this._refCount++,null!=this.activityRegularizer)throw new xg("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(t)+") does not match that of the "+`batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer `+this.name);else{let e=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=t[s]&&t[s]!==n&&(e=!0)})),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: `+JSON.stringify(this.batchInputShape))}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new fg(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new fg(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new gg(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return ix(this.weights)}build(t){this.built=!0}getWeights(t=!1){return ox(t?this.trainableWeights:this.weights)}setWeights(t){Vs((()=>{const e=this.weights;if(e.length!==t.length)throw new mg(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const n=[],s=ox(e);for(let r=0;r<s.length;++r){const i=s[r],a=e[r],o=t[r];if(!me(i.shape,o.shape))throw new mg(`Layer weight shape ${i.shape} not compatible with provided weight shape `+o.shape);n.push([a,o])}lx(n)}))}addWeight(t,e,n,s,r,i,a){if(-1!==this._addedWeightNames.indexOf(t))throw new mg(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=Ym("zeros"));const o=s.apply(e,n),l=new ax(o,n,t,i,a);return o.dispose(),null!=r&&this.addLoss((()=>r.apply(l.read()))),null==i&&(i=!0),i?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=kg(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach((t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return e}addInboundNode(t,e,n,s,r,i,a=null){const o=kg(t);e=kg(e),n=kg(n),s=kg(s),r=nx(r),i=nx(i);const l=[],u=[],c=[];for(const t of o)l.push(t.sourceLayer),u.push(t.nodeIndex),c.push(t.tensorIndex);new dx({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:e,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:i},a);for(let t=0;t<e.length;t++)e[t].sourceLayer=this,e[t].nodeIndex=this.inboundNodes.length-1,e[t].tensorIndex=t}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach((t=>t.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function gx(t,e,n){if((null==e||null!=n&&n>0)&&(e=t.sourceLayer,n=t.nodeIndex),0===e.inboundNodes.length)return[t];{const t=e.inboundNodes[n];if(0===t.inboundLayers.length)return t.inputTensors;{const e=[];for(let n=0;n<t.inboundLayers.length;n++){const s=gx(t.inputTensors[n],t.inboundLayers[n],t.nodeIndices[n]);for(const t of s)-1===e.indexOf(t)&&e.push(t)}return e}}}class mx extends fx{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:tx("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new mg("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new mg("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new mg("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=t.dtype||"float32";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const s=new cx(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new dx({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new mg("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}async function xx(t){if(null==t)return;const e=[],n=[],s=[];for(const r in t){const i=t[r];if("number"!=typeof i){const t=i;e.push(t.data()),n.push(r),s.push(t)}}if(e.length>0){const r=await Promise.all(e);for(let e=0;e<r.length;++e)t[n[e]]=r[e][0];Gs(s)}}function yx(t){if(null!=t)for(const e in t){const n=t[e];"number"!=typeof n&&n.dispose()}}var bx;mx.className="InputLayer",zs(mx),function(t){t[t.SILENT=0]="SILENT",t[t.VERBOSE=1]="VERBOSE"}(bx||(bx={}));class wx{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class vx{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class Cx extends wx{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const t in e){const s=e[t];if("number"==typeof s)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+s*n;else{let e;t in this.totals?e=this.totals[t]:this.totals[t]=0;const r=Vs((()=>Ys(this.totals[t],di(s,n))));this.totals[t]=r,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const t of this.params.metrics)null!=this.totals[t]&&("number"==typeof this.totals[t]?e[t]=this.totals[t]/this.seen:Vs((()=>{const n=di(Hr(1,this.seen),this.totals[t]);e[t]=n,this.totals[t].dispose(),Hs(e[t])})))}}class kx extends wx{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const t in e)null==this.history[t]&&(this.history[t]=[]),this.history[t].push(e[t])}async syncData(){const t=[],e=[],n=[];for(const s in this.history){const r=this.history[s];for(let i=0;i<r.length;++i)if("number"!=typeof r[i]){const a=r[i];t.push(a.data()),e.push(s),n.push(i)}}const s=await Promise.all(t);for(let t=0;t<s.length;++t)this.history[e[t]][n[t]].dispose(),this.history[e[t]][n[t]]=s[t][0]}}class $x extends wx{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Ne(this.yieldEvery)&&(this.maybeWait=function(t,e){let n,s=Pe();return(...r)=>{const i=Pe();return i-s<e||(s=i,n=t(...r)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const s=[];null!=this.yield&&(await xx(n),s.push(this.yield(t,e,n))),s.push(ho()),await Promise.all(s)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await xx(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await xx(e),n.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&n.push(ho()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await xx(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await xx(e),n.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?n.push(ho()):Ne(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await xx(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await xx(t),await this.trainEnd(t))}}function Ix(t,e){return null==t&&(t={}),t instanceof wx?[t]:Array.isArray(t)&&t[0]instanceof wx?t:kg(t).map((t=>new $x(t,e)))}class Ex{constructor(){}static registerCallbackConstructor(t,e){he(t>=0&&Number.isInteger(t),(()=>"Verbosity level is expected to be an integer >= 0, but got "+t)),Ex.checkForDuplicate(e),null==Ex.constructors[t]&&(Ex.constructors[t]=[]),Ex.constructors[t].push(e)}static checkForDuplicate(t){for(const e in Ex.constructors)Ex.constructors[+e].forEach((e=>{if(e===t)throw new mg("Duplicate callback constructor.")}))}static clear(){Ex.constructors={}}static createCallbacks(t){const e=[];for(const n in Ex.constructors){const s=+n;t>=s&&e.push(...Ex.constructors[s])}return e.map((t=>new t))}}function Rx(t,e,n,s,r,i,a,o,l){const u=new kx,c=[new Cx,...Ex.createCallbacks(e)];null!=t&&c.push(...t),c.push(u);const h=new vx(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:i,batchSize:a,verbose:e,doValidation:o,metrics:l}),{callbackList:h,history:u}}function Sx(t,e={},n=!1){return Ag(t,Ms.getMap().classNameMap,e,"layer",n)}function Ax(t,e){return Vs((()=>{"float32"!==t.dtype&&(t=t.asType("float32"));const n=yi($m(t),e,!0),s=ti(n.shape,pg()),r=ia(hi(n,s));return Hr(t,r)}))}function Nx(t,e){return Vs((()=>Ii($m(xi(e,t)),-1)))}function Tx(t,e){return Vs((()=>Ii(Xs(xi(e,t)),-1)))}function Dx(t,e){return Vs((()=>{const n=xi(t,e),s=Nr(Xs(t),pg(),Number.MAX_VALUE),r=Xs(Hr(n,s));return di(100,Ii(r,-1))}))}function Fx(t,e,n=!1){return Vs((()=>{if(n)e=ea(e);else{const t=yi(e,e.shape.length-1,!0);e=Hr(e,t)}return e=Nr(e,pg(),1-pg()),Ni(yi(di(t.toFloat(),fi(e)),e.shape.length-1))}))}function _x(t,e,n=!1){return Vs((()=>{const s=ei(function(t){const e=[lm(t.shape)];return t.reshape(e)}(t)).toInt(),r=(e=Nr(e,pg(),1-pg())).shape;return Fx(Di(s,r[r.length-1]).reshape(r),e,n)}))}function Ox(t,e){return Vs((()=>{let n;return n=Nr(e,pg(),1-pg()),n=fi(Hr(n,xi(1,n))),Ii(function(t,e){if(!me(t.shape,e.shape))throw new mg(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return Vs((()=>{const n=e.relu(),s=e.abs().neg();return n.sub(e.mul(t)).add(s.exp().log1p())}))}(t,n),-1)}))}function Lx(t,e){return Vs((()=>{const n=Ax(t,-1),s=Ax(e,-1),r=di(n,s);return Ni(yi(r,-1))}))}Ex.constructors={};const Bx={meanSquaredError:Nx,meanAbsoluteError:Tx,meanAbsolutePercentageError:Dx,meanSquaredLogarithmicError:function(t,e){return Vs((()=>{const n=Nr(e,pg(),Number.MAX_VALUE),s=fi(Ys(1,n)),r=Nr(t,pg(),Number.MAX_VALUE),i=fi(Ys(1,r));return Ii($m(xi(s,i)),-1)}))},squaredHinge:function(t,e){return Vs((()=>{const n=hi(0,xi(1,di(t,e)));return Ii($m(n),-1)}))},hinge:function(t,e){return Vs((()=>{const n=hi(0,xi(1,di(t,e)));return Ii(n,-1)}))},categoricalHinge:function(t,e){return Vs((()=>{const n=yi(di(t,e),-1),s=mi(di(xi(1,t),e),-1);return hi(0,Ys(1,xi(s,n)))}))},logcosh:function(t,e){return Vs((()=>{const n=Math.log(2),s=xi(e,t),r=xi(Ys(s,na(di(-2,s))),n);return Ii(r,-1)}))},categoricalCrossentropy:Fx,sparseCategoricalCrossentropy:_x,binaryCrossentropy:Ox,kullbackLeiblerDivergence:function(t,e){return Vs((()=>{const n=Nr(t,pg(),1),s=Nr(e,pg(),1);return yi(di(t,fi(Hr(n,s))),-1)}))},poisson:function(t,e){return Vs((()=>{const n=fi(Ys(pg(),e));return Ii(xi(e,di(t,n)),-1)}))},cosineProximity:Lx};function Mx(t){if("string"==typeof t){if(t in Bx)return Bx[t];let e="Unknown loss "+t;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new mg(e)}return t}function zx(t,e){return Vs((()=>{const n=di(.5,Oi(e)),s=pm(li(e,n),t.dtype);return Ii(Yr(t,s),-1)}))}function Px(t,e){return Vs((()=>pm(Yr(ur(t,-1),ur(e,-1)),"float32")))}function Wx(t,e){return Ox(t,e)}function Ux(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),Yr(t,e).asType("float32")}const Vx=Fx,Gx=_x,Hx={binaryAccuracy:zx,categoricalAccuracy:Px,precision:function(t,e){return Vs((()=>{const n=function(t,e){return Vs((()=>wi(t.equal(1),e.equal(1)).sum().cast("float32")))}(t,e),s=function(t,e){return Vs((()=>wi(t.equal(0),e.equal(1)).sum().cast("float32")))}(t,e),r=n.add(s);return da(li(r,0),n.div(r),0).cast("float32")}))},categoricalCrossentropy:Vx,sparseCategoricalCrossentropy:Gx,mse:Nx,MSE:Nx,mae:Tx,MAE:Tx,mape:Dx,MAPE:Dx,cosine:Lx};function jx(t){if("string"==typeof t&&t in Hx)return Hx[t];if("string"!=typeof t&&null!=t)return t;throw new mg("Unknown metric "+t)}function Kx(t){if(wg(null!==t,"Unknown LossOrMetricFn "+t),"string"==typeof t)return t;{let e;for(const n of Object.keys(Bx))if(Bx[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(Hx))if(Hx[n]===t){e=n;break}return void 0!==e?e:t.name}}function qx(t,e,n=!1){if(null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!Xx(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(t);n.length>1048576&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Xx(t){if(null===t)return!0;if("object"==typeof t){if(Object.getPrototypeOf(t)===Object.prototype){const e=Object.keys(t);for(const n of e){if("string"!=typeof n)return!1;if(!Xx(t[n]))return!1}return!0}if(Array.isArray(t)){for(const e of t)if(!Xx(e))return!1;return!0}return!1}{const e=typeof t;return"string"===e||"number"===e||"boolean"===e}}function Yx(t,e,n=console.log){let s="";for(let n=0;n<t.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=t[n],s=s.slice(0,e[n]),s+=" ".repeat(e[n]-s.length);n(s)}function Jx(t,e,n){let s;try{s=JSON.stringify(t.outputShape)}catch(t){s="multiple"}Yx([`${t.name} (${t.getClassName()})`,s,t.countParams().toString()],e,n)}function Zx(t,e,n,s){let r;try{r=JSON.stringify(t.outputShape)}catch(t){r="multiple"}const i=[];for(const e of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(e)))for(let t=0;t<e.inboundLayers.length;++t){const n=e.inboundLayers[t].name,s=e.nodeIndices[t],r=e.tensorIndices[t];i.push(`${n}[${s}][${r}]`)}const a=t.name,o=t.getClassName(),l=0===i.length?"":i[0];Yx([`${a} (${o})`,r,t.countParams().toString(),l],e,s);for(let t=1;t<i.length;++t)Yx(["","","",i[t]],e,s)}function Qx(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}function ty(t,e){if(null===t)return null;if("string"==typeof t)return Ig(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],s=t.length;for(let r=0;r<s;++r){const s=t[r];Qx(e,r,s)?n.push(s):n.push(ty(s,e))}return n}{const e={};for(const n of Object.keys(t)){const s=t[n];if("name"===n&&"string"==typeof s)e[n]=s;else{const t=Ig(n);e[t]=ty(s,t)}}return e}}function ey(t,e){if(null==t)return null;if("string"==typeof t)return $g(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],s=t.length;for(let r=0;r<s;++r){const s=t[r];Qx(e,r,s)?n.push(s):n.push(ey(s,e))}return n}{const e={};for(const n of Object.keys(t)){const s=t[n];e[$g(n)]="name"!==n&&"className"!==n||"string"!=typeof s?ey(s,n):s}return e}}class ny{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof ny)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new mg(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return ds(e,t.dtype)}catch(n){throw new mg(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof cx){if(null==this.id2Value[t.id])throw new mg("Nonexistent key: "+t.name);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new mg("Feed dict has no SymbolicTensor name: "+t);return this.id2Value[e]}}getMask(t){if(t instanceof cx){if(null==this.id2Value[t.id])throw new mg("Nonexistent key: "+t.name);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new mg("Feed dict has no SymbolicTensor name: "+t);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Gs(this.id2Mask)}}const sy={},ry={};function iy(t,e,n,s){const r=null!=n&&n.training,i=Array.isArray(t),a=i?t:[t],o=a.map((t=>t.name)),l=[],u=e.names();for(const t of o)-1!==u.indexOf(t)?l.push(e.getValue(t)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+e.names().join(",");let h,d;if(null==sy[c]){const t=function(t,e){he(null!=t&&t.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===t.length){const r=oy(t[0],e);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const i of t){const{sorted:t,recipientMap:a}=oy(i,e);for(const e of t)r.has(e.name)||(n.push(e),r.add(e.name));for(const t in a)null==s[t]&&(s[t]=new Set),a[t].forEach((e=>s[t].add(e)))}}return{sorted:n,recipientCounts:ay(s)}}(a,e);h=t.sorted,d=t.recipientCounts,sy[c]=h,ry[c]=d}h=sy[c],d={},r||Object.assign(d,ry[c]);const p=new ny(e);for(let t=0;t<h.length;++t){if(null!=s){const t=Us().numTensors;t>s.maxNumTensors&&(s.maxNumTensors=t),t<s.minNumTensors&&(s.minNumTensors=t)}const i=h[t],a=i.sourceLayer;if(a instanceof mx)continue;const u=[],c=[],f=[];let g=!1;for(const t of i.inputs){const n=p.getValue(t),s=p.getMask(t);u.push(n),c.push(s),null!=s&&(g=!0),r||(d[t.name]--,0!==d[t.name]||e.hasKey(t)||-1!==o.indexOf(t.name)||n.isDisposed||!0===t.sourceLayer.stateful||f.push(n))}g&&((n=n||{}).mask=c[0]);const m=kg(a.apply(u,n));let x=null;a.supportsMasking&&(x=a.computeMask(u,c));const y=ly(i),b=Array.isArray(y)?y:[y];for(let t=0;t<b.length;++t){p.hasKey(b[t])||p.add(b[t],m[t],Array.isArray(x)?x[0]:x);const e=o.indexOf(b[t].name);-1!==e&&(l[e]=m[t])}r||Gs(f)}return p.disposeMasks(),i?l:l[0]}function ay(t){const e={};for(const n in t)e[n]=t[n].size;return e}function oy(t,e){const n=new Set,s=[],r={};for(const t of e.names())n.add(t);const i=[],a=[];for(i.push(t);i.length>0;){const t=i[i.length-1];if(n.has(t.name)){i.pop();continue}const e=a[a.length-1]===i.length-1;if(0===t.inputs.length||e)i.pop(),s.push(t),n.add(t.name),e&&a.pop();else{a.push(i.length-1);for(const e of t.inputs)null==r[e.name]&&(r[e.name]=new Set),r[e.name].add(t.name),n.has(e.name)||i.push(e)}}return{sorted:s,recipientMap:r}}function ly(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const s of t.sourceLayer.inboundNodes[e].outputTensors)if(s.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}class uy extends fx{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=tx(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],Tg(this.inputs).length!==this.inputs.length)throw new mg("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+this.inputs.map((t=>t.name)));Tg(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+this.outputs.map((t=>t.name))),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const t of this.outputs){const e=t.sourceLayer,n=t.nodeIndex,s=t.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const t of this.inputs){const e=t.sourceLayer,n=t.nodeIndex,s=t.tensorIndex;wg(0===n,"input layer has >1 nodes"),wg(0===s,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e];if(!(n instanceof mx))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${e} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const t of this.outputLayers)this.outputNames.push(t.name);this.internalInputShapes=this.inputs.map((t=>t.shape)),this.internalOutputShapes=this.outputs.map((t=>t.shape));const e={},n={},s={},r={},i={},a=[],o=(t,e,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=t.sourceLayer,r=t.nodeIndex,l=t.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new gg(`The tensor ${t.name} at layer "${s.name}" is part of a cycle.`);if(-1!==e.indexOf(u))return;this.containerNodes.add(uy.nodeKey(s,r)),s.id in i||(i[s.id]=Object.keys(i).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let t=0;t<c;t++){const s=u.inputTensors[t],r=u.inboundLayers[t],i=u.nodeIndices[t],a=u.tensorIndices[t];o(s,e,n,r,i,a)}for(e.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);a.push(u)},l=[],u=[];for(const t of this.outputs)o(t,l,u);const c=a.slice().reverse();for(const t of c){n[t.id]=t,t.id in e||(e[t.id]=0);let i=e[t.id];const a=null==s[t.outboundLayer.id]?0:s[t.outboundLayer.id];i=Math.max(i,a),s[t.outboundLayer.id]=i,r[t.outboundLayer.id]=t.outboundLayer,e[t.id]=i;for(let s=0;s<t.inboundLayers.length;s++){const r=t.inboundLayers[s],a=t.nodeIndices[s],o=r.inboundNodes[a],l=null==e[o.id]?0:e[o.id];e[o.id]=Math.max(i+1,l),n[o.id]=o}}const h={};for(const t in e){const s=e[t];s in h||(h[s]=[]),h[s].push(n[t])}const d={};for(const t in s){const e=s[t];e in d||(d[e]=[]),d[e].push(r[t])}let p=Object.keys(d).map((t=>parseInt(t,10))).sort(Ng);this.layers=[];for(const t of p){const e=d[t];e.sort(((t,e)=>{const n=i[t.id],s=i[e.id];return n<s?-1:n>s?1:0}));for(const t of e)t instanceof uy&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=d,p=Object.keys(h).map((t=>parseInt(t,10))).sort(Ng);const f=this.inputs.slice(),g=[];for(const t of p)for(const e of h[t]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new gg("Graph disconnected: cannot obtain value for tensor "+n+` at layer "${t.name}". The following previous layers were accessed without issue: `+g);for(const t of e.outputTensors)f.push(t);g.push(t.name)}}this.nodesByDepth=h;const m=this.layers.map((t=>t.name));for(const t of m){const e=m.filter((e=>e===t)).length;if(1!==e)throw new gg(`The name "${t}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(m))}this.outboundNodes=[],this.inboundNodes=[],new dx({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((t=>null)),outputMasks:this.outputs.map((t=>null)),inputShapes:this.inputs.map((t=>t.shape)),outputShapes:this.outputs.map((t=>t.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach((e=>{e._trainableWeights.forEach((e=>e.trainable=t))})),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new mg("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const n={};let s=0;for(const t of this.layers)for(const e of t.weights){if(null!=n[e.originalName])throw new mg("Duplicate weight name: "+e.originalName);n[e.originalName]=e,s++}const r=[];for(const s in t){let i=s;if(null==n[s]){const t=s.split("/");i=t.slice(0,-2).concat([t[t.length-1]]).join("/")}if(null!=n[i])r.push([n[i],t[s]]);else if(e)throw new mg("Provided weight data has no target variable: "+s);delete n[i]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new mg(`${t.length} of ${s} weights are not set: `+t)}lx(r)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 2.6.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const n=ey(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return Vs((()=>{t=kg(t);const n=new ny;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return iy(this.outputs,n,e)}))}computeMask(t,e){return Vs((()=>{let n;return t=kg(t),n=null==e?bg(null,t.length):kg(e),this.runInternalGraph(t,n)[1]}))}computeOutputShape(t){const e=nx(t);if(e.length!==this.inputLayers.length)throw new mg(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let t=0;t<e.length;t++){const s=this.inputLayers[t],r=e[t];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map((t=>parseInt(t,10))).sort(Ng);if(s.length>1)for(const t of s){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map((t=>t.id)).indexOf(e.id))continue;const s=[];for(let e=0;e<t.inboundLayers.length;e++){const r=t.inboundLayers[e],i=t.nodeIndices[e],a=t.tensorIndices[e],o=n[`${r.name}_${i}_${a}`];s.push(o)}const r=nx(e.computeOutputShape(Cg(s))),i=e.inboundNodes.indexOf(t);for(let t=0;t<r.length;t++)n[`${e.name}_${i}_${t}`]=r[t]}}const r=[],i=[];for(let t=0;t<this.outputLayers.length;t++){const e=this.outputLayers[t],n=this.outputLayersNodeIndices[t],s=this.outputLayersTensorIndices[t],r=`${e.name}_${n}_${s}`;i.push(r)}for(let t=0;t<i.length;t++){const e=i[t];wg(e in n),r.push(n[e])}return Cg(r)}runInternalGraph(t,e){null==e&&(e=bg(null,t.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],i=t[s],a=e[s];n[r.id]=[i,a]}const s=Object.keys(this.nodesByDepth).map((t=>parseInt(t,10))).sort(Ng);for(const t of s){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer,s=t.inputTensors,r=t.outputTensors,i=new Array;for(const t of s)t.id in n&&i.push(n[t.id]);if(i.length===s.length){let s,a,o,l,u={};if(null!=t.callArgs&&(u=t.callArgs),1===i.length){const[t,n]=i[0];null==u.mask&&(u.mask=n),o=kg(e.call(t,u)),l=kg(e.computeMask(t,n)),s=[t],a=[n]}else s=i.map((t=>t[0])),a=i.map((t=>t[1])),null==u.mask&&(u.mask=a),o=kg(e.call(s,u)),l=kg(e.computeMask(s,a));if(e.activityRegularizer)throw new xg("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<r.length;++t){const e=r[t],s=o[t],i=l[t];n[e.id]=[s,i]}}}}const r=[],i=[],a=[];for(const t of this.outputs){wg(t.id in n,`Could not compute output ${t.name} : ${t.id}`);const[e,s]=n[t.id];a.push(e.shape),r.push(e),i.push(s)}return[r,i,a]}buildNodeConversionMap(t){const e={};let n;for(const t of this.layers){n=t instanceof uy?1:0;for(let s=0;s<t.inboundNodes.length;s++){const r=uy.nodeKey(t,s);this.containerNodes.has(r)&&(e[r]=n,n+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new mg(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new mg("Provide either a layer name or layer index");for(const e of this.layers)if(e.name===t)return e;throw new mg("No such layer: "+t)}calculateLosses(){return Vs((()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const s=uy.nodeKey(e,n);this.containerNodes.has(s)&&t.push(...e.calculateLosses())}return t}))}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const t of this.layers){const s=t.getClassName(),r=t.getConfig(),i=[];for(let n=0;n<t.inboundNodes.length;n++){const s=t.inboundNodes[n],r=uy.nodeKey(t,n);let a={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),a=s.callArgs}catch(e){console.warn(`Layer ${t.name} was passed non-serializable keyword arguments: `+s.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),a={}}if(s.inboundLayers.length>0){const t=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],i=s.nodeIndices[n],o=s.tensorIndices[n];let l=e[uy.nodeKey(r,i)];null==l&&(l=0),t.push([r.name,l,o,a])}i.push(t)}}}const a={};a.name=t.name,a.className=s,a.config=r,a.inboundNodes=i,n.push(a)}t.layers=n;const s=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t],r=this.inputLayersNodeIndices[t],i=uy.nodeKey(n,r);if(!this.containerNodes.has(i))continue;let a=e[i];null==a&&(a=0);const o=this.inputLayersTensorIndices[t];s.push([n.name,a,o])}t.inputLayers=s;const r=[];for(let t=0;t<this.outputLayers.length;t++){const n=this.outputLayers[t],s=this.outputLayersNodeIndices[t],i=uy.nodeKey(n,s);if(!this.containerNodes.has(i))continue;let a=e[i];null==a&&(a=0);const o=this.outputLayersTensorIndices[t];r.push([n.name,a,o])}return t.outputLayers=r,t}static fromConfig(t,e,n={},s=!1){const r={},i={};function a(t,e){t.name in i?i[t.name].push(e):i[t.name]=[e]}function o(t,e){const n=[];let s;for(const i of e){const o=i[0],l=i[1],u=i[2];if(s=null==i[3]?{}:i[3],!(o in r))return void a(t,e);const c=r[o];if(c.inboundNodes.length<=l)return void a(t,e);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&t.apply(Cg(n),s)}function l(t){const n=t.name,i=Sx(t,null!=e.customObjects?e.customObjects:{});i.setFastWeightInitDuringBuild(s),r[n]=i,t.inboundNodes.forEach((t=>{if(!(t instanceof Array))throw new mg("Corrupted configuration, expected array for nodeData: "+t);a(i,t)}))}const u=e.name,c=e.layers;for(const t of c)l(t);for(;!Dg(i);)for(const t of c){const e=r[t.name];if(e.name in i){const t=i[e.name];delete i[e.name];for(const n of t)o(e,n)}}const h=[],d=[],p=e.inputLayers;for(const t of p){const e=t[0],n=t[1],s=t[2];wg(e in r);const i=r[e].inboundNodes[n].outputTensors;h.push(i[s])}const f=e.outputLayers;for(const t of f){const e=t[0],n=t[1],s=t[2];wg(e in r);const i=r[e].inboundNodes[n].outputTensors;d.push(i[s])}return new t({inputs:h,outputs:d,name:u})}get stateful(){if(this._stateful)throw new mg("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){Vs((()=>{this.layers.forEach((t=>{t.stateful&&t.resetStates()}))}))}}function cy(t,e){return function(t,e,n){const s=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map((t=>null));if(1===s)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==s)throw new Error(`Provided ${n} is an array of ${t.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){const n=[];return e.forEach((e=>{e in t?n.push(t[e]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(t)}`)}(t,e,"classWeight")}async function hy(t,e,n,s){if(null!=e||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const e=Vs((()=>{if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1){const e=1;return t.argMax(e)}if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await e.data());Gs(e);const r=[];return s.forEach((t=>{if(null==n[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);r.push(n[t])})),Vi(r,"float32")}return null}function dy(t,e){return di(t,e)}function py(t,e){let n,s;const r=e;n=r.xs,s=r.ys,he(null!=n&&null!=s,(()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+e));const i=fy("input",t.inputNames,n),a=fy("output",t.outputNames,s),o=i[0].shape[0];he(i.length===t.inputs.length,(()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${i.length} inputs.  (Expected input keys: `+JSON.stringify(t.inputNames)+")")),he(a.length===t.outputs.length,(()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${a.length} outputs.  (Expected output keys: `+JSON.stringify(t.outputNames)+")"));for(let e=0;e<i.length;e++)he(i[e].shape[0]===o,(()=>`Batch size mismatch: input ${t.inputNames[e]} has ${i[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`));for(let e=0;e<a.length;e++)he(a[e].shape[0]===o,(()=>`Batch size mismatch: output ${t.outputNames[e]} has ${a[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`));return{xs:i,ys:a}}function fy(t,e,n){if(n instanceof sn)return[n];if(Array.isArray(n))return he(n.length===e.length,(()=>`Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`)),n;{const s=[];for(const r of e){if(null==n[r])throw new mg(`The feature data generated by the dataset lacks the required ${t} key '${r}'.`);s.push(n[r])}return s}}function gy(t){return"function"==typeof t.iterator}function my(t){he(t>0&&Number.isInteger(t),(()=>"batchSize is required to be a positive integer, but got "+t))}function xy(t,e,n){return null==t?[null]:Array.isArray(t)?t.map((t=>gm(t,e,n-e))):gm(t,e,n-e)}function yy(t,e){return Vs((()=>null==t?null:Array.isArray(t)?t.map((t=>yy(t,e))):km(t,"int32"===e.dtype?e:e.toInt())))}function by(t,e){const n=[];let s=0,r=null;for(;s<t;)r=s+e,r>=t&&(r=t),n.push([s,r]),s=r;return n}function wy(t){const e=[];t instanceof sn&&(t=[t]);for(let n=0;n<t.length;++n){const s=t[n];if(1===s.rank)e.push(fm(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(s)}}return e}function vy(t,e){if(null==t)return;const n=[];if(e instanceof sn)n.push(e.id);else if(Array.isArray(e))e.forEach((t=>n.push(t.id)));else if(null!=e)for(const t in e){const s=e[t];n.push(s.id)}const s=[];if(t instanceof sn)-1===n.indexOf(t.id)&&s.push(t);else if(Array.isArray(t))t.forEach((t=>{-1===n.indexOf(t.id)&&s.push(t)}));else if(null!=t)for(const e in t){const r=t[e];-1===n.indexOf(r.id)&&s.push(r)}s.forEach((t=>{t.isDisposed||t.dispose()}))}function Cy(t){return Array.isArray(t)}function ky(t){return!function(t){return t instanceof sn}(t)&&!Cy(t)}function $y(t,e,n,s=!0,r=""){if(null==e||0===e.length){if(null!=t){let e=!1;if(Cy(t)&&t.length>0)e=!0;else if(ky(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new mg(`Error when checking model ${r} expected no data, but got `+t)}return[]}if(null==t)return e.map((t=>null));let i;if(ky(t)){t=t,i=[];for(const n of e){if(null==t[n])throw new mg(`No data provided for "${n}". Need data for each key in: `+e);i.push(t[n])}}else if(Cy(t)){if((t=t).length!==e.length)throw new mg(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): `+t);i=t}else{if(t=t,e.length>1)throw new mg(`The model ${r} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape `+t.shape);i=[t]}if(i=wy(i),null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const a=i[t];if(a.shape.length!==n[t].length)throw new mg(`Error when checking ${r}: expected ${e[t]} to have ${n[t].length} dimension(s). but got array with shape `+a.shape);for(let i=0;i<n[t].length;++i){if(0===i&&!s)continue;const o=a.shape[i],l=n[t][i];if(null!=l&&l>=0&&o!==l)throw new mg(`Error when checking ${r}: expected ${e[t]} to have shape [${n[t]}], but got array with shape [${a.shape}].`)}}return i}function Iy(t,e,n,s=!0,r=""){let i;if(Array.isArray(t)){if(t.length!==e.length)throw new mg(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);i=t}else{if(e.length>1)throw new mg(`The model expects ${e.length} ${r} Tensors, but only received one Tensor. Found: array with shape `+JSON.stringify(t.shape)+".");i=[t]}if(null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const a=i[t];if(a.shape.length!==n[t].length)throw new mg(`Error when checking ${r}: expected ${e[t]} to have ${n[t].length} dimension(s), but got array with shape `+JSON.stringify(a.shape));for(let i=0;i<n[t].length;++i){if(0===i&&!s)continue;const o=a.shape[i],l=n[t][i];if(null!=l&&l!==o)throw new mg(`Error when checking ${r}: expected ${e[t]} to have shape ${JSON.stringify(n[t])} but got array with shape ${JSON.stringify(a.shape)}.`)}}}class Ey extends uy{constructor(t){super(t),this.isTraining=!1}summary(t,e,n=console.log){if(!this.built)throw new mg("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(t,e,n,s=console.log){const r=function(t){let e=!0;const n=[],s=[];for(const e in t.nodesByDepth)n.push(t.nodesByDepth[e]);for(const t of n){if(t.length>1||1===t.length&&t[0].inboundLayers.length>1){e=!1;break}s.push(...t)}if(e)for(const n of t.layers){let t=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),i=["Layer (type)","Output shape","Param #"];let a;if(r?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((t=>Math.floor(e*t)))),!r){i.push("Receives inputs"),a=[];for(const e in t.nodesByDepth)a.push(...t.nodesByDepth[e])}s("_".repeat(e)),Yx(i,n,s),s("=".repeat(e));const o=t.layers;for(let t=0;t<o.length;++t)r?Jx(o[t],n,s):Zx(o[t],n,a,s),s((t===o.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const l=function(t){let e;return e=null!=t.collectedTrainableWeights?ix(t.collectedTrainableWeights):ix(t.trainableWeights),e}(t),u=ix(t.nonTrainableWeights);s("Total params: "+(l+u)),s("Trainable params: "+l),s("Non-trainable params: "+u),s("_".repeat(e))}(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>uo.adagrad(.01),Adadelta:()=>uo.adadelta(1,.95,pg()),Adam:()=>uo.adam(.001,.9,.999,pg()),Adamax:()=>uo.adamax(.002,.9,.999,pg(),0),RMSProp:()=>uo.rmsprop(.001,.9,0,pg()),SGD:()=>uo.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new mg("Unknown Optimizer "+t)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof qs))throw new mg("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new mg(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const n=t.loss;e=n.map((t=>Mx(t)))}else{const n=Mx(t.loss);this.outputs.forEach((t=>{e.push(n)}))}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new mg(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: `+this.outputNames);for(const n of this.outputNames)null==t.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),e.push(Mx(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let t=0;t<this.outputs.length;++t){const e=this.internalOutputShapes[t],n=this.outputNames[t];this.feedOutputNames.push(n),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[t])}const n=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],sm("loss",(()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}}));const s=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map((t=>[]));let n;if("string"==typeof t||"function"==typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+t);n=t}if(Array.isArray(n))return e.map((t=>n));{const t=[];for(const s of e){let e=n.hasOwnProperty(s)?n[s]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),r=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};sm("metric",(()=>{for(let t=0;t<this.outputs.length;++t)-1===n.indexOf(t)&&(e=>{let n,s,i;for(const a of e){if("string"==typeof a&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(a)){const e=this.internalOutputShapes[t];let r;1===e[e.length-1]||this.lossFunctions[t]===Ox?-1!==["accuracy","acc"].indexOf(a)?s=zx:-1!==["crossentropy","ce"].indexOf(a)&&(s=Wx):this.lossFunctions[t]===_x?-1!==["accuracy","acc"].indexOf(a)?s=Ux:-1!==["crossentropy","ce"].indexOf(a)&&(s=Gx):-1!==["accuracy","acc"].indexOf(a)?s=Px:-1!==["crossentropy","ce"].indexOf(a)&&(s=Vx),-1!==["accuracy","acc"].indexOf(a)?r="acc":-1!==["crossentropy","ce"].indexOf(a)&&(r="ce"),i=s,n=""+r}else{const t=jx(a);i=t,n=""+Kx(a)}let e;sm(n,(()=>{e=i})),r(t,n,e)}})(s[t])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,n={}){const s=null==n.batchSize?32:n.batchSize;my(s);const r=this.standardizeUserDataXY(t,e,!0,s);try{const i=r[0].concat(r[1]);this.makeTestFunction();const a=this.testFunction;return Cg(this.testLoop(a,i,s,n.verbose,n.steps))}finally{vy(r[0],t),vy(r[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const s=null!=(n=n||{}).batches,r=t.testFunction;let i=[];if(n.verbose>0)throw new xg("Verbose mode is not implemented yet.");he(!s||n.batches>0&&Number.isInteger(n.batches),(()=>"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches)));const a="function"==typeof e.next?e:await e.iterator();let o=0,l=0;for(;!s||l<n.batches;){const e=await a.next();if(i=Vs((()=>{if(e.value){const{xs:n,ys:s}=py(t,e.value),a=n.concat(s),u=Vs((()=>r(a)));if(Gs(a),0===l)for(let t=0;t<u.length;++t)i.push(Ks(0));const c=a[0].shape[0];for(let t=0;t<u.length;++t){const e=u[t],n=i[t];i[t]=Vs((()=>Ys(i[t],di(c,e)))),l>0&&Gs(n)}Gs(u),o+=c,++l}return i})),e.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let t=0;t<i.length;++t){const e=i[t];i[t]=Hr(i[t],o),Gs(e)}return Cg(i)}(this,t,e)}checkNumSamples(t,e,n,s="steps"){let r;if(null!=n){if(r=null,null!=e)throw new mg(`If ${s} is set, batchSize must be null or undefined.Got batchSize = `+e)}else{if(null==t)throw new mg("Either the input data should have a defined shape, or "+s+" shoud be specified.");r=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return r}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new mg("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(e),s=n?e:[e],r=this.retrieveSymbolicTensors(s),i=new ny;if(t instanceof sn&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new mg(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)i.add(this.inputs[e],t[e])}else for(const e of this.inputs){const n=t[e.name];if(null==n)throw new mg("No value is provided for the model's input "+e.name);i.add(e,n)}const a=iy(r,i);return n?a:a[0]}retrieveSymbolicTensors(t){const e=bg(null,t.length);let n=t.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],i=r.map((t=>t.name));for(let s=0;s<t.length;++s){const a=i.indexOf(t[s]);if(-1!==a&&(e[s]=r[a],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach(((e,s)=>{null==e&&n.push(t[s])})),new mg("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(n))}return e}predictLoop(t,e=32,n=!1){return Vs((()=>{const s=this.checkNumSamples(t);if(n)throw new xg("Verbose predictLoop() is not implemented yet.");const r=by(s,e),i=this.outputs.map((t=>[]));for(let e=0;e<r.length;++e)Vs((()=>{const n=r[e][0],s=r[e][1],i=xy(t,n,s),a=[];if(Array.isArray(i))for(let t=0;t<i.length;++t)a.push({key:this.inputs[t],value:i[t]});else a.push({key:this.inputs[0],value:i});const o=new ny(a);return iy(this.outputs,o)})).forEach(((t,e)=>i[e].push(t)));return Cg(i.map((t=>Fr(t,0))))}))}predict(t,e={}){const n=wy(t);Iy(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==e.batchSize?32:e.batchSize;return my(s),this.predictLoop(n,s)}finally{vy(n,t)}}predictOnBatch(t){Iy(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,n=!0,s){if(null==this.optimizer_)throw new gg("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let t=0;t<this.feedOutputShapes.length;++t){const e=this.feedOutputShapes[t];this.feedLossFns[t]===_x?r.push(e.slice(0,e.length-1).concat([1])):r.push(e)}if(function(t,e,n){const s=Tg(t.map((t=>t.shape[0])));s.sort();const r=Tg(e.map((t=>t.shape[0])));if(r.sort(),s.length>1)throw new mg("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map((t=>t.shape))));if(r.length>1)throw new mg("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map((t=>t.shape))));if(s.length>0&&r.length>0&&!me(s,r))throw new mg(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(t=$y(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=$y(e,this.feedOutputNames,r,!1,"target")),function(t,e,n){const s=[Nx,Ox,Fx];for(let r=0;r<t.length;++r){const i=t[r],a=e[r],o=n[r];if(null!=a){if(a===Fx&&1===i.shape[i.shape.length-1])throw new mg(`You are passing a target array of shape ${i.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(a)){const t=i.shape.slice(1),e=o.slice(1);for(let n=0;n<t.length;++n){const s=t[n],r=e[n];if(null!=r&&s!==r)throw new mg(`A target Tensor with shape ${i.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&t[0].shape[0]%s!=0)throw new mg(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,n,s,r=!0,i){const[a,o]=this.standardizeUserDataXY(t,e,r,i);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const t=cy(s,this.outputNames);l=[];for(let e=0;e<t.length;++e)l.push(await hy(o[e],null,t[e]))}return[a,o,l]}testLoop(t,e,n,s=0,r){return Vs((()=>{const i=this.checkNumSamples(e,n,r,"steps"),a=[];if(s>0)throw new xg("Verbose mode is not implemented yet.");if(null!=r)throw new xg("steps mode in testLoop() is not implemented yet");{const s=by(i,n),r=Vi(dm(0,i));for(let n=0;n<s.length;++n){const i=s[n][0],o=s[n][1],l=gm(r,i,o-i),u=yy(e,l),c=t(u);if(0===n)for(let t=0;t<c.length;++t)a.push(Ks(0));for(let t=0;t<c.length;++t){const e=c[t];a[t]=Ys(a[t],di(o-i,e))}}for(let t=0;t<a.length;++t)a[t]=Hr(a[t],i)}return a}))}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const s=t[n];let r=s;vg(t,s)>1&&(r+="_"+vg(t.slice(0,n),s)),e.push(r)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),i=[],a=this.collectedTrainableWeights.map((t=>t.read()));return[this.optimizer_.minimize((()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const a=new ny(t),o=iy(this.outputs,a,{training:!0});let l;for(let t=0;t<this.lossFunctions.length;++t){let n=(0,this.lossFunctions[t])(s[t],o[t]);null!=r[t]&&(n=dy(n,r[t]));const i=Ii(n);e.push(i),l=0===t?n:Ys(l,n)}for(let t=0;t<this.metricsTensors.length;++t){let n;if(this.outputs.length>1&&t<this.outputs.length)n=e[t];else{const e=this.metricsTensors[t][0],r=this.metricsTensors[t][1];n=Ii(e(s[r],o[r]))}Hs(n),i.push(n)}return l=Ii(l),this.calculateLosses().forEach((t=>{l=Ys(l,t)})),l}),!0,a)].concat(i)}}makeTestFunction(){this.testFunction=t=>Vs((()=>{const e=[];let n;const s=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let t=0;t<this.inputs.length;++t)i.push({key:this.inputs[t],value:s[t]});const a=new ny(i),o=iy(this.outputs,a);for(let t=0;t<this.lossFunctions.length;++t){const s=this.lossFunctions[t],i=Ii(s(r[t],o[t]));n=0===t?i:Ys(n,i),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][0],s=this.metricsTensors[t][1],i=Ii(n(r[s],o[s]));e.push(i)}return e}))}async fit(t,e,n={}){return async function(t,e,n,s={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,i,a,o,l,u,c;t.isTraining=!0;try{const h=null==s.batchSize?32:s.batchSize;my(h);const d=!1,p=await t.standardizeUserData(e,n,s.sampleWeight,s.classWeight,d,h);r=p[0],i=p[1],c=p[2];let f,g=!1;if(null!=s.validationData&&s.validationData.length>0){if(g=!0,2!==s.validationData.length)throw 3===s.validationData.length?new xg("validationData including sample weights is not supported yet."):new mg("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+s.validationData+" is invalid.");a=s.validationData[0],o=s.validationData[1];const e=!0,n=await t.standardizeUserData(a,o,null,null,e,h);l=n[0],u=n[1],f=l.concat(u)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){g=!0;const t=Math.floor(r[0].shape[0]*(1-s.validationSplit)),e=r[0].shape[0];l=xy(r,t,e),r=xy(r,0,t),u=xy(i,t,e),i=xy(i,0,t),f=l.concat(u)}else null!=s.validationSteps&&(g=!0);const m=r.concat(i).concat(c);t.checkTrainableWeightsConsistency();const x=t.makeTrainFunction(),y=t.getDedupedMetricsNames();let b,w;g?(t.makeTestFunction(),b=t.testFunction,w=y.slice().concat(y.map((t=>"val_"+t)))):(b=null,f=[],w=y.slice());const v=Ix(s.callbacks,s.yieldEvery);return await async function(t,e,n,s,r,i,a,o,l,u,c,h,d,p,f){null==r&&(r=32),null==i&&(i=1),null==c&&(c=!0),null==d&&(d=0);let g=!1;null!=l&&null!=u&&(g=!0);const m=t.checkNumSamples(n,r,p,"steps_per_epoch");let x;null!=m&&(x=dm(0,m)),null==a&&(a=1);const{callbackList:y,history:b}=Rx(o,a,i,d,m,p,r,g,h);y.setModel(t),t.history=b,await y.onTrainBegin(),t.stopTraining_=!1;for(let a=d;a<i;++a){await y.onEpochBegin(a);const i={};{if("batch"===c)throw new xg("batch shuffling is not implemneted yet");c&&le(x);const a=Vi(x),o=by(m,r);for(let c=0;c<o.length;++c){const h={};if(await y.onBatchBegin(c,h),Vs((()=>{const d=o[c][0],p=o[c][1],f=gm(a,d,p-d);h.batch=c,h.size=p-d;const m=yy(n,f),x=e(m);for(let t=0;t<s.length;++t){const e=s[t],n=x[t];h[e]=n,Hs(n)}if(c===o.length-1&&g){const e=t.testLoop(l,u,r);for(let t=0;t<s.length;++t){const n=s[t],r=e[t];Hs(r),i["val_"+n]=r}}})),await y.onBatchEnd(c,h),yx(h),t.stopTraining_)break}a.dispose()}if(await y.onEpochEnd(a,i),t.stopTraining_)break}return await y.onTrainEnd(),await t.history.syncData(),t.history}(t,x,m,y,h,s.epochs,s.verbose,v,b,f,s.shuffle,w,s.initialEpoch,null)}finally{t.isTraining=!1,vy(r,e),vy(i,n),vy(l,a),vy(u,o),null!=c&&Gs(c)}}(this,t,e,n)}async fitDataset(t,e){return async function(t,e,n){const s=null!=n.batchesPerEpoch;if(he(null!=t.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),he(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),he(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs)),he(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch)),he(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const r=null!=n.validationData;let i,a;if(r)if(gy(n.validationData))he(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches));else{const t=function(t){if(3===t.length)throw new xg("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData);i=t.xs,a=t.ys}const o=t.makeTrainFunction(),l=t.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map((t=>"val_"+t))):l.slice();const c=Ix(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:d,history:p}=Rx(c,h,n.epochs,null,null,function(t,e){let n=null;return null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size),n}(e,n),null,r,u);d.setModel(t),t.history=p,await d.onTrainBegin(),t.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,g=await e.iterator();for(;f<n.epochs;){const u={};await d.onEpochBegin(f);let c=0,h=0;for(s||(g=await e.iterator());!s||c<n.batchesPerEpoch;){const e=await g.next();if(s&&e.done){console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+c+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:s,ys:r}=py(t,e.value),i={};i.batch=h,i.size=s[0].shape[0],await d.onBatchBegin(h,i);const a=[];if(null!=n.classWeight){const e=cy(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)a.push(await hy(r[t],null,e[t]))}const u=s.concat(r).concat(a),p=o(u);Gs(u);for(let t=0;t<l.length;++t){const e=l[t],n=p[t];i[e]=n,Hs(n)}await d.onBatchEnd(h,i),yx(i),h++,c++}if(s?c>=n.batchesPerEpoch:e.done){if(r){let e;e=gy(n.validationData)?kg(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):kg(t.evaluate(i,a,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)u["val_"+t.metricsNames[n]]=e[n]}break}if(t.stopTraining_)break}if(await d.onEpochEnd(f,u),f++,t.stopTraining_)break}return await d.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),s=n[0],r=n[1],i=this.makeTrainFunction()(s.concat(r)),a=[];for(const t of i){const e=await t.data();a.push(e[0])}return Gs(i),Cg(a)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let t=0;t<s.length;++t)n&&!s[t].trainable||e.push({name:s[t].originalName,tensor:r[t]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=Us().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-Us().numTensors}return t}getLossIdentifiers(){let t;if("string"==typeof this.loss)t=$g(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!=typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map((t=>$g(t)))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const s of e){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");t[s]=$g(n[s])}}return t}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[$g(Kx(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((t=>$g(Kx(t))));{const t={};for(const e in this.metrics)t[e]=$g(Kx(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=Sx(ty(t.optimizer_config));let n,s;if("string"==typeof t.loss)n=Ig(t.loss);else if(Array.isArray(t.loss))n=t.loss.map((t=>Ig(t)));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=Ig(t.loss[e])}if(Array.isArray(t.metrics))s=t.metrics.map((t=>Ig(t)));else if(null!=t.metrics){s={};for(const e in t.metrics)s[e]=Ig(t.metrics[e])}this.compile({loss:n,metrics:s,optimizer:e})}async save(t,e){if("string"==typeof t){const e=(n=t,Wn.getSaveHandlers(n));if(0===e.length)throw new mg(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new mg(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}var n;if(null==t.save)throw new mg("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const s=await _n(this.getNamedWeights(e)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.6.0",convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:n}=await _n(await this.optimizer.getWeights(),t);s.specs.push(...n),s.data=Mn([s.data,e])}if(null!=this.userDefinedMetadata){const t=!0;qx(this.userDefinedMetadata,this.name,t),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=s.data,r.weightSpecs=s.specs,t.save(r)}setUserDefinedMetadata(t){qx(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}Ey.className="Model",zs(Ey);class Ry extends Ey{}Ry.className="Functional",zs(Ry);class Sy extends Ey{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:tx("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some((t=>t<0)))throw new mg("Negative dimension size caused by adding layer "+t.name+" with input shape ["+t.inboundNodes[0].inputTensors[0].shape+"]")}add(t){const e=t instanceof Sy||t instanceof Ey;let n;if(e){if(n=t,1!==n.outputs.length)throw new mg("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new mg("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new mg("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=function(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new mg("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;return null==n&&(n="float32"),new mx({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new mg(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new mg("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=gx(this.outputs[0])}this.inboundNodes=[],new dx({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:bg(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((t=>t.shape)),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(rx(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Ey({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,n=console.log){this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,n={}){if(!this.built)throw new gg("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new gg("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,n={}){if(!this.built)throw new gg("The model needs to be compiled before being used.");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new gg("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,n={},s=!1){let r,i={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0].className)throw new mg("Legacy serialization format not supported yet.");r=e}else he(null!=e.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=e.layers,delete e.layers,i=e;const a=new t(i);if(!(a instanceof Sy))throw new xg("Sequential.fromConfig called on non-Sequential input: "+a);for(const t of r){const e=Sx(t,void 0,s);s&&e.setFastWeightInitDuringBuild(!0),a.add(e)}return a}set stopTraining(t){if(null==this.model)throw new mg("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new mg("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}Sy.className="Sequential",zs(Sy);class Ay extends Bs{getConfig(){return{}}}class Ny extends Ay{apply(t,e=1){return function(t,e=1){if(1!==e)throw new xg(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return jr(t)}(t,e)}}Ny.className="elu",zs(Ny);class Ty extends Ay{apply(t){return Ki(t)}}Ty.className="selu",zs(Ty);class Dy extends Ay{apply(t){return Hi(t)}}Dy.className="relu",zs(Dy);class Fy extends Ay{apply(t){return Vs((()=>Ri(6,Hi(t))))}}Fy.className="relu6",zs(Fy);class _y extends Ay{apply(t){return t}}_y.className="linear",zs(_y);class Oy extends Ay{apply(t){return Xi(t)}}Oy.className="sigmoid",zs(Oy);class Ly extends Ay{apply(t){return function(t){return Vs((()=>{const e=Ys(.5,di(.2,t));return Nr(e,0,1)}))}(t)}}Ly.className="hardSigmoid",zs(Ly);class By extends Ay{apply(t){return na(t)}}By.className="softplus",zs(By);class My extends Ay{apply(t){return function(t){return Vs((()=>Hr(t,Xs(t).add(1))))}(t)}}My.className="softsign",zs(My);class zy extends Ay{apply(t){return la(t)}}zy.className="tanh",zs(zy);class Py extends Ay{apply(t,e=-1){return ea(t,e)}}Py.className="softmax",zs(Py);class Wy extends Ay{apply(t,e=-1){return bi(t,e)}}Wy.className="logSoftmax",zs(Wy);class Uy extends Ay{apply(t,e=1){return Vs((()=>Xi(t.mul(e)).mul(t)))}}function Vy(t){return t.getClassName()}function Gy(t,e={}){return Ag(t,Ms.getMap().classNameMap,e,"activation")}function Hy(t){if(null==t){return Gy({className:"linear",config:{}})}if("string"==typeof t){const e={};return e.className=t,e.config={},Gy(e)}return t instanceof Ay?t:Gy(t)}Uy.className="swish",zs(Uy);class jy extends Bs{}class Ky extends jy{constructor(t){super(),function(t){if(null!=t&&"object"!=typeof t)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+t)}(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return Vs((()=>{let e=ki([1]);return this.hasL1&&(e=Ys(e,yi(di(this.l1,Xs(t))))),this.hasL2&&(e=Ys(e,yi(di(this.l2,$m(t))))),e.asScalar()}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}Ky.className="L1L2",zs(Ky);const qy={l1l2:"L1L2"};function Xy(t){return Rg(t)}function Yy(t,e={}){return Ag(t,Ms.getMap().classNameMap,e,"regularizer")}function Jy(t){return null==t?null:"string"==typeof t?Yy({className:t in qy?qy[t]:t,config:{}}):t instanceof jy?t:Yy(t)}class Zy extends fx{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=sx(t);let n=Hi(t);return null!=this.maxValue&&(n=Nr(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}Zy.className="ReLU",zs(Zy);class Qy extends fx{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=sx(t);return pi(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}Qy.className="LeakyReLU",zs(Qy);class tb extends fx{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=Ym(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Jy(t.alphaRegularizer),this.alphaConstraint=Kg(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!=typeof t.sharedAxes)throw new mg("Expected sharedAxes to be a number or an array of numbers, but got "+t.sharedAxes);this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=rx(t)).slice(1);if(null!=this.sharedAxes)for(const t of this.sharedAxes)e[t-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let e=1;e<t.length;++e)n[e]=t[e];this.inputSpec=[new ux({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=sx(t),Bi(t,this.alpha.read())}getConfig(){const t={alphaInitializer:Xm(this.alphaInitializer),alphaRegularizer:Xy(this.alphaRegularizer),alphaConstraint:Hg(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}tb.className="PReLU",zs(tb);class eb extends fx{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new xg(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=sx(t);return jr(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}eb.className="ELU",zs(eb);class nb extends fx{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=sx(t);return n.mul(pm(n.greater(this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}nb.className="ThresholdedReLU",zs(nb);class sb extends fx{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new Py).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const n=sx(t);return this.softmax(n,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function rb(t,e,n){if("number"==typeof t)return bg(t,e);if(t.length!==e)throw new mg(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let r=0;r<e;++r){const i=t[r];if((s=i)!==parseInt(s.toString(),10))throw new mg(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number `+i)}return t;var s}function ib(t,e,n,s,r=1){if(null==t)return t;let i;return i="same"===n?t:t-(e+(e-1)*(r-1))+1,Math.floor((i+s-1)/s)}function ab(t,e,n,s){if(null==t)return null;if("valid"===s)t=t*e+hm([n-e,0]);else{if("same"!==s)throw new mg(`Unsupport padding mode: ${s}.`);t*=e}return t}function ob(t,e){return Vs((()=>(Qg(e),"channelsFirst"===e?ar(t,[0,2,3,1]):t)))}function lb(t,e){return Vs((()=>(Qg(e),"channelsFirst"===e?ar(t,[0,2,3,4,1]):t)))}function ub(t,e,n,s=[1,1],r="valid",i,a,o=null){return Vs((()=>{if(null==i&&(i="channelsLast"),Qg(i),3!==t.rank&&4!==t.rank)throw new mg(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new mg(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let l=ob(t,i);if("causal"===r)throw new xg("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Ia({x:l,filter:e,strides:s,pad:"same"===r?"same":"valid",dilations:a,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===i&&(l=ar(l,[0,3,1,2])),l}))}sb.className="Softmax",zs(sb);class cb extends fx{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",cb.verifyArgs(e),this.rank=t,Og(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new xg(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=rb(e.kernelSize,t,"kernelSize"),this.strides=rb(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,tm(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Qg(this.dataFormat),this.activation=Hy(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=Ym(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Kg(e.biasConstraint),this.biasRegularizer=Jy(e.biasRegularizer),this.activityRegularizer=Jy(e.activityRegularizer),this.dilationRate=rb(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new mg("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(this.dilationRate));if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new mg("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(this.dilationRate))}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new mg("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(this.dilationRate))}static verifyArgs(t){if(wg("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!_g(t.kernelSize,"number",1,3))throw new mg(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Vy(this.activation),useBias:this.useBias,biasInitializer:Xm(this.biasInitializer),biasRegularizer:Xy(this.biasRegularizer),activityRegularizer:Xy(this.activityRegularizer),biasConstraint:Hg(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class hb extends cb{constructor(t,e){super(t,e),this.kernel=null,hb.verifyArgs(e),this.filters=e.filters,Og(this.filters,"filters"),this.kernelInitializer=Ym(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Kg(e.kernelConstraint),this.kernelRegularizer=Jy(e.kernelRegularizer)}build(t){t=rx(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new mg("The channel dimension of the input should be defined. Found "+t[e]);const n=t[e],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return Vs((()=>{let e;t=sx(t);const n=null==this.bias?null:this.bias.read(),s=Bg(this.activation.getClassName());if(null!=s&&2===this.rank)e=ub(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)e=function(t,e,n,s=1,r="valid",i,a=1){return Vs((()=>{if(null==i&&(i="channelsLast"),Qg(i),3!==t.shape.length)throw new mg("The input of a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead.");if(3!==e.shape.length)throw new mg("The kernel for a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new mg("The bias for a conv1dWithBias operation should be 1, but is "+e.shape.length+" instead");if("channelsFirst"===i&&(t=ar(t,[0,2,1])),"causal"===r)throw new xg("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=zr(t,e,s,"same"===r?"same":"valid","NWC",a);return null!=n&&(o=Em(o,n)),o}))}(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=ub(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new xg("convolutions greater than 3D are not implemented yet.");e=function(t,e,n,s=[1,1,1],r="valid",i,a){return Vs((()=>{if(null==i&&(i="channelsLast"),Qg(i),4!==t.rank&&5!==t.rank)throw new mg("conv3dWithBias expects input to be of rank 4 or 5, but received "+t.rank+".");if(4!==e.rank&&5!==e.rank)throw new mg("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+t.rank+".");let o=lb(t,i);if("causal"===r)throw new xg("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Ur(o,e,s,"same"===r?"same":"valid","NDHWC",a),null!=n&&(o=Em(o,n)),"channelsFirst"===i&&(o=ar(o,[0,4,1,2,3])),o}))}(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e}))}computeOutputShape(t){t=rx(t);const e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let t=0;t<n.length;++t){const s=ib(n[t],this.kernelSize[t],this.padding,this.strides[t],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[t]);e.push(s)}let s=[t[0]];return"channelsLast"===this.dataFormat?(s=s.concat(e),s.push(this.filters)):(s.push(this.filters),s=s.concat(e)),s}getConfig(){const t={filters:this.filters,kernelInitializer:Xm(this.kernelInitializer),kernelRegularizer:Xy(this.kernelRegularizer),kernelConstraint:Hg(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new mg("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(t.filters))}}class db extends hb{constructor(t){super(2,t),db.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!_g(t.kernelSize,"number",1,2))throw new mg(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}db.className="Conv2D",zs(db);class pb extends hb{constructor(t){super(3,t),pb.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new mg(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}pb.className="Conv3D",zs(pb);class fb extends db{constructor(t){if(super(t),this.inputSpec=[new ux({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new mg("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+this.padding)}build(t){if(4!==(t=rx(t)).length)throw new mg("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new mg("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ux({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return Vs((()=>{let e=sx(t);if(4!==e.shape.length)throw new mg("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+e.shape.length);const n=e.shape,s=n[0];let r,i;"channelsFirst"===this.dataFormat?(r=2,i=3):(r=1,i=2);const a=n[r],o=n[i],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],d=[s,ab(a,c,l,this.padding),ab(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=ar(e,[0,2,3,1]));let p=Wr(e,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(p=ar(p,[0,3,1,2])),null!=this.bias&&(p=Em(p,this.bias.read(),this.dataFormat)),null!=this.activation&&(p=this.activation.apply(p)),p}))}computeOutputShape(t){const e=(t=rx(t)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const i=this.kernelSize[0],a=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return e[n]=this.filters,e[s]=ab(e[s],o,i,this.padding),e[r]=ab(e[r],l,a,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}fb.className="Conv2DTranspose",zs(fb);class gb extends hb{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new mg("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new mg("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new mg(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received `+JSON.stringify(e.padding));this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Ym(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Jy(e.depthwiseRegularizer),this.depthwiseConstraint=Kg(e.depthwiseConstraint),this.pointwiseInitializer=Ym(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Jy(e.pointwiseRegularizer),this.pointwiseConstraint=Kg(e.pointwiseConstraint)}build(t){if((t=rx(t)).length<this.rank+2)throw new mg(`Inputs to SeparableConv${this.rank}D should have rank `+(this.rank+2)+", but received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new mg("The channel dimension of the inputs should be defined, but found "+JSON.stringify(t[e]));const n=t[e],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let t=0;t<this.rank;++t)r.push(1);r.push(n*this.depthMultiplier,this.filters);const i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):this.bias=null,this.inputSpec=[new ux({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return Vs((()=>{let e;if(t=sx(t),1===this.rank)throw new xg("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=ar(t,[0,2,3,1])),e=qi(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=Em(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=ar(e,[0,3,1,2])),e}))}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=Xm(this.depthwiseInitializer),t.pointwiseInitializer=Xm(this.pointwiseInitializer),t.depthwiseRegularizer=Xy(this.depthwiseRegularizer),t.pointwiseRegularizer=Xy(this.pointwiseRegularizer),t.depthwiseConstraint=Hg(this.depthwiseConstraint),t.pointwiseConstraint=Hg(this.pointwiseConstraint),t}}gb.className="SeparableConv";class mb extends gb{constructor(t){super(2,t)}}mb.className="SeparableConv2D",zs(mb);class xb extends hb{constructor(t){super(1,t),xb.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!_g(t.kernelSize,"number",1,1))throw new mg(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}xb.className="Conv1D",zs(xb);class yb extends fx{constructor(t){super(t),"number"==typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return Vs((()=>{if(t=sx(t),"channelsLast"===this.dataFormat){const e=xm(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return xm(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=xm(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return xm(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}yb.className="Cropping2D",zs(yb);class bb extends fx{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat}computeOutputShape(t){if("channelsFirst"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}{const e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2];return[t[0],e,n,t[3]]}}call(t,e){return Vs((()=>{let e=sx(t);const n=e.shape;if("channelsFirst"===this.dataFormat){e=ar(e,[0,2,3,1]);const t=this.size[0]*n[2],s=this.size[1]*n[3],r=e.resizeNearestNeighbor([t,s]);return ar(r,[0,3,1,2])}{const t=this.size[0]*n[1],s=this.size[1]*n[2];return e.resizeNearestNeighbor([t,s])}}))}getConfig(){const t={size:this.size,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}bb.className="UpSampling2D",zs(bb);class wb extends cb{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Ym(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Kg(t.depthwiseConstraint),this.depthwiseRegularizer=Jy(t.depthwiseRegularizer)}build(t){if((t=rx(t)).length<4)throw new mg(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new mg(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const n=t[e],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Vs((()=>{let e=function(t,e,n=[1,1],s="valid",r,i){return Vs((()=>{null==r&&(r="channelsLast"),Qg(r);let a=ob(t,r);if(4!==t.rank)throw new mg("Input for depthwiseConv2d is required to be 4-D, but is instead "+t.rank+"-D");if(4!==e.rank)throw new mg("depthwiseKernel is required to be 4-D, but is instead "+e.rank+"-D");return a=Vr(a,e,n,"same"===s?"same":"valid","NHWC",i),"channelsFirst"===r&&(a=ar(a,[0,3,1,2])),a}))}(t=sx(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=Em(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e}))}computeOutputShape(t){t=rx(t);const e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],s="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,r=ib(e,this.kernelSize[0],this.padding,this.strides[0]),i=ib(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],s,r,i]:[t[0],r,i,s]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=Xm(this.depthwiseInitializer),t.depthwiseRegularizer=Xy(this.depthwiseRegularizer),t.depthwiseConstraint=Hg(this.depthwiseRegularizer),t}}function vb(t,e,n,s){if(Array.isArray(t)){if(null!=e||null!=n)throw new mg("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=t.slice(t.length-s,t.length),t=t.slice(0,t.length-s)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function r(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=r(e),constants:n=r(n)}}function Cb(t,e,n,s=!1,r,i,a=!1,o=!1){return Vs((()=>{const l=e.shape.length;if(l<3)throw new mg(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(dm(2,l));if(e=ar(e,u),null!=i)throw new xg("The rnn() functoin of the deeplearn.js backend does not support constants yet.");a&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=r.asType("bool").asType("float32")).rank===l-1&&(r=Jr(r,-1)),r=ar(r,u)),s&&(e=ji(e,0),null!=r&&(r=ji(r,0)));const c=[];let h,d=n;const p=e.shape[0],f=ca(e);let g,m;null!=r&&(g=ca(r));for(let e=0;e<p;++e){const n=f[e],s=Vs((()=>t(n,d)));if(null==r)h=s[0],d=s[1];else{const t=Vs((()=>{const t=g[e],n=Oi(t).sub(t);return{output:s[0].mul(t).add(d[0].mul(n)),newStates:d.map(((e,r)=>s[1][r].mul(t).add(e.mul(n))))}}));h=t.output,d=t.newStates}o&&c.push(h)}return o&&(m=oa(c,1)),[h,m,d]}))}wb.className="DepthwiseConv2D",zs(wb);class kb extends fx{constructor(t){let e;if(super(t),null==t.cell)throw new mg("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new Tb({cells:t.cell}):t.cell,null==e.stateSize)throw new mg("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new ux({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?dm(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((t=>null)):this.states_}setStates(t){this.states_=t}computeOutputShape(t){ex(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let s;if(s=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const s of e)n.push([t[0],s]);return[s].concat(n)}return s}computeMask(t,e){return Vs((()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map((t=>null));return[t].concat(e)}return t}))}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new xg("Constants support is not implemented in RNN yet.");ex(t)&&(t=t[0]),t=t;const e=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new ux({shape:[e,null,...n]});const s=[t[0]].concat(t.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!me(this.stateSpec.map((t=>t.shape[t.shape.length-1])),r))throw new mg(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is `+this.cell.stateSize)}else this.stateSpec=r.map((t=>new ux({shape:[null,t]})));this.stateful&&this.resetStates()}resetStates(t,e=!1){Vs((()=>{if(!this.stateful)throw new fg("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new mg("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>ki([n,t]))):this.states_=[ki([n,this.cell.stateSize])];else if(null==t)Gs(this.states_),null!=this.keptStates&&(Gs(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>ki([n,t]))):this.states_[0]=ki([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new mg(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);!0===e?this.keptStates.push(this.states_.slice()):Gs(this.states_);for(let e=0;e<this.states_.length;++e){const s=t[e],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,i=[n,r];if(!me(s.shape,i))throw new mg(`State ${e} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${s.shape}`);this.states_[e]=s}}this.states_=this.states_.map((t=>Hs(t.clone())))}))}apply(t,e){let n=null==e?null:e.initialState,s=null==e?null:e.constants;null==e&&(e={});const r=vb(t,n,s,this.numConstants);t=r.inputs,n=r.initialState,s=r.constants;let i=[],a=[];if(null!=n){e.initialState=n,i=i.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new ux({shape:t.shape}));a=a.concat(this.stateSpec)}if(null!=s&&(e.constants=s,i=i.concat(s),this.numConstants=s.length),i[0]instanceof cx){const n=[t].concat(i),s=this.inputSpec.concat(a),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,e);return this.inputSpec=r,o}return super.apply(t,e)}call(t,e){return Vs((()=>{const n=null==e?null:e.mask,s=null==e?null:e.training;let r=null==e?null:e.initialState;t=sx(t),null==r&&(r=this.stateful?this.states_:this.getInitialState(t));const i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==i)throw new mg(`RNN Layer has ${i} state(s) but was passed `+r.length+" initial state(s).");this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const a={training:s},o=Cb(((t,e)=>{const n=this.cell.call([t].concat(e),a);return[n[0],n.slice(1)]}),t,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(t){return Vs((()=>{let e=ki(t.shape);return e=yi(e,[1,2]),e=fm(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((t=>t>1?wm(e,[1,t]):e)):this.cell.stateSize>1?[wm(e,[1,this.cell.stateSize])]:[e]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t=super.getConfig(),e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(e.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===kb.className&&(e.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,t,e)}static fromConfig(t,e,n={}){const s=Sx(e.cell,n);return new t(Object.assign(e,{cell:s}))}}kb.className="RNN",zs(kb);class $b extends fx{}class Ib extends $b{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Og(this.units,"units"),this.activation=Hy(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Ym(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Ym(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Ym(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Jy(t.kernelRegularizer),this.recurrentRegularizer=Jy(t.recurrentRegularizer),this.biasRegularizer=Jy(t.biasRegularizer),this.kernelConstraint=Kg(t.kernelConstraint),this.recurrentConstraint=Kg(t.recurrentConstraint),this.biasConstraint=Kg(t.biasConstraint),this.dropout=cm([1,hm([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=cm([1,hm([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=rx(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Vs((()=>{if(2!==(t=t).length)throw new mg(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let n=t[1];t=t[0];const s=null!=e.training&&e.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Db({ones:()=>Oi(t),rate:this.dropout,training:s})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Db({ones:()=>Oi(n),rate:this.recurrentDropout,training:s}));const i=this.dropoutMask,a=this.recurrentDropoutMask;r=Cm(null!=i?di(t,i):t,this.kernel.read()),null!=this.bias&&(r=Em(r,this.bias.read())),null!=a&&(n=di(n,a));let o=Ys(r,Cm(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Vy(this.activation),useBias:this.useBias,kernelInitializer:Xm(this.kernelInitializer),recurrentInitializer:Xm(this.recurrentInitializer),biasInitializer:Xm(this.biasInitializer),kernelRegularizer:Xy(this.kernelRegularizer),recurrentRegularizer:Xy(this.recurrentRegularizer),biasRegularizer:Xy(this.biasRegularizer),activityRegularizer:Xy(this.activityRegularizer),kernelConstraint:Hg(this.kernelConstraint),recurrentConstraint:Hg(this.recurrentConstraint),biasConstraint:Hg(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},t,e)}}Ib.className="SimpleRNNCell",zs(Ib);class Eb extends kb{constructor(t){t.cell=new Ib(t),super(t)}call(t,e){return Vs((()=>{null!=this.cell.dropoutMask&&(Gs(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Gs(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,s=null==e?null:e.training,r=null==e?null:e.initialState;return super.call(t,{mask:n,training:s,initialState:r})}))}static fromConfig(t,e){return new t(e)}}Eb.className="SimpleRNN",zs(Eb);class Rb extends $b{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new mg("GRUCell does not support reset_after parameter set to true.");this.units=t.units,Og(this.units,"units"),this.activation=Hy(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Hy(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Ym(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Ym(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Ym(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Jy(t.kernelRegularizer),this.recurrentRegularizer=Jy(t.recurrentRegularizer),this.biasRegularizer=Jy(t.biasRegularizer),this.kernelConstraint=Kg(t.kernelConstraint),this.recurrentConstraint=Kg(t.recurrentConstraint),this.biasConstraint=Kg(t.biasConstraint),this.dropout=cm([1,hm([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=cm([1,hm([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){const e=(t=rx(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Vs((()=>{if(2!==(t=t).length)throw new mg("GRUCell expects 2 input Tensors (inputs, h, c), got "+t.length+".");const n=null!=e.training&&e.training;let s=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Db({ones:()=>Oi(t),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Db({ones:()=>Oi(s),rate:this.recurrentDropout,training:n,count:3}));const r=this.dropoutMask,i=this.recurrentDropoutMask;let a,o,l;0<this.dropout&&this.dropout<1&&(t=di(t,r[0]));let u=Cm(t,this.kernel.read());this.useBias&&(u=Em(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=di(s,i[0]));const c=this.recurrentKernel.read(),[h,d]=ra(c,[2*this.units,this.units],c.rank-1),p=Cm(s,h),[f,g,m]=ra(u,3,u.rank-1),[x,y]=ra(p,2,p.rank-1);a=this.recurrentActivation.apply(Ys(f,x)),o=this.recurrentActivation.apply(Ys(g,y));const b=Cm(di(o,s),d);l=this.activation.apply(Ys(m,b));const w=Ys(di(a,s),di(Ys(1,Ni(a)),l));return[w,w]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Vy(this.activation),recurrentActivation:Vy(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Xm(this.kernelInitializer),recurrentInitializer:Xm(this.recurrentInitializer),biasInitializer:Xm(this.biasInitializer),kernelRegularizer:Xy(this.kernelRegularizer),recurrentRegularizer:Xy(this.recurrentRegularizer),biasRegularizer:Xy(this.biasRegularizer),activityRegularizer:Xy(this.activityRegularizer),kernelConstraint:Hg(this.kernelConstraint),recurrentConstraint:Hg(this.recurrentConstraint),biasConstraint:Hg(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},t,e)}}Rb.className="GRUCell",zs(Rb);class Sb extends kb{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Rb(t),super(t)}call(t,e){return Vs((()=>{null!=this.cell.dropoutMask&&(Gs(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Gs(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,s=null==e?null:e.training,r=null==e?null:e.initialState;return super.call(t,{mask:n,training:s,initialState:r})}))}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Sb.className="GRU",zs(Sb);class Ab extends $b{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,Og(this.units,"units"),this.activation=Hy(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Hy(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Ym(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Ym(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Ym(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=Jy(t.kernelRegularizer),this.recurrentRegularizer=Jy(t.recurrentRegularizer),this.biasRegularizer=Jy(t.biasRegularizer),this.kernelConstraint=Kg(t.kernelConstraint),this.recurrentConstraint=Kg(t.recurrentConstraint),this.biasConstraint=Kg(t.biasConstraint),this.dropout=cm([1,hm([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=cm([1,hm([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;const n=(t=rx(t))[t.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,n=this.units;s=new((e=class extends Tm{apply(e,s){const r=t.apply([n]),i=(new Fm).apply([n]),a=t.apply([2*n]);return bm(bm(r,i),a)}}).className="CustomInit",e)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return Vs((()=>{const n=null!=e.training&&e.training;if(3!==(t=t).length)throw new mg("LSTMCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");let s=t[1];const r=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Db({ones:()=>Oi(t),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Db({ones:()=>Oi(s),rate:this.recurrentDropout,training:n,count:4}));const i=this.dropoutMask,a=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(t=di(t,i[0]));let h=Cm(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=di(s,a[0])),h=Ys(h,Cm(s,this.recurrentKernel.read())),this.useBias&&(h=Em(h,this.bias.read()));const[d,p,f,g]=ra(h,4,h.rank-1);o=this.recurrentActivation.apply(d),l=this.recurrentActivation.apply(p),u=Ys(di(l,r),di(o,this.activation.apply(f))),c=this.recurrentActivation.apply(g);const m=di(c,this.activation.apply(u));return[m,m,u]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Vy(this.activation),recurrentActivation:Vy(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Xm(this.kernelInitializer),recurrentInitializer:Xm(this.recurrentInitializer),biasInitializer:Xm(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Xy(this.kernelRegularizer),recurrentRegularizer:Xy(this.recurrentRegularizer),biasRegularizer:Xy(this.biasRegularizer),activityRegularizer:Xy(this.activityRegularizer),kernelConstraint:Hg(this.kernelConstraint),recurrentConstraint:Hg(this.recurrentConstraint),biasConstraint:Hg(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},t,e)}}Ab.className="LSTMCell",zs(Ab);class Nb extends kb{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Ab(t),super(t)}call(t,e){return Vs((()=>{null!=this.cell.dropoutMask&&(Gs(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Gs(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,s=null==e?null:e.training,r=null==e?null:e.initialState;return super.call(t,{mask:n,training:s,initialState:r})}))}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Nb.className="LSTM",zs(Nb);class Tb extends $b{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return Vs((()=>{let n=(t=t).slice(1);const s=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?s.push(n.splice(0,t.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let i;for(let a=0;a<this.cells.length;++a){const o=this.cells[a];n=s[a],i=0===a?[t[0]].concat(n):[i[0]].concat(n),i=o.call(i,e),r.push(i.slice(1))}n=[];for(const t of r.slice().reverse())n.push(...t);return[i[0]].concat(n)}))}build(t){let e;ex(t)&&(t=t[0]),t=t,this.cells.forEach(((n,s)=>{sm("RNNCell_"+s,(()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]}))})),this.built=!0}getConfig(){const t=super.getConfig(),e={cells:this.cells.map((t=>({className:t.getClassName(),config:t.getConfig()})))};return Object.assign({},t,e)}static fromConfig(t,e,n={}){const s=[];for(const t of e.cells)s.push(Sx(t,n));return new t({cells:s})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return ox(t)}setWeights(t){const e=[];for(const n of this.cells){const s=n.weights.length,r=t.splice(s);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],r[t]])}lx(e)}}function Db(t){const{ones:e,rate:n,training:s=!1,count:r=1}=t,i=()=>Rm(e(),n),a=()=>Sm(i,e,s);return!r||r<=1?Hs(a().clone()):Array(r).fill(void 0).map(a).map((t=>Hs(t.clone())))}Tb.className="StackedRNNCells",zs(Tb);class Fb extends kb{constructor(t){if(t.unroll)throw new xg("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(t.cell))throw new xg("It is not possible at the moment to stack convolutional cells.");super(t),this.inputSpec=[new ux({ndim:5})]}call(t,e){return Vs((()=>{if(null!=this.cell.dropoutMask&&(Gs(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Gs(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e.constants)throw new mg("ConvRNN2D cell does not support constants");const n=null==e?null:e.mask,s=null==e?null:e.training,r=null==e?null:e.initialState;return super.call(t,{mask:n,training:s,initialState:r})}))}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return Vs((()=>{const{stateSize:e}=this.cell,n=t.shape,s=this.computeSingleOutputShape(n),r=ki([s[0],...s.slice(2)]);return Array.isArray(e)?Array(e.length).fill(r):[r]}))}resetStates(t,e=!1){Vs((()=>{if(!this.stateful)throw new fg("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new mg("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>ki(r))):this.states_=[ki(r)];else if(null==t)Gs(this.states_),null!=this.keptStates&&(Gs(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>ki(r))):this.states_[0]=ki(r);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new mg(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);e?this.keptStates.push(this.states_.slice()):Gs(this.states_);for(let e=0;e<this.states_.length;++e){const n=t[e],s=r;if(!me(n.shape,s))throw new mg(`State ${e} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[e]=n}}this.states_=this.states_.map((t=>Hs(t.clone())))}))}computeSingleOutputShape(t){const{dataFormat:e,filters:n,kernelSize:s,padding:r,strides:i,dilationRate:a}=this.cell,o="channelsFirst"===e,l=t[o?3:2],u=t[o?4:3],c=ib(l,s[0],r,i[0],a[0]),h=ib(u,s[1],r,i[1],a[1]);return[...t.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Fb.className="ConvRNN2D";class _b extends Ab{constructor(t){const{filters:e,kernelSize:n,strides:s,padding:r,dataFormat:i,dilationRate:a}=t;super(Object.assign({},t,{units:e})),this.filters=e,Og(this.filters,"filters"),this.kernelSize=rb(n,2,"kernelSize"),this.kernelSize.forEach((t=>Og(t,"kernelSize"))),this.strides=rb(s||1,2,"strides"),this.strides.forEach((t=>Og(t,"strides"))),this.padding=r||"valid",tm(this.padding),this.dataFormat=i||"channelsLast",Qg(this.dataFormat),this.dilationRate=rb(a||1,2,"dilationRate"),this.dilationRate.forEach((t=>Og(t,"dilationRate")))}build(t){var e;t=rx(t);const n="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[n])throw new mg("The channel dimension of the input should be defined. Found "+t[n]);const s=t[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const i=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",i,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let t;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;t=new((e=class extends Tm{apply(t,e){return ym([n.apply([s]),$i([s]),n.apply([2*s])])}}).className="CustomInit",e)}else t=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,t,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return Vs((()=>{if(3!==t.length)throw new mg("ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");const n=e.training||!1,s=t[0],r=t[1],i=t[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Db({ones:()=>Oi(s),rate:this.dropout,training:n,count:4}));const a=this.dropoutMask,o=(t,e,n)=>e&&e[n]?di(e[n],t):t;let l=o(s,a,0),u=o(s,a,1),c=o(s,a,2),h=o(s,a,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Db({ones:()=>Oi(r),rate:this.recurrentDropout,training:n,count:4}));const d=this.recurrentDropoutMask;let p=o(r,d,0),f=o(r,d,1),g=o(r,d,2),m=o(r,d,3);const[x,y,b,w]=ra(this.kernel.read(),4,3),[v,C,k,$]=this.useBias?ra(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,x,v,this.padding),u=this.inputConv(u,y,C,this.padding),c=this.inputConv(c,b,k,this.padding),h=this.inputConv(h,w,$,this.padding);const[I,E,R,S]=ra(this.recurrentKernel.read(),4,3);p=this.recurrentConv(p,I),f=this.recurrentConv(f,E),g=this.recurrentConv(g,R),m=this.recurrentConv(m,S);const A=this.recurrentActivation.apply(Ys(l,p)),N=this.recurrentActivation.apply(Ys(u,f)),T=Ys(di(N,i),di(A,this.activation.apply(Ys(c,g)))),D=di(this.recurrentActivation.apply(Ys(h,m)),this.activation.apply(T));return[D,D,T]}))}getConfig(){const t=super.getConfig(),{units:e}=t,n=function(t,e){var n={};for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&e.indexOf(s)<0&&(n[s]=t[s]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(t);r<s.length;r++)e.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(t,s[r])&&(n[s[r]]=t[s[r]])}return n}(t,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,s)}inputConv(t,e,n,s){const r=Mr(t,e,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Em(r,n,this.dataFormat):r}recurrentConv(t,e){return Mr(t,e,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}_b.className="ConvLSTM2DCell",zs(_b);class Ob extends Fb{constructor(t){const e=new _b(t);super(Object.assign({},t,{cell:e}))}static fromConfig(t,e){return new t(e)}}Ob.className="ConvLSTM2D",zs(Ob);class Lb extends fx{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let t=0;t<this.noiseShape.length;++t)n.push(null==this.noiseShape[t]?e[t]:this.noiseShape[t]);return n}call(t,e){return Vs((()=>{this.invokeCallHook(t,e);const n=sx(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,s=this.getNoiseShape(n);return Sm((()=>Rm(n,this.rate,s,this.seed)),(()=>n),t)}return t}))}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}Lb.className="Dropout",zs(Lb);class Bb extends Lb{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}Bb.className="SpatialDropout1D",zs(Bb);class Mb extends fx{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,Og(this.units,"units"),this.activation=Hy(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=Ym(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Ym(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Kg(t.kernelConstraint),this.biasConstraint=Kg(t.biasConstraint),this.kernelRegularizer=Jy(t.kernelRegularizer),this.biasRegularizer=Jy(t.biasRegularizer),this.activityRegularizer=Jy(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=rx(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=rx(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return Vs((()=>{this.invokeCallHook(t,e);const n=sx(t),s=Bg(this.activation.getClassName());let r;return null!=s?r=Cm(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=Cm(n,this.kernel.read()),null!=this.bias&&(r=Em(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const t={units:this.units,activation:Vy(this.activation),useBias:this.useBias,kernelInitializer:Xm(this.kernelInitializer),biasInitializer:Xm(this.biasInitializer),kernelRegularizer:Xy(this.kernelRegularizer),biasRegularizer:Xy(this.biasRegularizer),activityRegularizer:Xy(this.activityRegularizer),kernelConstraint:Hg(this.kernelConstraint),biasConstraint:Hg(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Mb.className="Dense",zs(Mb);class zb extends fx{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=rx(t);for(const e of t.slice(1))if(null==e)throw new mg(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],lm(t,1)]}call(t,e){return Vs((()=>{this.invokeCallHook(t,e);let n=sx(t);if("channelsFirst"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=n.transpose(t)}return function(t){if(t.rank<=1)throw new mg(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],lm(t.shape,1)];return t.reshape(e)}(n)}))}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}zb.className="Flatten",zs(zb);class Pb extends fx{constructor(t){super(t),this.supportsMasking=!0,this.activation=Hy(t.activation)}call(t,e){return Vs((()=>{this.invokeCallHook(t,e);const n=sx(t);return this.activation.apply(n)}))}getConfig(){const t={activation:Vy(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}Pb.className="Activation",zs(Pb);class Wb extends fx{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return Vs((()=>{return t=sx(t),e=t,n=this.n,Vs((()=>{if(2!==e.shape.length)throw new mg(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);return wm(fm(e,1),[1,n,1])}));var e,n}))}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}Wb.className="RepeatVector",zs(Wb);class Ub extends fx{constructor(t){super(t),this.targetShape=t.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n="Total size of new array must be unchanged.",s=e.slice();let r=1,i=null;for(let t=0;t<s.length;++t){const e=s[t];if(this.isUnknown(e)){if(null!==i)throw new mg("Can only specifiy one unknown dimension.");i=t}else r*=e}const a=lm(t);if(null!==i){if(0===r||a%r!=0)throw new mg(n);s[i]=a/r}else if(a!==r)throw new mg(n);return s}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return Vs((()=>{this.invokeCallHook(t,e);const n=sx(t),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return n.reshape(r)}))}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}Ub.className="Reshape",zs(Ub);class Vb extends fx{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+t.dims+" instead.");const e=dm(1,t.dims.length+1);if(!me(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new ux({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=rx(t)).slice();return this.dims.forEach(((n,s)=>{e[s+1]=t[n]})),e}call(t,e){return ar(sx(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}Vb.className="Permute",zs(Vb);class Gb extends fx{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=sx(t);return lr(Ti(n,this.maskValue),-1)}call(t,e){return Vs((()=>{this.invokeCallHook(t,e);const n=sx(t),s=lr(Ti(n,this.maskValue),-1,!0);return n.mul(s.asType(n.dtype))}))}}Gb.className="Masking",zs(Gb);class Hb extends fx{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(kg(t.inputLength))}this.inputDim=t.inputDim,Og(this.inputDim,"inputDim"),this.outputDim=t.outputDim,Og(this.outputDim,"outputDim"),this.embeddingsInitializer=Ym(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Jy(t.embeddingsRegularizer),this.activityRegularizer=Jy(t.activityRegularizer),this.embeddingsConstraint=Kg(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return Vs((()=>this.maskZero?(t=sx(t),Ti(t,_i(t))):null))}computeOutputShape(t){if(t=rx(t),null==this.inputLength)return[...t,this.outputDim];const e=kg(this.inputLength);if(e.length!==t.length-1)throw new mg(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);{let n=0;for(let s=0;s<e.length;++s){const r=e[s],i=t[s+1];if(null!=r&&null!=i&&r!==i)throw new mg(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);null==r&&(e[n]=i),n++}}return[t[0],...e,this.outputDim]}call(t,e){return Vs((()=>{this.invokeCallHook(t,e);let n=sx(t);return"int32"!==n.dtype&&(n=pm(n,"int32")),km(this.embeddings.read(),n.as1D()).reshape(rx(this.computeOutputShape(n.shape)))}))}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Xm(this.embeddingsInitializer),embeddingsRegularizer:Xy(this.embeddingsRegularizer),activityRegularizer:Xy(this.activityRegularizer),embeddingsConstraint:Hg(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}Hb.className="Embedding",zs(Hb);class jb extends fx{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new xg}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let s=0;s<e.length;++s){const r=t[t.length-e.length+s],i=e[s];if(null==r||null==i||r<0||i<0)n.push(null);else if(1===r)n.push(i);else if(1===i)n.push(r);else{if(r!==i)throw new mg("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(r)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[rx(t)]),(t=t).length<2)throw new mg(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const n of t)null!=n&&null!==n[0]&&e.push(n[0]);if(e=Tg(e),e.length>1)throw new mg(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let n=null==t[0]?null:t[0].slice(1);for(let e=1;e<t.length;++e){const s=null==t[e]?null:t[e].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=t.map((t=>t.length));-1===t.indexOf(null)&&1===Tg(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return Vs((()=>{if(t=t,this.reshapeRequired){const e=[],n=t.map((t=>t.rank));if(-1===n.indexOf(null)){const s=hm(n);for(let n of t){const t=n.rank;for(let e=0;e<s-t;++e)n=fm(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const s of t){const t=s.rank;if(null==t){const t=s.shape,r=t[0],i=t.slice(1).concat([r]);let a=s.reshape([r].concat(lm(t.slice(1))));a=ar(a,[1,0]),a=a.reshape(i),e.push(a),n=!0}else if(t>1){const r=dm(1,t).concat([0]);e.push(ar(s,r)),n=!0}else e.push(s)}let s=this.mergeFunction(e);const r=s.rank;if(n)if(null==r){const t=s.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));s=ar(s.reshape([-1,e]),[1,0]).reshape(n)}else if(r>1){const t=[r-1].concat(dm(0,r-1));s=ar(s,t)}return s}}return this.mergeFunction(t)}))}computeOutputShape(t){let e;e=null==(t=t)[0]?null:t[0].slice(1);for(let n=1;n<t.length;++n){const s=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,s)}let n=[];for(const e of t)null!=e&&null!==e[0]&&n.push(e[0]);return n=Tg(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return Vs((()=>{if(null==e)return null;if(!Array.isArray(e))throw new mg("`mask` should be an Array");if(!Array.isArray(t))throw new mg("`inputs` should be an Array");if(e.length!==t.length)throw new mg(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every((t=>null==t)))return null;let n=(e=e.map((t=>null==t?t:Jr(t,0))))[0];for(let t=1;t<e.length-1;++t)n=wi(n,e[t]);return n}))}}class Kb extends jb{constructor(t){super(t)}mergeFunction(t){return Vs((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=Ys(e,t[n]);return e}))}}Kb.className="Add",zs(Kb);class qb extends jb{constructor(t){super(t)}mergeFunction(t){return Vs((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=di(e,t[n]);return e}))}}qb.className="Multiply",zs(qb);class Xb extends jb{constructor(t){super(t)}mergeFunction(t){return Vs((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=Ys(e,t[n]);return di(1/t.length,e)}))}}Xb.className="Average",zs(Xb);class Yb extends jb{constructor(t){super(t)}mergeFunction(t){return Vs((()=>{let e=t[0];for(let n=1;n<t.length;++n)e=hi(e,t[n]);return e}))}}Yb.className="Maximum",zs(Yb);class Jb extends jb{constructor(t){super(t)}mergeFunction(t){return Vs((()=>{let e=t[0];for(let n=1;n<t.length;++n)e=Ri(e,t[n]);return e}))}}Jb.className="Minimum",zs(Jb);class Zb extends jb{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new mg("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(const n of t)if(null!=n){e=!1;break}if(e)return;const n=[];for(let e=0;e<t.length;++e){const s=t[e].slice();s.splice(this.axis,1);let r=!1;for(const t of n)if(me(t,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new mg("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return Vs((()=>ym(t,this.axis)))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new mg("A `Concatenate` layer should be called on a list of inputs.");const e=t,n=e[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const t of e.slice(1)){if(null==n[s]||null==t[s]){n[s]=null;break}n[s]+=t[s]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new mg("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new mg("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new mg(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return Vs((()=>{let n=!0;if(e.forEach((t=>{null==t||(n=!1)})),n)return null;const s=[];for(let n=0;n<t.length;++n)null==e[n]?s.push(Oi(t[n]).asType("bool")):e[n].rank<t[n].rank?s.push(Jr(e[n],-1)):s.push(e[n]);const r=Fr(s,this.axis);return or(r,-1,!1)}))}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Qb(t,e){for(;t<0;)t+=e;return t}Zb.className="Concatenate",zs(Zb);class tw extends jb{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){he(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new xg("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(e,n);if(e[s[0]]!==n[s[1]])throw new mg(`Dimension incompatibility: ${e[s[0]]} !== ${n[s[1]]}`)}mergeFunction(t){if(2!==t.length)throw new mg(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,n=t[0],s=t[1];return e=Array.isArray(this.axes)?this.axes.map(((e,n)=>Qb(e,t[n].shape.length))):[Qb(this.axes,n.shape.length),Qb(this.axes,s.shape.length)],this.normalize&&(n=Ax(n,e[0]),s=Ax(s,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new xg("batchDot is not implemented for tensors of 4D or higher rank yet");if(he(t.shape.length>=2,(()=>"batchDot requires the rank of x to be >= 2, but got "+t.shape.length)),he(t.shape.length>=2,(()=>"batchDot requires the rank of y to be >= 2, but got "+e.shape.length)),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new xg("batchDot is not implemented for complex64-type Tensors yet.");const s=t.shape.length,r=e.shape.length;null==n&&(n=[s-1,r-2]);const i=n;return Vs((()=>{let n,a;if(s>r){n=s-r;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else if(r>s){n=r-s;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else n=0;if(2===t.shape.length&&2===e.shape.length)a=i[0]===i[1]?t.mul(e).sum(i[0]):t.transpose([1,0]).mul(e).sum(i[1]);else{const n=i[0]!==t.shape.length-1,s=i[1]===e.shape.length-1;a=t.matMul(e,n,s)}if(n>0){let t;t=s>r?s+r-3:s-1;const e=[];for(let s=t;s<t+n;++s)e.push(s);a=a.squeeze(e)}return 1===a.shape.length&&(a=a.expandDims(1)),a}))}(n,s,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[Qb(this.axes,t.length),Qb(this.axes,e.length)],n}computeOutputShape(t){he(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new xg("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(e,n);e.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=e.concat(n);return 1===r.length&&r.push(1),r}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}tw.className="Dot",zs(tw);class ew extends fx{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return Vs((()=>{this.invokeCallHook(t,e);const n=sx(t);return Sm((()=>vm(n.shape,0,this.stddev).add(n)),(()=>n),e.training||!1)}))}}ew.className="GaussianNoise",zs(ew);class nw extends fx{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Vs((()=>{this.invokeCallHook(t,e);const n=sx(t);return this.rate>0&&this.rate<1?Sm((()=>{const t=Math.sqrt(this.rate/(1-this.rate));return n.mul(vm(n.shape,1,t))}),(()=>n),e.training||!1):n}))}}nw.className="GaussianDropout",zs(nw);class sw extends fx{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||sx(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Vs((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t);return Sm((()=>{const e=sx(t),s=-1.7580993408473766;let r=ui(Ui(n),this.rate);r=pm(r,"float32");const i=((1-this.rate)*(1+this.rate*s**2))**-.5,a=-i*s*this.rate;return e.mul(r).add(r.add(-1).mul(s)).mul(i).add(a)}),(()=>sx(t)),e.training||!1)}return t}))}}function rw(t,e,n,s,r,i=.001){let a;if(2===t.rank)a=Rr(t,e,n,s,r,i);else if(3===t.rank)a=Sr(t,e,n,s,r,i);else{if(4!==t.rank)throw new xg(`batchNormalization is not implemented for array of rank ${t.rank} yet`);a=Ar(t,e,n,s,r,i)}return a}sw.className="AlphaDropout",zs(sw);class iw extends fx{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Ym(t.betaInitializer||"zeros"),this.gammaInitializer=Ym(t.gammaInitializer||"ones"),this.movingMeanInitializer=Ym(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Ym(t.movingVarianceInitializer||"ones"),this.betaConstraint=Kg(t.betaConstraint),this.gammaConstraint=Kg(t.gammaConstraint),this.betaRegularizer=Jy(t.betaRegularizer),this.gammaRegularizer=Jy(t.gammaRegularizer)}build(t){t=rx(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new mg(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape `+JSON.stringify(t)+".");this.inputSpec=[new ux({ndim:t.length,axes:{[e]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return Vs((()=>{const n=null!=e.training&&e.training,s=sx(t),r=s.shape,i=r.length,a=dm(0,i),o=this.axis>=0?this.axis:this.axis+i;a.splice(o,1);const l=bg(1,i);l[o]=r[o];const u=a.slice();u.sort();const c=!me(u,dm(0,i).slice(0,i-1));if(!n)return(()=>{if(c){const t=this.movingMean.read().reshape(l),e=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,r=this.scale?this.gamma.read().reshape(l):null;return rw(s,t,e,n,r,this.epsilon)}return rw(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,d,p]=function(t,e,n,s,r=.001){return me(s.slice().sort(),dm(0,t.rank-1))?function(t,e,n,s,r=.001){return Vs((()=>{const i=Ai(t,s),a=i.mean,o=i.variance;return[rw(t,a,o,n,e,r),a,o]}))}(t,e,n,s,r):function(t,e,n,s,r=.001){return Vs((()=>{const i=Ai(t,s),a=i.mean,o=i.variance,l=[];for(const e of dm(0,t.rank))-1!==s.indexOf(e)?l.push(1):l.push(t.shape[e]);const u=a.reshape(l),c=o.reshape(l),h=null==e?null:e.reshape(l),d=null==n?null:n.reshape(l);return[rw(t,u,c,d,h,r),a,o]}))}(t,e,n,s,r)}(s,this.gamma.read(),this.beta.read(),a,this.epsilon),f=(t,e,n)=>{Vs((()=>{const s=1-n,r=t.read(),i=r.sub(e).mul(s);t.write(r.sub(i))}))};return(()=>{f(this.movingMean,d,this.momentum),f(this.movingVariance,p,this.momentum)})(),h}))}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Xm(this.betaInitializer),gammaInitializer:Xm(this.gammaInitializer),movingMeanInitializer:Xm(this.movingMeanInitializer),movingVarianceInitializer:Xm(this.movingVarianceInitializer),betaRegularizer:Xy(this.betaRegularizer),gammaRegularizer:Xy(this.gammaRegularizer),betaConstraint:Hg(this.betaConstraint),gammaConstraint:Hg(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}iw.className="BatchNormalization",zs(iw);class aw extends fx{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error("Expected axis to be an integer, but received "+this.axis)}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(this.axis));for(const t of this.axis)if(!Number.isInteger(t))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(this.axis))}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Ym(t.betaInitializer||"zeros"),this.gammaInitializer=Ym(t.gammaInitializer||"ones"),this.betaRegularizer=Jy(t.betaRegularizer),this.gammaRegularizer=Jy(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=rx(t)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let t=0;t<this.axis.length;++t)this.axis[t]<0&&(this.axis[t]+=e);for(const t of this.axis)if(t<0||t>=e)throw new Error("Invalid axis: "+t);if(this.axis.length!==Tg(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);const n=this.axis.map((e=>t[e]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(t,e){const n=sx(t),s=n.shape,r=s.length;return Vs((()=>{let{mean:t,variance:e}=Ai(n,this.axis,!0);const i=bg(1,r);for(const t of this.axis)i[t]=s[t];const a=t=>null!=t&&t.shape.length!==r&&this.axis!==[r-1]?t.reshape(i):t;let o=a(this.gamma.read()),l=a(this.beta.read());const u=[],c=[];for(let t=0;t<r;++t)-1!==this.axis.indexOf(t)?(u.push(s[t]),c.push(1)):(u.push(1),c.push(s[t]));return t=t.tile(u),e=e.tile(u),o=o.tile(c),l=l.tile(c),rw(n,t,e,l,o,this.epsilon)}))}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Xm(this.betaInitializer),gammaInitializer:Xm(this.gammaInitializer),betaRegularizer:Xy(this.betaRegularizer),gammaRegularizer:Xy(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}aw.className="LayerNormalization",zs(aw);class ow extends fx{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new mg(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,n;if("number"==typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new mg(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new mg(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new ux({ndim:4})]}computeOutputShape(t){let e,n;return t=rx(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return Vs((()=>function(t,e,n){return Vs((()=>{if(4!==t.rank)throw new mg("temporalPadding expects input tensor to be 4-D, but received a "+t.rank+"-D tensor.");if(null==e&&(e=[[1,1],[1,1]]),2!==e.length||2!==e[0].length||2!==e[1].length)throw new mg("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==n&&(n="channelsLast"),"channelsLast"!==n&&"channelsFirst"!==n)throw new mg(`Unknown data format: ${n}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let s;return s="channelsFirst"===n?[[0,0],[0,0],e[0],e[1]]:[[0,0],e[0],e[1],[0,0]],Li(t,s)}))}(sx(t),this.padding,this.dataFormat)))}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function lw(t,e,n,s,r,i){return Vs((()=>{let a;Qg(r),em(i),tm(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==i&&(i="max"),t=ob(t,r);const o="same"===s?"same":"valid";return a="max"===i?vi(t,e,n,o):kr(t,e,n,o),"channelsFirst"===r&&(a=ar(a,[0,3,1,2])),a}))}function uw(t,e,n,s,r,i){return Vs((()=>{let a;Qg(r),em(i),tm(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==i&&(i="max"),t=lb(t,r);const o="same"===s?"same":"valid";return a="max"===i?Ci(t,e,n,o):$r(t,e,n,o),"channelsFirst"===r&&(a=ar(a,[0,4,1,2,3])),a}))}ow.className="ZeroPadding2D",zs(ow);class cw extends fx{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new mg("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.poolSize));this.poolSize=t.poolSize}if(Og(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new mg("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.strides));this.strides=t.strides}Og(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,tm(this.padding),this.inputSpec=[new ux({ndim:3})]}computeOutputShape(t){const e=ib((t=rx(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return Vs((()=>{this.invokeCallHook(t,e),t=fm(sx(t),2);const n=this.poolingFunction(sx(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return aa(n,[2])}))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class hw extends cw{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return Qg(r),tm(s),lw(t,e,n,s,r,"max")}}hw.className="MaxPooling1D",zs(hw);class dw extends cw{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return Qg(r),tm(s),lw(t,e,n,s,r,"avg")}}dw.className="AveragePooling1D",zs(dw);class pw extends fx{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new mg("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides];Og(this.poolSize,"poolSize"),Og(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Qg(this.dataFormat),tm(this.padding),this.inputSpec=[new ux({ndim:4})]}computeOutputShape(t){t=rx(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=ib(e,this.poolSize[0],this.padding,this.strides[0]),n=ib(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return Vs((()=>(this.invokeCallHook(t,e),this.poolingFunction(sx(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class fw extends pw{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return Qg(r),tm(s),lw(t,e,n,s,r,"max")}}fw.className="MaxPooling2D",zs(fw);class gw extends pw{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return Qg(r),tm(s),lw(t,e,n,s,r,"avg")}}gw.className="AveragePooling2D",zs(gw);class mw extends fx{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new mg("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];Og(this.poolSize,"poolSize"),Og(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Qg(this.dataFormat),tm(this.padding),this.inputSpec=[new ux({ndim:5})]}computeOutputShape(t){t=rx(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],s="channelsFirst"===this.dataFormat?t[4]:t[3];return e=ib(e,this.poolSize[0],this.padding,this.strides[0]),n=ib(n,this.poolSize[1],this.padding,this.strides[1]),s=ib(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,s]:[t[0],e,n,s,t[4]]}call(t,e){return Vs((()=>(this.invokeCallHook(t,e),this.poolingFunction(sx(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class xw extends mw{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return Qg(r),tm(s),uw(t,e,n,s,r,"max")}}xw.className="MaxPooling3D",zs(xw);class yw extends mw{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return Qg(r),tm(s),uw(t,e,n,s,r,"avg")}}yw.className="AveragePooling3D",zs(yw);class bw extends fx{constructor(t){super(t),this.inputSpec=[new ux({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new xg}}class ww extends bw{constructor(t){super(t||{})}call(t,e){return Vs((()=>{const e=sx(t);return Ii(e,1)}))}}ww.className="GlobalAveragePooling1D",zs(ww);class vw extends bw{constructor(t){super(t||{})}call(t,e){return Vs((()=>{const e=sx(t);return mi(e,1)}))}}vw.className="GlobalMaxPooling1D",zs(vw);class Cw extends fx{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Qg(this.dataFormat),this.inputSpec=[new ux({ndim:4})]}computeOutputShape(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new xg}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class kw extends Cw{call(t,e){return Vs((()=>{const e=sx(t);return"channelsLast"===this.dataFormat?Ii(e,[1,2]):Ii(e,[2,3])}))}}kw.className="GlobalAveragePooling2D",zs(kw);class $w extends Cw{call(t,e){return Vs((()=>{const e=sx(t);return"channelsLast"===this.dataFormat?mi(e,[1,2]):mi(e,[2,3])}))}}$w.className="GlobalMaxPooling2D",zs($w);class Iw extends fx{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,n={}){const s=Sx(e.layer,n);delete e.layer;const r={layer:s};return Object.assign(r,e),new t(r)}}class Ew extends Iw{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=rx(t)).length<3)throw new mg("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(t));this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=rx(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),s=t[1];return[n[0],s].concat(n.slice(1))}call(t,e){return Vs((()=>Cb(((t,n)=>[sx(this.layer.call(t,e)),[]]),t=sx(t),[],!1,null,null,!1,!0)[1]))}}Ew.className="TimeDistributed",zs(Ew);class Rw extends Iw{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=Sx(n),e.goBackwards=!0!==e.goBackwards;const s={};var r;if(s.className=t.layer.getClassName(),s.config=e,this.backwardLayer=Sx(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?"concat":t.mergeMode,r=this.mergeMode,Fg(Jg,"BidirectionalMergeMode",r),t.weights)throw new xg("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))}computeOutputShape(t){let e,n,s,r=this.forwardLayer.computeOutputShape(t);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),r=r,this.returnState?(s=r.slice(1),e=r[0]):e=r[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[e].concat(s).concat(s.slice()):Cg(n)}apply(t,e){let n=null==e?null:e.initialState,s=null==e?null:e.constants;null==e&&(e={});const r=vb(t,n,s,this.numConstants);if(t=r.inputs,n=r.initialState,s=r.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==s)return super.apply(t,e);const i=[],a=[];if(null!=n){const t=n.length;if(t%2>0)throw new mg("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=n,i.push(...n);const s=n.map((t=>new ux({shape:t.shape})));this.forwardLayer.stateSpec=s.slice(0,t/2),this.backwardLayer.stateSpec=s.slice(t/2),a.push(...s)}if(null!=s)throw new xg("Support for constants in Bidirectional layers is not implemented yet.");const o=i[0]instanceof cx;for(const t of i)if(t instanceof cx!==o)throw new mg("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[t].concat(i),s=this.inputSpec.concat(a),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,e);return this.inputSpec=r,o}return super.apply(t,e)}call(t,e){return Vs((()=>{const n=e.initialState;let s,r,i,a;if(null==n)s=this.forwardLayer.call(t,e),r=this.backwardLayer.call(t,e);else{const i=n.slice(0,n.length/2),a=n.slice(n.length/2);s=this.forwardLayer.call(t,Object.assign(e,{initialState:i})),r=this.backwardLayer.call(t,Object.assign(e,{initialState:a}))}return this.returnState&&(Array.isArray(s)&&(i=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=ji(r,1)),"concat"===this.mergeMode?a=ym([s,r]):"sum"===this.mergeMode?a=Ys(s,r):"ave"===this.mergeMode?a=di(.5,Ys(s,r)):"mul"===this.mergeMode?a=di(s,r):null==this.mergeMode&&(a=[s,r]),this.returnState?null==this.mergeMode?a.concat(i):[a].concat(i):a}))}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){sm(this.forwardLayer.name,(()=>{this.forwardLayer.build(t)})),sm(this.backwardLayer.name,(()=>{this.backwardLayer.build(t)})),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map((t=>null));return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=Sx(e.layer);if(delete e.layer,null!=e.numConstants)throw new xg("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=e;return s.layer=n,new t(s)}}Rw.className="Bidirectional",zs(Rw);const Sw=3,Aw=3,Nw=6,Tw=3,Dw=!0,Fw="",_w=["","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","r","s","t","u","v","w","x","y","z","á","æ","é","í","ð","ó","ö","ú","ý","þ"],Ow=_w.length,Lw=new Array(10).fill(0);let Bw;const Mw={},zw=async t=>{if(0===t.length)return Mw;const e=new Date;var n,s;Bw||(Bw=await(n=(Fw||"")+"/model/model.json",null==s&&(s={}),async function(t,e){if(null==e&&(e={}),"string"==typeof t){const r=(n=t,s=e,Wn.getLoadHandlers(n,s));if(0===r.length)r.push(function(t,e){return vs(t,e)}(t,e));else if(r.length>1)throw new mg(`Found more than one (${r.length}) load handlers for URL '${t}'`);t=r[0]}var n,s;return async function(t,e,n){if(null==n&&(n={}),null==t.load)throw new mg("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await t.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const i=null==n.strict||n.strict,a=null!=s.weightData&&null!=s.weightSpecs&&i,o=Sx(ty(r),void 0,a),l=s.trainingConfig;if(null!=l&&o.loadTrainingConfig(l),null!=s.userDefinedMetadata&&o.setUserDefinedMetadata(s.userDefinedMetadata),null!=s.weightData){if(null==s.weightSpecs)throw new mg("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:t,optimizerWeights:e}=function(t,e){const n=function(t,e){const n={};let s,r=0;for(const i of e){const e=i.name,a=i.dtype,o=i.shape,l=ge(o);let u;if("quantization"in i){const n=i.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${i.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${i.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==a)throw new Error(`Weight ${i.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${a}.`)}const o=Fn[n.dtype],c=t.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===a)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];u[t]=e*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=Pn()),u=s(h)}else{if("int32"!==a)throw new Error(`Unsupported dtype in weight '${e}': ${a}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];u[t]=Math.round(e*n.scale+n.min)}}r+=l*o}else if("string"===a){const e=ge(i.shape);u=[];for(let n=0;n<e;n++){const e=new Uint32Array(t.slice(r,r+4))[0];r+=4;const n=new Uint8Array(t.slice(r,r+e));u.push(n),r+=e}}else{const s=Fn[a],i=t.slice(r,r+l*s);if("float32"===a)u=new Float32Array(i);else if("int32"===a)u=new Int32Array(i);else if("bool"===a)u=new Uint8Array(i);else{if("complex64"!==a)throw new Error(`Unsupported dtype in weight '${e}': ${a}`);{u=new Float32Array(i);const t=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let e=0;e<t.length;e++)t[e]=u[2*e],s[e]=u[2*e+1];const r=Dn(t,o,"float32"),a=Dn(s,o,"float32");n[e]=Nn(r,a)}}r+=l*s}"complex64"!==a&&(n[e]=Dn(u,o,a))}return n}(t,e),s={},r=[];return e.forEach((t=>{"optimizer"===t.group?r.push({name:t.name,tensor:n[t.name]}):s[t.name]=n[t.name]})),{modelWeights:s,optimizerWeights:r}}(s.weightData,s.weightSpecs);o.loadWeights(t,i),null!=o.optimizer&&e.length>0&&await o.optimizer.setWeights(e),Gs(t),Gs(e.map((t=>t.tensor)))}return o}(t,0,e)}(n,s)));const r=new Date,i=[];if(t.forEach((t=>{let e=t.split("").map((t=>_w.indexOf(t)));e=[...Lw,...e,...Lw];for(let t=0;t<=e.length-22;t++){const n=e.slice(t,t+22);let s=[];for(let t=0;t<n.length;t++){let e=new Array(Ow).fill(0);e[n[t]]=1,s.push(e)}i.push(s)}})),0===i.length)return Mw;const a=await Bw.predict(Dn(i)).data();let o=0;return t.forEach((t=>{const e=[],n=t.split("");n.forEach(((t,s)=>{s+1<n.length&&(a[o]>0?e.push(a[o]):e.push(0),o++)})),Mw[t]=e})),Dw&&console.log(`Hyphenation for ${t.length} words done in ${Math.round(new Date-r)} ms (loading model took ${Math.round(r-e)} ms)`),Mw},Pw=/\u00AD/g,Ww=_w.join(""),Uw=new RegExp("((?:[^a-zA-ZÀ-ÖØ-öø-ɏ\\-\\–]+?)?\\s+?(?:[^a-zA-ZÀ-ÖØ-öø-ɏ\\-\\–]+?)?)","g"),Vw=new RegExp(`^[${Ww}]+$`,"i"),Gw=t=>{t||(t=document.body);const e=async()=>{const e=await(async(t,e,n)=>{try{t=t.replace(Pw,"");const e=[],n=[],s=new RegExp(`([${Ww}]{${Nw},})`,"i");t.split(Uw).forEach((t=>{if(!(t.length<Nw||/\s/.test(t))&&new RegExp(`[${Ww}]{${Nw}}`,"i").test(t))return Vw.test(t)?(n.includes(t.toLowerCase())||n.push(t.toLowerCase()),void e.push({string:t,toHyphenate:t.toLowerCase()})):void t.split(s).forEach(((t,s)=>{s%2!=0||t.length<Nw?e.push({string:t}):(n.includes(t.toLowerCase())||n.push(t.toLowerCase()),e.push({string:t,toHyphenate:t.toLowerCase()}))}));e.push({string:t})}));const r=await zw(n);return e.map((t=>{if(!t.toHyphenate)return t.string;const e=r[t.toHyphenate];if(!e.find((t=>t>.35000000000000003)))return t.string;const n=e.find((t=>t>.8));let s=e.map(((t,e)=>t>.35000000000000003?{value:t,index:e}:null)).filter(Boolean).sort(((t,e)=>e.value-t.value)),i=[];s.forEach((t=>{if(!i.find((e=>Math.abs(t.index-e.index)<Tw)))return t.value>.8||!n?i.push(t):void 0}));let a="";const o=t.string.split("");for(let e=0;e<o.length;e++){if(a+=o[e],e+1<Sw||t.string.length-e-1<Aw)continue;const n=(i.find((t=>t.index===e))||{}).value;(n>.8||n>.35000000000000003)&&(a+="­")}return a})).join("")}catch(t){console.log(t)}})(Hw(t));jw(t,e)};"complete"===document.readyState||"loaded"===document.readyState||"interactive"===document.readyState?e():document.addEventListener("DOMContentLoaded",e,!1)},Hw=t=>{let e="";const n=t=>{if(Array.isArray(t))return t.map(n);if(t&&t.childNodes)for(var s=0;s<t.childNodes.length;s++){var r=t.childNodes[s];if(!["SCRIPT","STYLE","CODE"].includes(r.nodeName))if(r.nodeType===Node.TEXT_NODE){var i=r.nodeValue;e+=i+"\n"}else n(r)}};return n(t),e.replace(Pw,"")},jw=(t,e)=>{let n=0;if(!e)return void console.error("No text received");const s=[];let r=0;e.split(Pw).forEach(((t,n)=>{r+=t.length,r!==e.length&&s.push(r)}));const i=e.replace(Pw,""),a=t=>{if(Array.isArray(t))return t.map(a);if(t&&t.childNodes)for(var e=0;e<t.childNodes.length;e++){var r=t.childNodes[e];if(!["SCRIPT","STYLE","CODE"].includes(r.nodeName))if(r.nodeType===Node.TEXT_NODE){var o=r.nodeValue.replace(Pw,"");if(o===i.slice(n,n+o.length)){var l=o.split("");let e="";for(let t=0;t<l.length;t++)e+=l[t],s.includes(n+t+1)&&(e+="­");t.replaceChild(document.createTextNode(e),r)}n+=o.length+1}else a(r)}};a(t)};setTimeout((()=>{Gw()}),300),console.log("haha")}()}();